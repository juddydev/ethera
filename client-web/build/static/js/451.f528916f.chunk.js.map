{"version":3,"file":"static/js/451.f528916f.chunk.js","mappings":"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","sources":["helpers/chat/createPrivateChat.ts","componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","componets/MetaNavigation/CompassItem.tsx","componets/MetaNavigation/MetaHeader.tsx","componets/MetaNavigation/MetaNavigation.tsx","componets/Chat/ChatTransferDialog.tsx","componets/Chat/ChatMediaModal.tsx","componets/Chat/ChatAudioRecorder.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx","pages/Profile/QrModal.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\nimport {useStoreState} from \"../../store\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    CONFERENCEDOMAIN: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    const currentChatRooms = useStoreState.getState().userChatRooms;\n\n    let isNewRoom = false;\n    if(currentChatRooms.filter((el) => el.jid === roomJid).length === 0){\n        isNewRoom = true;\n        xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n        xmpp.setOwner(combinedWalletAddress.toLowerCase());\n        xmpp.roomConfig(\n            combinedWalletAddress.toLowerCase(),\n            {roomName: combinedUsersName},\n        );\n        xmpp.subsribe(roomJid);\n        xmpp.presenceInRoom(roomJid);\n\n        setTimeout(() => {\n            xmpp.sendInvite(\n                underscoreManipulation(myWalletAddress),\n                roomJid.toLowerCase(),\n                underscoreManipulation(otherUserWalletAddress),\n            );\n        }, 1000);\n    }\n\n    return {roomJid, roomName: combinedUsersName, isNewRoom};\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Message as KitMessage,\n  MessageModel,\n  MessageSeparator,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport { TMessageHistory } from \"../../../store\";\nimport { useHistory } from \"react-router\";\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  Button,\n  IconButton,\n} from \"@mui/material\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport coin from \"../../../assets/images/coin.png\";\nimport { Box } from \"@mui/system\";\nimport {\n  audioMimetypes,\n  imageMimetypes,\n  videoMimetypes,\n} from \"../../../constants\";\n\nconst avatarPreviewUrl = \"https://icotar.com/initials/\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel[\"position\"];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any;\n  chooseDirectRoom: any;\n  toggleTransferDialog: (value: boolean, message: TMessageHistory) => void;\n  onMediaMessageClick: (value: boolean, message: TMessageHistory) => void;\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string;\n}\n\ntype IDirection = \"outgoing\" | \"incoming\";\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender,\n  toggleTransferDialog,\n  onMediaMessageClick,\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const isSameUser = userJid === messageJid;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const openMenu = Boolean(anchorEl);\n\n  const [messageDirection, setMessageDirection] =\n    useState<IDirection>(\"incoming\");\n\n  const openDialogMenu = () => {\n    setAnchorEl(null);\n    toggleTransferDialog(true, message);\n  };\n\n  const fullViewImage = () => {\n    onMediaMessageClick(true, message);\n  };\n\n  const rightClick = (event: React.SyntheticEvent<HTMLElement>) => {\n    if (messageDirection !== \"incoming\") {\n      return;\n    }\n    event.preventDefault();\n    openDialogMenu();\n  };\n\n  useEffect(() => {\n    if (message.data.quickReplies) {\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n    setMessageDirection(isSameUser ? \"outgoing\" : \"incoming\");\n  }, []);\n\n  return (\n    <div is={\"Message\"}>\n      {!!position.separator && (\n        <MessageSeparator>{position.separator}</MessageSeparator>\n      )}\n      <KitMessage\n        onContextMenu={rightClick}\n        style={{\n          marginBottom:\n            position.type === \"last\" || position.type === \"single\" ? 15 : null,\n        }}\n        model={{\n          sender: firstName + \" \" + lastName,\n          direction: messageDirection,\n          position: position.position,\n        }}\n        avatarPosition={isSameUser ? \"tr\" : \"tl\"}\n        avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n      >\n        {(position.type === \"first\" || position.type === \"single\") && (\n          <img\n            style={{\n              borderRadius: \"50%\",\n              boxSizing: \"border-box\",\n              width: \"42px\",\n              height: \"42px\",\n              cursor: \"pointer\",\n            }}\n            onClick={() =>\n              history.push(\"/profile/\" + message.data.senderWalletAddress)\n            }\n            is={\"Avatar\"}\n            src={\n              message.data.photoURL\n                ? message.data.photoURL\n                : +firstName + \" \" + lastName\n            }\n            onError={({ currentTarget }) => {\n              currentTarget.onerror = null;\n              currentTarget.src = avatarPreviewUrl + firstName + \" \" + lastName;\n            }}\n            alt={firstName}\n          />\n        )}\n\n        <KitMessage.CustomContent>\n          {(position.type === \"first\" || position.type === \"single\") && (\n            <span\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n              }}\n            >\n              <strong\n                style={{ cursor: \"pointer\" }}\n                onClick={() =>\n                  history.push(\"/profile/\" + message.data.senderWalletAddress)\n                }\n              >\n                {firstName} {lastName}\n                <br />\n              </strong>\n              {!isSameUser && (\n                <IconButton\n                  aria-label=\"more\"\n                  id=\"long-button\"\n                  aria-controls={openMenu ? \"long-menu\" : undefined}\n                  aria-expanded={openMenu ? \"true\" : undefined}\n                  aria-haspopup=\"true\"\n                  onClick={openDialogMenu}\n                >\n                  <MoreVertIcon />\n                </IconButton>\n              )}\n            </span>\n          )}\n\n          {message.data.isMediafile &&\n            !!imageMimetypes[message.data.mimetype] && (\n              <Card sx={{ maxWidth: 200 }}>\n                <CardActionArea onClick={fullViewImage}>\n                  <CardMedia\n                    style={{\n                      height: 150,\n                      objectFit: \"cover\",\n                      objectPosition: \"left\",\n                    }}\n                    component=\"img\"\n                    height=\"150\"\n                    image={message.data.location}\n                    alt={message.data.originalName}\n                  />\n                </CardActionArea>\n              </Card>\n            )}\n\n          {message.data.isMediafile &&\n            !!videoMimetypes[message.data.mimetype] && (\n              <video controls width=\"200px\">\n                <source\n                  src={message.data.location}\n                  type={message.data.mimetype}\n                  title={message.data.originalName}\n                />\n                Sorry, your browser doesn't support videos.\n              </video>\n            )}\n\n          {message.data.isMediafile &&\n            !!audioMimetypes[message.data.mimetype] && (\n              <audio controls>\n                <source\n                  src={message.data.location}\n                  type={message.data.mimetype}\n                />\n                Your browser does not support the audio element.\n              </audio>\n            )}\n\n          {!message.data.isMediafile && (\n            <div>\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: message.body.replace(\n                    /\\b(https?\\:\\/\\/\\S+)/gm,\n                    '<a href=\"$1\">$1</a>'\n                  ),\n                }}\n              />\n              {/*FOOTER */}\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  marginTop: 5,\n                  minWidth: 200,\n                  color:\n                    messageDirection === \"incoming\"\n                      ? \"rgb(110, 169, 215)\"\n                      : \"#c6e3fa\",\n                  flexDirection:\n                    messageDirection === \"incoming\" ? \"row\" : \"row-reverse\",\n                }}\n              >\n                <div\n                  style={{\n                    fontSize: 12,\n                  }}\n                >\n                  {differenceInHours(new Date(), new Date(message.date)) > 5\n                    ? format(new Date(message.date), \"h:mm a\")\n                    : formatDistance(\n                        subDays(new Date(message.date), 0),\n                        new Date(),\n                        {\n                          addSuffix: true,\n                        }\n                      )}\n                </div>\n                {message.coinsInMessage > 0 && (\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <div style={{ fontSize: 12 }}>\n                      {message?.coinsInMessage}\n                    </div>\n                    <img\n                      src={coin}\n                      style={{ width: 25, height: 25 }}\n                      alt={\"coin\"}\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </KitMessage.CustomContent>\n\n        {/* {(position.type === \"last\" || position.type === \"single\") && (\n          <KitMessage.Footer\n            sentTime={\n              differenceInHours(new Date(), new Date(message.date)) > 5\n                ? format(new Date(message.date), \"h:mm a\")\n                : formatDistance(\n                    subDays(new Date(message.date), 0),\n                    new Date(),\n                    {\n                      addSuffix: true,\n                    }\n                  )\n            }\n          />\n        )} */}\n      </KitMessage>\n      {!!buttons && (\n        <Box sx={{ \"& button\": { m: 0.5 } }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"max-content\",\n              marginLeft: \"45px\",\n            }}\n          >\n            {buttons.map((button, index) => {\n              return (\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => buttonSender(button)}\n                  key={index}\n                >\n                  {button.name}\n                </Button>\n              );\n            })}\n          </div>\n        </Box>\n      )}\n    </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import { Box, Button } from \"@mui/material\";\nimport { useHistory } from \"react-router\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\nimport { IApiMetaRoom } from \"./MetaNavigation\";\n\nconst CHAT = \"/chat/\";\n\nexport const CompassItem = ({\n  room,\n  name,\n  chatId,\n  setDirection,\n}: {\n  room: IApiMetaRoom | undefined;\n  name: string;\n  chatId: string;\n  setDirection: () => void;\n}) => {\n  const history = useHistory();\n  if (!room) {\n    return (\n      <Box\n        justifyContent={\"center\"}\n        alignItems={\"center\"}\n        style={{ padding: \"10px 0\" }}\n      >\n        <Button\n          disabled={!chatId}\n          onClick={() => {\n            setDirection();\n            history.push(CHAT + 'none');\n          }}\n        >\n          {\"Empty\"}\n        </Button>\n      </Box>\n    );\n  }\n  return (\n    <Box\n      justifyContent={\"center\"}\n      alignItems={\"center\"}\n      style={{ padding: \"10px 0\", maxWidth: 170 }}\n    >\n      <Button\n        onClick={() => {\n          setDirection();\n          history.push(CHAT + room.roomJid + CONFERENCEDOMAIN);\n        }}\n      >\n        {name}\n      </Button>\n    </Box>\n  );\n};\n","import { Box, Button, Typography } from \"@mui/material\";\nimport { IApiMetaRoom } from \"./MetaNavigation\";\nimport coin from \"../../assets/images/coin.png\";\nimport { useHistory } from \"react-router\";\nexport const MetaHeader = ({\n  room,\n  direction,\n  previousRoom,\n}: {\n  room: IApiMetaRoom | undefined;\n  direction: string;\n  previousRoom: IApiMetaRoom | undefined;\n}) => {\n  const history = useHistory();\n  const onCreateClick = () => {\n    history.push(\"/newchat\", {\n      metaDirection: direction,\n      metaRoom: previousRoom,\n    });\n  };\n  if (!room?.name) {\n    return (\n      <Box\n        sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n      >\n        <Box sx={{ alignItems: \"center\", display: \"flex\" }}>\n          <Typography>\n            This space is empty. You can build your own room here for{\" \"}\n            <b>120 </b>\n          </Typography>\n          <img src={coin} style={{ width: 20, height: 20 }} alt={\"coin\"} />\n\n          {/* <CreateNewChatButton\n            onPress={() =>\n              navigation.navigate(ROUTES.NEWCHAT, {\n                metaDirection: direction,\n                metaRoom: previousRoom,\n              })\n            }\n          /> */}\n        </Box>\n        <Button onClick={onCreateClick}>Create Meta Room</Button>\n      </Box>\n    );\n  }\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Typography sx={{ fontWeight: \"bold\", fontSize: 18 }}>\n        {room.name}\n      </Typography>\n      <Typography>{room.description}</Typography>\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { CompassItem } from \"./CompassItem\";\nimport {\n  Box,\n  CircularProgress,\n  IconButton,\n  Modal,\n  useTheme,\n} from \"@mui/material\";\nimport { MetaHeader } from \"./MetaHeader\";\nimport xmpp, { walletToUsername } from \"../../xmpp\";\nimport { httpWithAuth } from \"../../http\";\nimport { CONFERENCEDOMAIN, DOMAIN } from \"../../constants\";\nimport { useStoreState } from \"../../store\";\nimport ExploreIcon from \"@mui/icons-material/Explore\";\ntype IRoom = {\n  _id: string;\n  contractAddress: string;\n  createdAt: string;\n  description: string;\n  name: string;\n  ownerId: string;\n};\n\nexport interface IApiMetaRoom {\n  _id: string;\n  contractAddress: string;\n  createdAt: Date;\n  description: string;\n  name: string;\n  ownerId: string;\n  ownerNavLinks: {\n    east: IRoom | null;\n    north: IRoom | null;\n    south: IRoom | null;\n    west: IRoom | null;\n  };\n  roomJid: string;\n  updatedAt: Date;\n  userNavLinks: {\n    east: IRoom | null;\n    north: IRoom | null;\n    south: IRoom | null;\n    west: IRoom | null;\n  };\n}\n\nexport interface IMetaNavigation {\n  chatId: string;\n  open: boolean;\n  onClose: () => void;\n}\nconst DIRECTIONS = {\n  NORTH: \"north\",\n  WEST: \"west\",\n  SOUTH: \"south\",\n  EAST: \"east\",\n};\nconst SHORT_DIRECTIONS: Record<string, string> = {\n  north: \"n\",\n  west: \"w\",\n  south: \"s\",\n  east: \"e\",\n};\n\nconst OPOSITE_DIRECTIONS: Record<string, string> = {\n  [DIRECTIONS.WEST]: DIRECTIONS.EAST,\n  [DIRECTIONS.EAST]: DIRECTIONS.WEST,\n  [DIRECTIONS.SOUTH]: DIRECTIONS.NORTH,\n  [DIRECTIONS.NORTH]: DIRECTIONS.SOUTH,\n};\n\nconst getOpositeDirection = (direction: string) => {\n  return OPOSITE_DIRECTIONS[direction];\n};\n\n// const findRoom = (id: string | undefined, arr: IApiMetaRoom[]) => {\n//   if (!id) {\n//     return null;\n//   }\n//   const room = arr.find((item) => item.idAddress === id);\n//   if (!room) {\n//     return null;\n//   }\n//   return room;\n// };\n\nconst emptyMetaRoom = {\n  name: \"\",\n  description: \"\",\n  ownerNavLinks: { west: null, east: null, north: null, south: null },\n  ownerId: \"\",\n  contractAddress: \"\",\n  createdAt: new Date(),\n  _id: \"\",\n  roomJid: \"\",\n  updatedAt: new Date(),\n  userNavLinks: { west: null, east: null, north: null, south: null },\n};\n\nconst style = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  p: 2,\n  outline: 'none'\n};\nconst roomRoute = \"/room\";\nexport const MetaNavigation: React.FC<IMetaNavigation> = ({\n  chatId,\n  open,\n  onClose,\n}) => {\n  const [previousDirection, setPreviousDirection] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [previousRoom, setPreviuosRoom] = useState<IApiMetaRoom | undefined>();\n  const [currentMetaRoom, setCurrentMetaRoom] =\n    useState<IApiMetaRoom>(emptyMetaRoom);\n  const user = useStoreState((state) => state.user);\n\n  const theme = useTheme();\n\n  const getCurrentRoom = async () => {\n    setLoading(true);\n    try {\n      const res = await httpWithAuth().get(roomRoute + \"/getRoom/\" + chatId);\n      setCurrentMetaRoom(res.data.result);\n    } catch (error) {\n      setCurrentMetaRoom(emptyMetaRoom);\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!chatId) {\n      setCurrentMetaRoom(emptyMetaRoom);\n    }\n    if (chatId) {\n      getCurrentRoom();\n    }\n  }, [chatId]);\n  const checkEmptyDirections = () => {\n    return (\n      !currentMetaRoom?.ownerNavLinks?.south &&\n      !currentMetaRoom?.ownerNavLinks?.east &&\n      !currentMetaRoom?.ownerNavLinks?.west &&\n      !currentMetaRoom?.ownerNavLinks?.north &&\n      !currentMetaRoom?.userNavLinks?.south &&\n      !currentMetaRoom?.userNavLinks?.east &&\n      !currentMetaRoom?.userNavLinks?.west &&\n      !currentMetaRoom?.userNavLinks?.north\n    );\n  };\n\n  const sendMessage = (chatName: string, jid: string, isPrevious: boolean) => {\n    const manipulatedWalletAddress = walletToUsername(user.walletAddress);\n    const textEnter =\n      user.firstName + \" \" + user.lastName + \" \" + \"has joined\" + \" \" + \"<-\";\n    const textLeave =\n      user.firstName + \" \" + user.lastName + \" \" + \"has left\" + \" \" + \"->\";\n    const data = {\n      senderFirstName: user.firstName,\n      senderLastName: user.lastName,\n      senderWalletAddress: user.walletAddress,\n      isSystemMessage: true,\n      tokenAmount: 0,\n      receiverMessageId: \"\",\n      mucname: chatName,\n      photoURL: user.profileImage,\n      roomJid: jid,\n      isReply: false,\n      mainMessageText: \"\",\n      mainMessageId: \"\",\n      mainMessageUserName: \"\",\n    };\n    xmpp.sendMessageStanza(\n      manipulatedWalletAddress + DOMAIN,\n      jid,\n      isPrevious ? textLeave : textEnter,\n      data\n    );\n  };\n  const sendRoomJoin = async () => {\n    try {\n      const res = await httpWithAuth().post(roomRoute + \"/join/\" + chatId, {});\n      console.log(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    if (previousRoom?.name) {\n      sendMessage(\n        previousRoom.name,\n        previousRoom.roomJid + CONFERENCEDOMAIN,\n        true\n      );\n    }\n  }, [previousRoom]);\n  useEffect(() => {\n    if (currentMetaRoom.name) {\n      sendMessage(\n        currentMetaRoom.name,\n        currentMetaRoom.roomJid + CONFERENCEDOMAIN,\n        false\n      );\n      sendRoomJoin();\n    }\n  }, [currentMetaRoom]);\n\n  if (!currentMetaRoom.roomJid && !previousDirection) {\n    return null;\n  }\n\n  const renderDirections = (direction: string) => {\n    const oppositePreviousDirection = getOpositeDirection(previousDirection);\n    if (checkEmptyDirections() && direction === oppositePreviousDirection) {\n      return (\n        <CompassItem\n          name={oppositePreviousDirection + \":\" + previousRoom?.name}\n          chatId={chatId}\n          room={previousRoom}\n          setDirection={() => {\n            setPreviousDirection(oppositePreviousDirection);\n            setPreviuosRoom(previousRoom);\n          }}\n        />\n      );\n    }\n    return (\n      <CompassItem\n        name={\n          SHORT_DIRECTIONS[direction] +\n          \":\" +\n          (currentMetaRoom.ownerNavLinks[direction]?.name ||\n            currentMetaRoom.userNavLinks[direction]?.name)\n        }\n        chatId={chatId}\n        room={\n          currentMetaRoom?.ownerNavLinks?.[direction] ||\n          currentMetaRoom?.userNavLinks?.[direction]\n        }\n        setDirection={() => {\n          setPreviousDirection(direction);\n          setPreviuosRoom(currentMetaRoom);\n        }}\n      />\n    );\n  };\n  return (\n    <Modal open={open} onClose={onClose}>\n      <Box sx={style}>\n        {loading ? (\n          <CircularProgress size={50} />\n        ) : (\n          <Box>\n            <Box\n              sx={{ bgcolor: \"white\", mb: \"10px\", borderRadius: \"10px\", p: 2 }}\n            >\n              <MetaHeader\n                room={currentMetaRoom}\n                direction={previousDirection}\n                previousRoom={previousRoom}\n              />\n            </Box>\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                bgcolor: \"white\",\n                borderRadius: \"10px\",\n                p: 2,\n              }}\n            >\n              {renderDirections(DIRECTIONS.NORTH)}\n              <Box\n                sx={{\n                  display: \"grid\",\n                  gridTemplateColumns: \"repeat(3, 1fr)\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <Box sx={{ display: \"flex\" }}>\n                  {renderDirections(DIRECTIONS.WEST)}\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <IconButton sx={{ color: theme.palette.primary.main }}>\n                    <ExploreIcon fontSize=\"large\" />\n                  </IconButton>\n                </Box>\n                <Box sx={{ display: \"flex\" }}>\n                  {renderDirections(DIRECTIONS.EAST)}\n                </Box>\n              </Box>\n              {renderDirections(DIRECTIONS.SOUTH)}\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </Modal>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  Dialog,\n  DialogContent,\n  Divider,\n  Button,\n  Typography,\n  TextField,\n} from \"@mui/material\";\nimport { transferCoin } from \"../../http\";\n\nimport coin from \"../../assets/images/coin.png\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport BlockIcon from \"@mui/icons-material/Block\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport { coinReplacedName, coinsMainName } from \"../../config/config\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\nimport { createPrivateChat } from \"../../helpers/chat/createPrivateChat\";\nimport { useSnackbar } from \"../../context/SnackbarContext\";\n\nconst dialogItems = [1, 3, 5, \"x\"];\ninterface IProps {\n  open: boolean;\n  onClose: () => void;\n  loading?: boolean;\n  message: TMessageHistory | null;\n  onPrivateRoomClick: (jid: string) => void;\n}\ntype IDialog = \"dialog\" | \"error\" | \"clarification\" | \"transfer\";\n\nconst dialogTypes: Record<IDialog, IDialog> = {\n  dialog: \"dialog\",\n  error: \"error\",\n  clarification: \"clarification\",\n  transfer: \"transfer\",\n};\n\nexport function ChatTransferDialog({\n  open,\n  onClose,\n  loading,\n  message,\n  onPrivateRoomClick,\n}: IProps) {\n  const user = useStoreState((state) => state.user);\n\n  const [coinAmount, setCoinAmount] = useState(1);\n  const [dialogType, setDialogType] = useState<IDialog>(dialogTypes.dialog);\n\n  const balance = useStoreState((store) => store.balance);\n  const setNewUserChatRoom = useStoreState((store) => store.setNewUserChatRoom);\n  const { showSnackbar } = useSnackbar();\n  const coinData = balance.filter(\n    (el) => !el.tokenType && el.contractAddress.length > 10\n  );\n  const userToBlackList = (step: \"clarify\" | \"block\") => {\n    if (step === \"clarify\") {\n      setDialogType(dialogTypes.clarification);\n      return;\n    }\n\n    if (step === \"block\") {\n      xmpp.blacklistUser(message.data.senderJID);\n      xmpp.getBlackList();\n      useStoreState\n        .getState()\n        .removeAllInMessageHistory(message.data.senderJID);\n    }\n    onClose();\n  };\n\n  const sendCoins = async (amount?: number) => {\n    const currentCoinAmount = amount ? Number(amount) : Number(coinAmount);\n    try {\n      const res = await transferCoin(\n        \"DPT\",\n        coinData[0].tokenName,\n        currentCoinAmount,\n        message.data.senderWalletAddress\n      );\n      const coinName =\n        coinData[0].tokenName === coinsMainName\n          ? coinReplacedName\n          : coinData[0].tokenName;\n      const sender = user.firstName + \" \" + user.lastName;\n      const receiver =\n        message.data.senderFirstName + \" \" + message.data.senderLastName;\n      const textMessage = `${sender} -> ${coinAmount} ${coinName} -> ${receiver}`;\n      const transactionId = res.data.transaction._id;\n      xmpp.sendSystemMessage(\n        message.roomJID,\n        user.firstName,\n        user.lastName,\n        user.walletAddress,\n        textMessage,\n        currentCoinAmount,\n        message.id,\n        transactionId\n      );\n\n      onClose();\n    } catch (error) {\n      console.log(error);\n      showSnackbar(\"error\", \"An error occurred during the coin transfer.\");\n      onClose();\n    }\n  };\n\n  const openPrivateRoom = () => {\n    createPrivateChat(\n      user.walletAddress,\n      message.data.senderWalletAddress,\n      user.firstName,\n      message.data.senderFirstName,\n      CONFERENCEDOMAIN,\n      message.data.senderJID\n    )\n      .then((result) => {\n        if (result.isNewRoom) {\n          const temporaryRoomData = {\n            jid: result.roomJid,\n            name: result.roomName,\n            room_background: \"none\",\n            room_thumbnail: \"none\",\n            users_cnt: \"2\",\n            unreadMessages: 0,\n            composing: \"\",\n            toUpdate: true,\n            description: \"\",\n          };\n          setNewUserChatRoom(temporaryRoomData);\n          onPrivateRoomClick(result.roomJid);\n        } else {\n          onPrivateRoomClick(result.roomJid);\n        }\n      })\n      .catch((error) => {\n        console.log(\"openPrivateRoom Error: \", error);\n      });\n    onClose();\n  };\n\n  const renderDialogContent = () => {\n    if (!message) return null;\n    switch (dialogType) {\n      case dialogTypes.clarification:\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            {\"Are you sure you want to block the user?\"}\n            <Button\n              onClick={() => userToBlackList(\"block\")}\n              variant=\"outlined\"\n              size=\"small\"\n            >\n              To block list\n            </Button>\n          </div>\n        );\n      case dialogTypes.dialog:\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <div>\n              Reward{\" \"}\n              <strong>\n                {message.data.senderFirstName +\n                  \" \" +\n                  message.data.senderLastName}\n              </strong>{\" \"}\n              with coins\n            </div>\n\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                margin: \"10px 0px 10px 0px\",\n              }}\n            >\n              {dialogItems.map((item) => (\n                <div\n                  key={item}\n                  style={{\n                    textAlign: \"center\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => {\n                    typeof item === \"number\"\n                      ? sendCoins(item)\n                      : setDialogType(dialogTypes.transfer);\n                  }}\n                >\n                  <img\n                    src={coin}\n                    style={{\n                      width: 25,\n                      height: 25,\n                    }}\n                    alt={\"coin\"}\n                  />\n                  <Typography\n                    sx={{\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    {item}\n                  </Typography>\n                </div>\n              ))}\n            </div>\n            <Divider\n              style={{\n                margin: \"10px\",\n              }}\n            />\n            <Button\n              onClick={openPrivateRoom}\n              variant=\"outlined\"\n              startIcon={<SendIcon />}\n            >\n              Direct message\n            </Button>\n            <Divider\n              style={{\n                margin: \"10px\",\n              }}\n            />\n            <Button\n              onClick={() => userToBlackList(\"clarify\")}\n              variant=\"contained\"\n              startIcon={<BlockIcon />}\n            >\n              Block this user\n            </Button>\n            <Typography\n              style={{\n                textAlign: \"center\",\n              }}\n              variant=\"caption\"\n              display=\"block\"\n              gutterBottom\n            >\n              Stop seeing this user.\n            </Typography>\n          </div>\n        );\n      case dialogTypes.transfer:\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <TextField\n              id=\"standard-basic\"\n              type={\"number\"}\n              label=\"Enter transfer amount\"\n              variant=\"standard\"\n              onChange={(event) => setCoinAmount(Number(event.target.value))}\n            />\n            <Button\n              style={{\n                marginTop: 10,\n              }}\n              onClick={() => sendCoins()}\n              variant=\"outlined\"\n              size=\"small\"\n            >\n              Send coins\n            </Button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth={\"xl\"}>\n      <DialogContent>{renderDialogContent()}</DialogContent>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\n\nimport Modal from \"@mui/material/Modal\";\nimport { TCombinedMimeType } from \"../../constants\";\nimport { IconButton } from \"@mui/material\";\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst style = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  bgcolor: \"background.paper\",\n  boxShadow: 24,\n  p: 4,\n  borderRadius: '10px'\n};\n\ninterface IChatMediaModal {\n  open: boolean;\n  onClose: () => void;\n  mimetype: TCombinedMimeType;\n  url: string;\n}\n\nexport const ChatMediaModal: React.FC<IChatMediaModal> = ({\n  open,\n  onClose,\n  mimetype,\n  url,\n}) => {\n  const renderMediaContent = () => {\n    switch (mimetype) {\n      case \"image/jpeg\":\n      case \"image/png\":\n      case \"image/jpg\":\n        return <img src={url} alt={\"image1\"} style={{ maxWidth: \"100%\", maxHeight: '90vh' }} />;\n\n      default:\n        return null;\n    }\n  };\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={style}>\n        <IconButton onClick={onClose} sx={{position: 'absolute', top: 0, right: 0, color: 'black'}}>\n          <CloseIcon />\n        </IconButton>\n        {renderMediaContent()}\n      </Box>\n    </Modal>\n  );\n};\n","import React, { useCallback, useState } from \"react\";\nimport xmpp from \"../../xmpp\";\nimport { AudioRecorder, useAudioRecorder } from \"react-audio-voice-recorder\";\nimport { uploadFile } from \"../../http\";\nimport { TProfile } from \"../../pages/Profile/types\";\nimport { useStoreState } from \"../../store\";\nimport { Box, CircularProgress } from \"@mui/material\";\nimport { useSnackbar } from \"../../context/SnackbarContext\";\n\ninterface IProps {\n  profile: TProfile;\n  currentRoom: string;\n  roomData: any;\n}\n\nexport function ChatAudioMessageDialog({\n  profile,\n  currentRoom,\n  roomData,\n}: IProps) {\n  const user = useStoreState((store) => store.user);\n  const [loading, setLoading] = useState(false);\n  const recorderControls = useAudioRecorder();\n  const { showSnackbar } = useSnackbar();\n  const addAudioElement = (blob: Blob) => {\n    setLoading(true);\n    let formData = new FormData();\n    formData.append(\"files\", blob);\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        showSnackbar(\"error\", \"An error occurred while loading your audio.\");\n      });\n    setLoading(false);\n\n  };\n\n  return (\n    <Box>\n      <Box style={{ display: loading ? \"none\" : \"block\" }}>\n        <AudioRecorder\n          recorderControls={recorderControls}\n          onRecordingComplete={addAudioElement}\n        />\n      </Box>\n      {loading && <CircularProgress color={\"secondary\"} size={\"20px\"} />}\n    </Box>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport xmpp from \"../../xmpp\";\nimport {\n  TActiveRoomFilter,\n  TMessageHistory,\n  TUserChatRooms,\n  useStoreState,\n} from \"../../store\";\nimport { getPublicProfile, uploadFile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport { format, formatDistance, subDays } from \"date-fns\";\nimport * as DOMPurify from \"dompurify\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Message } from \"../../componets/Chat/Messages/Message\";\nimport { SystemMessage } from \"../../componets/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  useMediaQuery,\n  useTheme,\n  Box\n} from \"@mui/material\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useDropzone } from \"react-dropzone\";\nimport { MetaNavigation } from \"../../componets/MetaNavigation/MetaNavigation\";\nimport { QrModal } from \"../Profile/QrModal\";\nimport { ChatTransferDialog } from \"../../componets/Chat/ChatTransferDialog\";\nimport { ChatMediaModal } from \"../../componets/Chat/ChatMediaModal\";\nimport QrCodeIcon from \"@mui/icons-material/QrCode\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\nimport { ROOMS_FILTERS } from \"../../config/config\";\nimport { generateChatLink } from \"../../utils\";\nimport {ChatAudioMessageDialog} from \"../../componets/Chat/ChatAudioRecorder\";\n\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if (arr[index - 1] && message) {\n    if (\n      format(new Date(arr[index - 1]?.date), \"dd\") !==\n      format(new Date(message.date), \"dd\")\n    ) {\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (\n    previousJID === currentJID &&\n    nextJID !== currentJID &&\n    arr[index - 1]?.data.isSystemMessage === \"false\"\n  ) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nconst filterChatRooms = (\n  rooms: TUserChatRooms[],\n  filter: TActiveRoomFilter\n) => {\n  if (filter === ROOMS_FILTERS.official || filter === ROOMS_FILTERS.favourite) {\n    return rooms.filter(\n      (item) =>\n        item.group === ROOMS_FILTERS.official ||\n        item.group === ROOMS_FILTERS.favourite\n    );\n  }\n\n  return rooms.filter(\n    (item) =>\n      item.group !== ROOMS_FILTERS.official &&\n      item.group !== ROOMS_FILTERS.favourite\n  );\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const userChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n\n  const [showMetaNavigation, setShowMetaNavigation] = useState(true);\n\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const currentPickedRoom = useMemo(() => {\n    return userChatRooms.find((item) => item.jid === currentRoom);\n  }, [userChatRooms, currentRoom]);\n\n  const [showAudioMsgDialog, setShowAudioMsgDialog] = useState(false);\n\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n\n  const [transferDialogData, setTransferDialogData] = useState<{\n    open: boolean;\n    message: TMessageHistory | null;\n  }>({ open: false, message: null });\n\n  const [mediaDialogData, setMediaDialogData] = useState<{\n    open: boolean;\n    message: TMessageHistory | null;\n  }>({ open: false, message: null });\n\n  const [isQrModalVisible, setQrModalVisible] = useState(false);\n\n  const [uploadFileDialogData, setUploadFileDialogData] = useState<{\n    open: boolean;\n    headline: string;\n    description: string;\n  }>({ headline: \"\", description: \"\", open: false });\n\n  const [firstLoadMessages, setFirstLoadMessages] = useState(true);\n  const activeRoomFilter = useStoreState((state) => state.activeRoomFilter);\n  const setActiveRoomFilter = useStoreState(\n    (state) => state.setActiveRoomFilter\n  );\n  const openLastMetaRoom = activeRoomFilter === ROOMS_FILTERS.meta;\n  const closeQrModal = () => {\n    setQrModalVisible(false);\n  };\n  const history = useHistory();\n  const { roomJID } = useParams<{ roomJID: string }>();\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      sendFile(acceptedFiles[0]);\n    },\n    [roomData]\n  );\n  const { getRootProps } = useDropzone({\n    onDrop,\n    noClick: true,\n    maxFiles: 1,\n  });\n  const onYReachStart = () => {\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === currentRoom\n    );\n\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    if (roomJID) {\n      loadMessages(roomJID);\n      setShowMetaNavigation(true);\n    }\n  }, [roomJID]);\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const toggleTransferDialog = (\n    value: boolean,\n    message: TMessageHistory = null\n  ) => {\n    setTransferDialogData({ open: value, message });\n  };\n  const toggleMediaModal = (\n    value: boolean,\n    message: TMessageHistory = null\n  ) => {\n    setMediaDialogData({ open: value, message });\n  };\n\n  const chooseRoom = (jid: string) => {\n    history.push(\"/chat/\" + jid.split(\"@\")[0]);\n    loadMessages(jid);\n  };\n  const loadMessages = (jid: string) => {\n    setCurrentRoom(jid);\n    const currentRoomData = userChatRooms.filter((e) => e.jid === jid)[0];\n    setRoomData(currentRoomData);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n    setFirstLoadMessages(true);\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length <= 10 &&\n      filteredMessages.length > 0\n    ) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 50);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    return format(new Date(messagesInRoom[0].date), \"H:mm\");\n  };\n\n  const stripHtml = (html: string) => {\n    let doc: any;\n    let str = html;\n\n    str = str.replace(/<br>/gi, \"\\n\");\n    str = str.replace(/<p.*>/gi, \"\\n\");\n    str = str.replace(/<(?:.|\\s)*?>/g, \"\");\n\n    if (str.trim().length === 0) {\n      doc = new DOMParser().parseFromString(html, \"text/html\");\n    } else {\n      doc = new DOMParser().parseFromString(str, \"text/html\");\n    }\n    return doc.body.textContent || \"\";\n  };\n\n  const sendMessage = (button: any) => {\n    if (myMessage.trim().length > 0) {\n      let userAvatar = \"\";\n      if (profile?.profileImage) {\n        userAvatar = profile?.profileImage;\n      }\n      const clearMessageFromHtml = DOMPurify.sanitize(myMessage);\n      const finalMessageTxt = stripHtml(clearMessageFromHtml);\n\n      if (finalMessageTxt.trim().length > 0) {\n        xmpp.sendMessage(\n          currentRoom,\n          user.firstName,\n          user.lastName,\n          userAvatar,\n          user.walletAddress,\n          typeof button === \"object\" ? button.value : finalMessageTxt,\n          typeof button === \"object\" ? button.notDisplayedValue : null\n        );\n      }\n    }\n  };\n\n  const sendFile = (file: File) => {\n    setUploadFileDialogData({\n      headline: \"File is loading, please wait...\",\n      description: \"\",\n      open: true,\n    });\n\n    const formData = new FormData();\n    formData.append(\"files\", file);\n\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n          setUploadFileDialogData({\n            open: false,\n            description: \"\",\n            headline: \"\",\n          });\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        setUploadFileDialogData({\n          headline: \"Error\",\n          description: \"An error occurred while uploading the file\",\n          open: true,\n        });\n      });\n    if (fileRef.current) {\n      fileRef.current.value = \"\";\n    }\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n\n  const handlePaste = (event) => {\n    // @ts-ignore\n    let item = Array.from(event.clipboardData.items).find((x: any) =>\n      /^image\\//.test(x.type)\n    );\n    if (item) {\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob);\n    }\n  };\n\n  const handleChatDetailClick = () => {\n    history.push(\"/chatDetails/\" + currentUntrackedChatRoom);\n  };\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if (currentUntrackedChatRoom) {\n      if (\n        !roomJID ||\n        roomJID === \"none\" ||\n        roomJID === \"\" ||\n        currentUntrackedChatRoom.split(\"@\")[0] === roomJID\n      ) {\n        if (currentUntrackedChatRoom.split(\"@\")[1]) {\n          chooseRoom(currentUntrackedChatRoom);\n        } else {\n          chooseRoom(currentUntrackedChatRoom + CONFERENCEDOMAIN);\n        }\n      }\n    }\n\n    if (\n      currentUntrackedChatRoom.split(\"@\")[0] !== roomJID &&\n      roomJID !== \"none\" &&\n      roomJID !== \"\"\n    ) {\n      useStoreState.getState().setCurrentUntrackedChatRoom(roomJID);\n      chooseRoom(roomJID);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    };\n\n    window.onfocus = () => {\n      if (currentRoom) {\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    };\n  }, [currentRoom]);\n\n  useEffect(() => {\n    const filteredMessages = messages.filter(\n      (item: TMessageHistory) => item.roomJID === currentRoom\n    );\n    if (\n      !loaderArchive &&\n      filteredMessages.length > 0 &&\n      filteredMessages.length <= 51 &&\n      currentRoom &&\n      firstLoadMessages\n    ) {\n      const lastUpFilteredMessage = filteredMessages[0];\n\n      if (\n        filteredMessages.length >= 10 &&\n        filteredMessages.length < 15 &&\n        lastUpFilteredMessage.data.isSystemMessage\n      ) {\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(\n          currentRoom,\n          String(lastUpFilteredMessage.id),\n          5\n        );\n      } else if (filteredMessages.length === 1) {\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(\n          currentRoom,\n          String(lastUpFilteredMessage.id),\n          50\n        );\n      }\n    }\n  }, [messages]);\n\n  return (\n    <Box style={{ paddingBlock: \"20px\", height: \"100%\" }}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {filterChatRooms(userChatRooms, activeRoomFilter).map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_thumbnail !== \"none\"\n                      ? room.room_thumbnail\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <div {...getRootProps()} style={{ width: \"100%\", height: \"100%\" }}>\n          <ChatContainer>\n            {!!roomData && (\n              <ConversationHeader>\n                <ConversationHeader.Back />\n                {\n                  <ConversationHeader.Content\n                    userName={roomData.name}\n                    onClick={handleChatDetailClick}\n                    info={\n                      messages.filter(\n                        (item: any) => item.roomJID === currentRoom\n                      ).length > 0 &&\n                      \"Active \" +\n                        formatDistance(\n                          subDays(\n                            new Date(\n                              messages\n                                .filter(\n                                  (item: any) => item.roomJID === currentRoom\n                                )\n                                .slice(-1)[0].date\n                            ),\n                            0\n                          ),\n                          new Date(),\n                          { addSuffix: true }\n                        )\n                    }\n                  />\n                }\n                <ConversationHeader.Actions>\n                  <ChatAudioMessageDialog\n                      profile={profile}\n                      currentRoom={currentRoom}\n                      roomData={roomData}\n                  />\n                  <IconButton\n                      sx={{ color: \"black\" }}\n                      onClick={() => setQrModalVisible(true)}\n                  >\n                    <QrCodeIcon />\n                  </IconButton>\n                </ConversationHeader.Actions>\n              </ConversationHeader>\n            )}\n            <MessageList\n              style={{\n                backgroundImage: currentPickedRoom?.room_background\n                  ? `url(${currentPickedRoom.room_background})`\n                  : \"white\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundSize: \"100% 100%\",\n              }}\n              loadingMore={loaderArchive}\n              onYReachStart={onYReachStart}\n              disableOnYReachWhenNoScroll={true}\n              typingIndicator={\n                !!userChatRooms.filter((e) => e.jid === currentRoom)[0]\n                  ?.composing && (\n                  <TypingIndicator\n                    style={{ opacity: \".6\" }}\n                    content={\n                      userChatRooms.filter((e) => e.jid === currentRoom)[0]\n                        ?.composing\n                    }\n                  />\n                )\n              }\n            >\n              {messages\n                .filter((item: TMessageHistory) => item.roomJID === currentRoom)\n                .map((message, index, arr) => {\n                  const position = getPosition(arr, message, index);\n                  if (message.data.isSystemMessage === \"false\") {\n                    return (\n                      <Message\n                        key={message.id}\n                        is={\"Message\"}\n                        position={position}\n                        message={message}\n                        userJid={xmpp.client?.jid?.toString()}\n                        buttonSender={sendMessage}\n                        chooseDirectRoom={chooseRoom}\n                        toggleTransferDialog={toggleTransferDialog}\n                        onMediaMessageClick={toggleMediaModal}\n                      />\n                    );\n                  } else {\n                    return (\n                      <SystemMessage\n                        key={message.id}\n                        is={\"Message\"}\n                        message={message}\n                        userJid={xmpp.client?.jid?.toString()}\n                      />\n                    );\n                  }\n                })}\n              {messages.length <= 0 ||\n                !currentRoom ||\n                (currentRoom === \"none@conference.dev.dxmpp.com\" && (\n                  <MessageList.Content\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      height: \"100%\",\n                      textAlign: \"center\",\n                      fontSize: \"1.2em\",\n                    }}\n                  >\n                    {!loaderArchive ? (\n                      <span>\n                        {!currentRoom ||\n                        currentRoom === \"none@conference.dev.dxmpp.com\"\n                          ? \"Choose a chat room or create one to start a conversation.\"\n                          : null}\n                      </span>\n                    ) : (\n                      \"Loading...\"\n                    )}\n                  </MessageList.Content>\n                ))}\n              {!loaderArchive &&\n                currentRoom &&\n                currentRoom !== \"none@conference.dev.dxmpp.com\" &&\n                messages.filter((item: any) => item.roomJID === currentRoom)\n                  .length <= 0 && (\n                  <MessageList.Content\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      height: \"100%\",\n                      textAlign: \"center\",\n                      fontSize: \"1.2em\",\n                    }}\n                  >\n                    Message list is empty\n                  </MessageList.Content>\n                )}\n            </MessageList>\n            {!!roomData?.name && (\n              <div is={\"MessageInput\"}>\n                <MessageInput\n                  onPaste={handlePaste}\n                  placeholder=\"Type message here\"\n                  onChange={setMessage}\n                  onSend={sendMessage}\n                  onAttachClick={() => fileRef.current.click()}\n                />\n                <input\n                  type=\"file\"\n                  name=\"file\"\n                  id=\"file\"\n                  onChange={(event) => sendFile(event.target.files[0])}\n                  ref={fileRef}\n                  style={{ display: \"none\" }}\n                />\n              </div>\n            )}\n          </ChatContainer>\n        </div>\n      </MainContainer>\n\n      <ChatTransferDialog\n        open={transferDialogData.open}\n        onClose={() => toggleTransferDialog(false)}\n        loading={false}\n        onPrivateRoomClick={chooseRoom}\n        message={transferDialogData.message}\n      />\n      <ChatMediaModal\n        open={mediaDialogData.open}\n        onClose={() => toggleMediaModal(false)}\n        mimetype={mediaDialogData.message?.data?.mimetype}\n        url={mediaDialogData.message?.data?.location}\n      />\n\n      <Dialog\n        fullScreen={fullScreen}\n        open={uploadFileDialogData.open}\n        onClose={() =>\n          setUploadFileDialogData({\n            open: false,\n            description: \"\",\n            headline: \"\",\n          })\n        }\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {uploadFileDialogData.headline}\n        </DialogTitle>\n        <DialogContent>\n          {!!uploadFileDialogData.description ? (\n            <DialogContentText>\n              {uploadFileDialogData.description}\n            </DialogContentText>\n          ) : (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <CircularProgress />\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() =>\n              setUploadFileDialogData({\n                open: false,\n                description: \"\",\n                headline: \"\",\n              })\n            }\n            autoFocus\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <QrModal\n        open={isQrModalVisible}\n        link={generateChatLink({ roomAddress: currentPickedRoom?.jid })}\n        onClose={closeQrModal}\n        title={\"Share Chatroom\"}\n      />\n      <MetaNavigation\n        open={showMetaNavigation || openLastMetaRoom}\n        chatId={currentRoom.split(\"@\")[0]}\n        onClose={() => {\n          setShowMetaNavigation(false);\n\n          openLastMetaRoom && setActiveRoomFilter(\"\");\n        }}\n      />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n      <ChatInRoom />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Button, Dialog, DialogTitle, IconButton } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport QRCode from \"react-qr-code\";\nimport { truncateString } from \"../../utils\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nexport interface IQrModal {\n  open: boolean;\n  link: string;\n  onClose: () => void;\n  title?: string;\n}\n\nexport const QrModal: React.FC<IQrModal> = ({ title, open, link, onClose }) => {\n  return (\n    <Dialog maxWidth={false} open={open} onClose={onClose}>\n      {!!title && (\n        <DialogTitle sx={{ padding: \"0 24px\", paddingTop: \"20px\" }}>\n          {title}\n        </DialogTitle>\n      )}\n      <Box sx={{ padding: \"20px\" }}>\n        <QRCode\n          size={256}\n          style={{ height: \"50vh\", maxWidth: \"100%\", width: \"100%\" }}\n          value={link}\n          viewBox={`0 0 256 256`}\n        />\n        <Box\n          sx={{\n            boxShadow: \"0px 0px 10px -5px rgba(0,0,0,0.75)\",\n            borderRadius: \"10px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            pl: \"10px\",\n            my: \"10px\",\n          }}\n        >\n          <span>{truncateString(link, 50)}</span>\n          <Button\n            variant=\"contained\"\n            sx={{ borderRadius: \"10px\", marginLeft: '5px' }}\n            onClick={() => navigator.clipboard.writeText(link)}\n          >\n            Copy\n          </Button>\n        </Box>\n        <IconButton\n          onClick={onClose}\n          sx={{\n            color: \"black\",\n            position: \"absolute\",\n            top: 10,\n            right: 10,\n            fontSize: \"30px\",\n          }}\n        >\n          <CloseIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Box>\n    </Dialog>\n  );\n};\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","CONFERENCEDOMAIN","userJID","combinedWalletAddress","sort","join","roomJid","combinedUsersName","currentChatRooms","useStoreState","userChatRooms","isNewRoom","filter","el","jid","length","xmpp","roomName","setTimeout","Message","message","userJid","position","buttonSender","toggleTransferDialog","onMediaMessageClick","firstName","data","senderFirstName","lastName","senderLastName","isSameUser","senderJID","history","useHistory","useState","buttons","setButtons","React","anchorEl","setAnchorEl","openMenu","Boolean","messageDirection","setMessageDirection","openDialogMenu","useEffect","quickReplies","JSON","parse","is","separator","onContextMenu","event","preventDefault","style","marginBottom","type","model","sender","direction","avatarPosition","avatarSpacer","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","display","justifyContent","alignItems","IconButton","id","undefined","MoreVert","isMediafile","imageMimetypes","mimetype","Card","sx","maxWidth","CardActionArea","CardMedia","objectFit","objectPosition","component","image","location","originalName","videoMimetypes","controls","title","audioMimetypes","dangerouslySetInnerHTML","__html","body","marginTop","minWidth","color","flexDirection","fontSize","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","coinsInMessage","coin","Box","m","marginLeft","map","button","index","Button","variant","size","name","SystemMessage","textAlign","fontFamily","key","CHAT","CompassItem","room","chatId","setDirection","padding","disabled","MetaHeader","previousRoom","Typography","fontWeight","description","metaDirection","metaRoom","DIRECTIONS","SHORT_DIRECTIONS","north","west","south","east","OPOSITE_DIRECTIONS","emptyMetaRoom","ownerNavLinks","ownerId","contractAddress","createdAt","_id","updatedAt","userNavLinks","top","left","transform","p","outline","MetaNavigation","open","onClose","previousDirection","setPreviousDirection","loading","setLoading","setPreviuosRoom","currentMetaRoom","setCurrentMetaRoom","user","state","theme","useTheme","getCurrentRoom","httpWithAuth","get","roomRoute","res","result","console","log","sendMessage","chatName","isPrevious","manipulatedWalletAddress","walletToUsername","walletAddress","textEnter","textLeave","isSystemMessage","tokenAmount","receiverMessageId","mucname","profileImage","isReply","mainMessageText","mainMessageId","mainMessageUserName","DOMAIN","sendRoomJoin","post","renderDirections","oppositePreviousDirection","getOpositeDirection","checkEmptyDirections","Modal","CircularProgress","bgcolor","mb","gridTemplateColumns","palette","primary","main","Explore","dialogItems","dialogTypes","ChatTransferDialog","onPrivateRoomClick","coinAmount","setCoinAmount","dialogType","setDialogType","balance","store","setNewUserChatRoom","showSnackbar","useSnackbar","coinData","tokenType","userToBlackList","step","removeAllInMessageHistory","sendCoins","amount","currentCoinAmount","Number","transferCoin","tokenName","coinName","coinsMainName","coinReplacedName","receiver","textMessage","transactionId","transaction","roomJID","openPrivateRoom","then","temporaryRoomData","room_background","room_thumbnail","users_cnt","unreadMessages","composing","toUpdate","catch","error","Dialog","DialogContent","margin","item","Divider","startIcon","Send","Block","gutterBottom","TextField","label","onChange","target","value","renderDialogContent","boxShadow","ChatMediaModal","url","right","Close","maxHeight","renderMediaContent","ChatAudioMessageDialog","profile","currentRoom","roomData","recorderControls","useAudioRecorder","onRecordingComplete","blob","formData","FormData","append","uploadFile","userAvatar","results","expiresAt","fileName","filename","isVisible","locationPreview","originalname","ownerKey","duration","userId","waveForm","attachmentId","wrappable","ChatInRoom","messages","historyMessages","loaderArchive","currentUntrackedChatRoom","setProfile","myMessage","setMyMessage","showMetaNavigation","setShowMetaNavigation","setCurrentRoom","currentPickedRoom","useMemo","find","setRoomData","transferDialogData","setTransferDialogData","mediaDialogData","setMediaDialogData","isQrModalVisible","setQrModalVisible","headline","uploadFileDialogData","setUploadFileDialogData","firstLoadMessages","setFirstLoadMessages","activeRoomFilter","setActiveRoomFilter","openLastMetaRoom","ROOMS_FILTERS","useParams","fileRef","useRef","fullScreen","useMediaQuery","breakpoints","down","onDrop","useCallback","acceptedFiles","sendFile","getRootProps","useDropzone","noClick","maxFiles","loadMessages","getPublicProfile","rooms","toggleMediaModal","chooseRoom","split","currentRoomData","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","lastMessageID","String","getConversationInfo","messagesInRoom","slice","getLastActiveTime","trim","finalMessageTxt","html","DOMParser","parseFromString","textContent","stripHtml","DOMPurify","notDisplayedValue","file","current","timeoutId","clearTimeout","window","onblur","onfocus","lastUpFilteredMessage","paddingBlock","responsive","scrollable","placeholder","group","active","unreadCnt","info","lastActivityTime","userName","QrCode","backgroundImage","backgroundRepeat","backgroundSize","loadingMore","onYReachStart","disableOnYReachWhenNoScroll","typingIndicator","opacity","content","arr","previousJID","nextJID","currentJID","getPosition","toString","chooseDirectRoom","onPaste","Array","from","clipboardData","items","x","test","getAsFile","onSend","onAttachClick","click","files","ref","DialogTitle","DialogContentText","DialogActions","autoFocus","QrModal","link","generateChatLink","roomAddress","Chat","Container","paddingTop","viewBox","pl","my","truncateString","navigator","clipboard","writeText"],"sourceRoot":""}