{"version":3,"file":"static/js/463.a96a63db.chunk.js","mappings":"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","sources":["helpers/chat/createPrivateChat.ts","componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","componets/MetaNavigation/CompassItem.tsx","componets/MetaNavigation/MetaHeader.tsx","componets/MetaNavigation/MetaNavigation.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\nimport {useStoreState} from \"../../store\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    CONFERENCEDOMAIN: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    const currentChatRooms = useStoreState.getState().userChatRooms;\n\n    let isNewRoom = false;\n    if(currentChatRooms.filter((el) => el.jid === roomJid).length === 0){\n        isNewRoom = true;\n        xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n        xmpp.setOwner(combinedWalletAddress.toLowerCase());\n        xmpp.roomConfig(\n            combinedWalletAddress.toLowerCase(),\n            {roomName: combinedUsersName},\n        );\n        xmpp.subsribe(roomJid);\n        xmpp.presenceInRoom(roomJid);\n\n        setTimeout(() => {\n            xmpp.sendInvite(\n                underscoreManipulation(myWalletAddress),\n                roomJid.toLowerCase(),\n                underscoreManipulation(otherUserWalletAddress),\n            );\n        }, 1000);\n    }\n\n    return {roomJid, roomName: combinedUsersName, isNewRoom};\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Message as KitMessage,\n  MessageModel,\n  MessageSeparator,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport { TMessageHistory, useStoreState } from \"../../../store\";\nimport { useHistory } from \"react-router\";\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  Dialog,\n  DialogContent,\n  Divider,\n  Button,\n  IconButton,\n  Slider,\n  Typography,\n  TextField,\n} from \"@mui/material\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport { transferCoin } from \"../../../http\";\nimport xmpp from \"../../../xmpp\";\nimport { createPrivateChat } from \"../../../helpers/chat/createPrivateChat\";\nimport coin from \"../../../assets/images/coin.png\";\nimport { Box } from \"@mui/system\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport BlockIcon from \"@mui/icons-material/Block\";\nimport { coinReplacedName, coinsMainName } from \"../../../config/config\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel[\"position\"];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any;\n  chooseDirectRoom: any;\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string;\n}\n\ntype IDialog = \"dialog\" | \"image\" | \"error\" | \"clarification\" | \"transfer\";\ntype IDirection = \"outgoing\" | \"incoming\";\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender,\n  chooseDirectRoom,\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [dialogMenuType, setDialogMenuType] = useState<IDialog>(\"dialog\");\n  const [dialogText, setDialogText] = useState(\"\");\n  const openMenu = Boolean(anchorEl);\n  const [coinAmount, setCoinAmount] = useState(1);\n  const balance = useStoreState((store) => store.balance);\n  const coinData = balance.filter(\n    (el) => !el.tokenType && el.contractAddress.length > 10\n  );\n  const user = useStoreState((store) => store.user);\n  const [messageDirection, setMessageDirection] =\n    useState<IDirection>(\"incoming\");\n\n  const openDialogMenu = (type: IDialog) => {\n    setAnchorEl(null);\n    setOpenDialog(true);\n    setDialogMenuType(type);\n  };\n\n  const sendCoins = (amount?: number) => {\n    const currentCoinAmount = amount ? Number(amount) : Number(coinAmount);\n\n    // @ts-ignore\n    transferCoin(\n      \"DPT\",\n      coinData[0].tokenName,\n      currentCoinAmount,\n      message.data.senderWalletAddress\n    )\n      .then((res) => {\n        const coinName =\n          coinData[0].tokenName === coinsMainName\n            ? coinReplacedName\n            : coinData[0].tokenName;\n        const sender = user.firstName + \" \" + user.lastName;\n        const receiver =\n          message.data.senderFirstName + \" \" + message.data.senderLastName;\n        const textMessage = `${sender} -> ${coinAmount} ${coinName} -> ${receiver}`;\n        xmpp.sendSystemMessage(\n          message.roomJID,\n          user.firstName,\n          user.lastName,\n          user.walletAddress,\n          textMessage,\n          currentCoinAmount,\n          message.id\n        );\n\n        setOpenDialog(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogText(\"An error occurred during the coin transfer.\");\n        setDialogMenuType(\"error\");\n      });\n  };\n\n  const openPrivateRoom = () => {\n    createPrivateChat(\n      user.walletAddress,\n      message.data.senderWalletAddress,\n      user.firstName,\n      message.data.senderFirstName,\n      \"@conference.dev.dxmpp.com\",\n      message.data.senderJID\n    )\n      .then((result) => {\n        if (result.isNewRoom) {\n          const temporaryRoomData = {\n            jid: result.roomJid,\n            name: result.roomName,\n            room_background: \"none\",\n            room_thumbnail: \"none\",\n            users_cnt: \"2\",\n            unreadMessages: 0,\n            composing: \"\",\n            toUpdate: true,\n            description: \"\"\n          };\n          useStoreState.getState().setNewUserChatRoom(temporaryRoomData);\n          chooseDirectRoom(result.roomJid);\n        } else {\n          chooseDirectRoom(result.roomJid);\n        }\n      })\n      .catch((error) => {\n        console.log(\"openPrivateRoom Error: \", error);\n      });\n  };\n\n  const fullViewImage = () => {\n    setOpenDialog(true);\n    setDialogMenuType(\"image\");\n  };\n\n  const rightClick = (event) => {\n    event.preventDefault();\n    openDialogMenu(\"dialog\");\n  };\n\n  const userToBlackList = (step: \"clarify\" | \"block\") => {\n    if (step === \"clarify\") {\n      setDialogText(\"Are you sure you want to block the user?\");\n      setDialogMenuType(\"clarification\");\n    }\n\n    if (step === \"block\") {\n      xmpp.blacklistUser(message.data.senderJID);\n      xmpp.getBlackList();\n      useStoreState\n        .getState()\n        .removeAllInMessageHistory(message.data.senderJID);\n      setOpenDialog(false);\n    }\n  };\n\n  useEffect(() => {\n    if (message.data.quickReplies) {\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n    setMessageDirection(\n      String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0]\n        ? \"outgoing\"\n        : \"incoming\"\n    );\n  }, []);\n  return (\n    <div is={\"Message\"}>\n      {position.separator ? (\n        <MessageSeparator>{position.separator}</MessageSeparator>\n      ) : null}\n      <KitMessage\n        onContextMenu={messageDirection === \"incoming\" ? rightClick : null}\n        style={{\n          marginBottom:\n            position.type === \"last\" || position.type === \"single\" ? 15 : null,\n        }}\n        model={{\n          sender: firstName + \" \" + lastName,\n          direction: messageDirection,\n          position: position.position,\n        }}\n        avatarPosition={\n          String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0]\n            ? \"tr\"\n            : \"tl\"\n        }\n        avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n      >\n        {(position.type === \"first\" || position.type === \"single\") && (\n          <img\n            style={{\n              borderRadius: \"50%\",\n              boxSizing: \"border-box\",\n              width: \"42px\",\n              height: \"42px\",\n              cursor: \"pointer\",\n            }}\n            onClick={() =>\n              history.push(\"/profile/\" + message.data.senderWalletAddress)\n            }\n            is={\"Avatar\"}\n            src={\n              message.data.photoURL\n                ? message.data.photoURL\n                : \"https://icotar.com/initials/\" + firstName + \" \" + lastName\n            }\n            onError={({ currentTarget }) => {\n              currentTarget.onerror = null;\n              currentTarget.src =\n                \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\n            }}\n            alt={firstName}\n          />\n        )}\n\n        <KitMessage.CustomContent>\n          {(position.type === \"first\" || position.type === \"single\") && (\n            <span\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n              }}\n            >\n              <strong\n                style={{ cursor: \"pointer\" }}\n                onClick={() =>\n                  history.push(\"/profile/\" + message.data.senderWalletAddress)\n                }\n              >\n                {firstName} {lastName}\n                <br />\n              </strong>\n              {String(userJid).split(\"/\")[0] !==\n              String(messageJid).split(\"/\")[0] ? (\n                <IconButton\n                  aria-label=\"more\"\n                  id=\"long-button\"\n                  aria-controls={openMenu ? \"long-menu\" : undefined}\n                  aria-expanded={openMenu ? \"true\" : undefined}\n                  aria-haspopup=\"true\"\n                  onClick={() => openDialogMenu(\"dialog\")}\n                >\n                  <MoreVertIcon />\n                </IconButton>\n              ) : null}\n            </span>\n          )}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"image\" ? (\n            <Card sx={{ maxWidth: 200 }}>\n              <CardActionArea onClick={fullViewImage}>\n                <CardMedia\n                  style={{\n                    height: 150,\n                    objectFit: \"cover\",\n                    objectPosition: \"left\",\n                  }}\n                  component=\"img\"\n                  height=\"150\"\n                  image={message.data.location}\n                  alt={message.data.originalName}\n                />\n              </CardActionArea>\n            </Card>\n          ) : null}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"application\" ? (\n            <a target=\"_blank\" href={message.data.location}>\n              <KitMessage.ImageContent\n                src={message.data.locationPreview}\n                alt={message.data.originalName}\n                width={150}\n              />\n              {message.data.mimetype.split(\"/\")[1]}\n            </a>\n          ) : null}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"video\" ? (\n            <video controls width=\"200px\">\n              <source\n                src={message.data.location}\n                type={message.data.mimetype}\n                title={message.data.originalName}\n              />\n              Sorry, your browser doesn't support videos.\n            </video>\n          ) : null}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"audio\" ? (\n            <audio controls>\n              <source\n                src={message.data.location}\n                type={message.data.mimetype}\n              />\n              Your browser does not support the audio element.\n            </audio>\n          ) : null}\n\n          {!message.data.isMediafile ? (\n            <div>\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: message.body.replace(\n                    /\\b(https?\\:\\/\\/\\S+)/gm,\n                    '<a href=\"$1\">$1</a>'\n                  ),\n                }}\n              ></span>\n              {/*FOOTER */}\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  marginTop: 5,\n                  minWidth: 200,\n                  color:\n                    messageDirection === \"incoming\"\n                      ? \"rgb(110, 169, 215)\"\n                      : \"#c6e3fa\",\n                  flexDirection:\n                    messageDirection === \"incoming\" ? \"row\" : \"row-reverse\",\n                }}\n              >\n                <div\n                  style={{\n                    fontSize: 12,\n                  }}\n                >\n                  {differenceInHours(new Date(), new Date(message.date)) > 5\n                    ? format(new Date(message.date), \"h:mm a\")\n                    : formatDistance(\n                        subDays(new Date(message.date), 0),\n                        new Date(),\n                        {\n                          addSuffix: true,\n                        }\n                      )}\n                </div>\n                {message.coinsInMessage > 0 ? (\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <div style={{ fontSize: 12 }}>\n                      {message?.coinsInMessage}\n                    </div>\n                    <img\n                      src={coin}\n                      style={{ width: 25, height: 25 }}\n                      alt={\"coin\"}\n                    />\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          ) : null}\n        </KitMessage.CustomContent>\n\n        {/*{(position.type === \"last\" || position.type === \"single\") && (*/}\n        {/*  <KitMessage.Footer*/}\n        {/*    sentTime={*/}\n        {/*      differenceInHours(new Date(), new Date(message.date)) > 5*/}\n        {/*        ? format(new Date(message.date), \"h:mm a\")*/}\n        {/*        : formatDistance(*/}\n        {/*            subDays(new Date(message.date), 0),*/}\n        {/*            new Date(),*/}\n        {/*            {*/}\n        {/*              addSuffix: true,*/}\n        {/*            }*/}\n        {/*          )*/}\n        {/*    }*/}\n        {/*  />*/}\n        {/*)}*/}\n      </KitMessage>\n      {buttons ? (\n        <Box sx={{ \"& button\": { m: 0.5 } }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"max-content\",\n              marginLeft: \"45px\",\n            }}\n          >\n            {buttons.map((button, index) => {\n              return (\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => buttonSender(button)}\n                  key={index}\n                >\n                  {button.name}\n                </Button>\n              );\n            })}\n          </div>\n        </Box>\n      ) : null}\n\n      <Dialog\n        open={openDialog}\n        onClose={() => setOpenDialog(false)}\n        maxWidth={\"xl\"}\n      >\n        <DialogContent>\n          {dialogMenuType === \"error\" ? <div>{dialogText}</div> : null}\n\n          {dialogMenuType === \"clarification\" ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              {dialogText}\n              <Button\n                onClick={() => userToBlackList(\"block\")}\n                variant=\"outlined\"\n                size=\"small\"\n              >\n                To block list\n              </Button>\n            </div>\n          ) : null}\n\n          {dialogMenuType === \"dialog\" ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div>\n                Reward{\" \"}\n                <strong>\n                  {message.data.senderFirstName +\n                    \" \" +\n                    message.data.senderLastName}\n                </strong>{\" \"}\n                with coins\n              </div>\n\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  margin: \"10px 0px 10px 0px\",\n                }}\n              >\n                {[1, 3, 5, \"x\"].map((item) => (\n                  <div\n                    key={item}\n                    style={{ textAlign: \"center\", cursor: \"pointer\" }}\n                    onClick={() => {\n                      typeof item === \"number\"\n                        ? sendCoins(item)\n                        : setDialogMenuType(\"transfer\");\n                    }}\n                  >\n                    <img\n                      src={coin}\n                      style={{ width: 25, height: 25 }}\n                      alt={\"coin\"}\n                    />\n                    <Typography sx={{ fontWeight: \"bold\" }}>{item}</Typography>\n                  </div>\n                ))}\n              </div>\n              <Divider style={{ margin: \"10px\" }} />\n              <Button\n                onClick={openPrivateRoom}\n                variant=\"outlined\"\n                startIcon={<SendIcon />}\n              >\n                Direct message\n              </Button>\n              <Divider style={{ margin: \"10px\" }} />\n              <Button\n                onClick={() => userToBlackList(\"clarify\")}\n                variant=\"contained\"\n                startIcon={<BlockIcon />}\n              >\n                Block this user\n              </Button>\n              <Typography\n                style={{ textAlign: \"center\" }}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Stop seeing this user.\n              </Typography>\n            </div>\n          ) : null}\n\n          {dialogMenuType === \"transfer\" ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <TextField\n                id=\"standard-basic\"\n                type={\"number\"}\n                label=\"Enter transfer amount\"\n                variant=\"standard\"\n                onChange={(event) => setCoinAmount(Number(event.target.value))}\n              />\n              <Button\n                style={{ marginTop: 10 }}\n                onClick={() => sendCoins()}\n                variant=\"outlined\"\n                size=\"small\"\n              >\n                Send coins\n              </Button>\n            </div>\n          ) : null}\n\n          {dialogMenuType === \"image\" ? (\n            <div>\n              <img\n                src={message.data.location}\n                alt={message.data.originalName}\n                style={{ maxWidth: \"100%\" }}\n              />\n            </div>\n          ) : null}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import { Box, Button } from \"@mui/material\";\nimport { useHistory } from \"react-router\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\nimport { IApiMetaRoom } from \"./MetaNavigation\";\n\nconst CHAT = \"/chat/\";\n\nexport const CompassItem = ({\n  room,\n  name,\n  chatId,\n  setDirection,\n}: {\n  room: IApiMetaRoom | undefined;\n  name: string;\n  chatId: string;\n  setDirection: () => void;\n}) => {\n  const history = useHistory();\n  if (!room) {\n    return (\n      <Box\n        justifyContent={\"center\"}\n        alignItems={\"center\"}\n        style={{ padding: \"10px 0\" }}\n      >\n        <Button\n          disabled={!chatId}\n          onClick={() => {\n            setDirection();\n            history.push(CHAT + 'none');\n          }}\n        >\n          {\"Empty\"}\n        </Button>\n      </Box>\n    );\n  }\n  return (\n    <Box\n      justifyContent={\"center\"}\n      alignItems={\"center\"}\n      style={{ padding: \"10px 0\", maxWidth: 170 }}\n    >\n      <Button\n        onClick={() => {\n          setDirection();\n          history.push(CHAT + room.roomJid + CONFERENCEDOMAIN);\n        }}\n      >\n        {name}\n      </Button>\n    </Box>\n  );\n};\n","import { Box, Button, Typography } from \"@mui/material\";\nimport { IApiMetaRoom } from \"./MetaNavigation\";\nimport coin from \"../../assets/images/coin.png\";\nimport { useHistory } from \"react-router\";\nexport const MetaHeader = ({\n  room,\n  direction,\n  previousRoom,\n}: {\n  room: IApiMetaRoom | undefined;\n  direction: string;\n  previousRoom: IApiMetaRoom | undefined;\n}) => {\n  const history = useHistory();\n  const onCreateClick = () => {\n    history.push(\"/newchat\", {\n      metaDirection: direction,\n      metaRoom: previousRoom,\n    });\n  };\n  if (!room?.name) {\n    return (\n      <Box\n        sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n      >\n        <Box sx={{ alignItems: \"center\", display: \"flex\" }}>\n          <Typography>\n            This space is empty. You can build your own room here for{\" \"}\n            <b>120 </b>\n          </Typography>\n          <img src={coin} style={{ width: 20, height: 20 }} alt={\"coin\"} />\n\n          {/* <CreateNewChatButton\n            onPress={() =>\n              navigation.navigate(ROUTES.NEWCHAT, {\n                metaDirection: direction,\n                metaRoom: previousRoom,\n              })\n            }\n          /> */}\n        </Box>\n        <Button onClick={onCreateClick}>Create Meta Room</Button>\n      </Box>\n    );\n  }\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Typography sx={{ fontWeight: \"bold\", fontSize: 18 }}>\n        {room.name}\n      </Typography>\n      <Typography>{room.description}</Typography>\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { CompassItem } from \"./CompassItem\";\nimport {\n  Box,\n  CircularProgress,\n  IconButton,\n  Modal,\n  useTheme,\n} from \"@mui/material\";\nimport { MetaHeader } from \"./MetaHeader\";\nimport xmpp, { walletToUsername } from \"../../xmpp\";\nimport { httpWithAuth } from \"../../http\";\nimport { CONFERENCEDOMAIN, DOMAIN } from \"../../constants\";\nimport { useStoreState } from \"../../store\";\nimport ExploreIcon from \"@mui/icons-material/Explore\";\ntype IRoom = {\n  _id: string;\n  contractAddress: string;\n  createdAt: string;\n  description: string;\n  name: string;\n  ownerId: string;\n};\n\nexport interface IApiMetaRoom {\n  _id: string;\n  contractAddress: string;\n  createdAt: Date;\n  description: string;\n  name: string;\n  ownerId: string;\n  ownerNavLinks: {\n    east: IRoom | null;\n    north: IRoom | null;\n    south: IRoom | null;\n    west: IRoom | null;\n  };\n  roomJid: string;\n  updatedAt: Date;\n  userNavLinks: {\n    east: IRoom | null;\n    north: IRoom | null;\n    south: IRoom | null;\n    west: IRoom | null;\n  };\n}\n\nexport interface IMetaNavigation {\n  chatId: string;\n  open: boolean;\n  onClose: () => void;\n}\nconst DIRECTIONS = {\n  NORTH: \"north\",\n  WEST: \"west\",\n  SOUTH: \"south\",\n  EAST: \"east\",\n};\nconst SHORT_DIRECTIONS: Record<string, string> = {\n  north: \"n\",\n  west: \"w\",\n  south: \"s\",\n  east: \"e\",\n};\n\nconst OPOSITE_DIRECTIONS: Record<string, string> = {\n  [DIRECTIONS.WEST]: DIRECTIONS.EAST,\n  [DIRECTIONS.EAST]: DIRECTIONS.WEST,\n  [DIRECTIONS.SOUTH]: DIRECTIONS.NORTH,\n  [DIRECTIONS.NORTH]: DIRECTIONS.SOUTH,\n};\n\nconst getOpositeDirection = (direction: string) => {\n  return OPOSITE_DIRECTIONS[direction];\n};\n\n// const findRoom = (id: string | undefined, arr: IApiMetaRoom[]) => {\n//   if (!id) {\n//     return null;\n//   }\n//   const room = arr.find((item) => item.idAddress === id);\n//   if (!room) {\n//     return null;\n//   }\n//   return room;\n// };\n\nconst emptyMetaRoom = {\n  name: \"\",\n  description: \"\",\n  ownerNavLinks: { west: null, east: null, north: null, south: null },\n  ownerId: \"\",\n  contractAddress: \"\",\n  createdAt: new Date(),\n  _id: \"\",\n  roomJid: \"\",\n  updatedAt: new Date(),\n  userNavLinks: { west: null, east: null, north: null, south: null },\n};\n\nconst style = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  p: 2,\n  outline: 'none'\n};\nconst roomRoute = \"/room\";\nexport const MetaNavigation: React.FC<IMetaNavigation> = ({\n  chatId,\n  open,\n  onClose,\n}) => {\n  const [previousDirection, setPreviousDirection] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [previousRoom, setPreviuosRoom] = useState<IApiMetaRoom | undefined>();\n  const [currentMetaRoom, setCurrentMetaRoom] =\n    useState<IApiMetaRoom>(emptyMetaRoom);\n  const user = useStoreState((state) => state.user);\n\n  const theme = useTheme();\n\n  const getCurrentRoom = async () => {\n    setLoading(true);\n    try {\n      const res = await httpWithAuth().get(roomRoute + \"/getRoom/\" + chatId);\n      setCurrentMetaRoom(res.data.result);\n    } catch (error) {\n      setCurrentMetaRoom(emptyMetaRoom);\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!chatId) {\n      setCurrentMetaRoom(emptyMetaRoom);\n    }\n    if (chatId) {\n      getCurrentRoom();\n    }\n  }, [chatId]);\n  const checkEmptyDirections = () => {\n    return (\n      !currentMetaRoom?.ownerNavLinks?.south &&\n      !currentMetaRoom?.ownerNavLinks?.east &&\n      !currentMetaRoom?.ownerNavLinks?.west &&\n      !currentMetaRoom?.ownerNavLinks?.north &&\n      !currentMetaRoom?.userNavLinks?.south &&\n      !currentMetaRoom?.userNavLinks?.east &&\n      !currentMetaRoom?.userNavLinks?.west &&\n      !currentMetaRoom?.userNavLinks?.north\n    );\n  };\n\n  const sendMessage = (chatName: string, jid: string, isPrevious: boolean) => {\n    const manipulatedWalletAddress = walletToUsername(user.walletAddress);\n    const textEnter =\n      user.firstName + \" \" + user.lastName + \" \" + \"has joined\" + \" \" + \"<-\";\n    const textLeave =\n      user.firstName + \" \" + user.lastName + \" \" + \"has left\" + \" \" + \"->\";\n    const data = {\n      senderFirstName: user.firstName,\n      senderLastName: user.lastName,\n      senderWalletAddress: user.walletAddress,\n      isSystemMessage: true,\n      tokenAmount: 0,\n      receiverMessageId: \"\",\n      mucname: chatName,\n      photoURL: user.profileImage,\n      roomJid: jid,\n      isReply: false,\n      mainMessageText: \"\",\n      mainMessageId: \"\",\n      mainMessageUserName: \"\",\n    };\n    xmpp.sendMessageStanza(\n      manipulatedWalletAddress + DOMAIN,\n      jid,\n      isPrevious ? textLeave : textEnter,\n      data\n    );\n  };\n  const sendRoomJoin = async () => {\n    try {\n      const res = await httpWithAuth().post(roomRoute + \"/join/\" + chatId, {});\n      console.log(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    if (previousRoom?.name) {\n      sendMessage(\n        previousRoom.name,\n        previousRoom.roomJid + CONFERENCEDOMAIN,\n        true\n      );\n    }\n  }, [previousRoom]);\n  useEffect(() => {\n    if (currentMetaRoom.name) {\n      sendMessage(\n        currentMetaRoom.name,\n        currentMetaRoom.roomJid + CONFERENCEDOMAIN,\n        false\n      );\n      sendRoomJoin();\n    }\n  }, [currentMetaRoom]);\n\n  if (!currentMetaRoom.roomJid && !previousDirection) {\n    return null;\n  }\n\n  const renderDirections = (direction: string) => {\n    const oppositePreviousDirection = getOpositeDirection(previousDirection);\n    if (checkEmptyDirections() && direction === oppositePreviousDirection) {\n      return (\n        <CompassItem\n          name={oppositePreviousDirection + \":\" + previousRoom?.name}\n          chatId={chatId}\n          room={previousRoom}\n          setDirection={() => {\n            setPreviousDirection(oppositePreviousDirection);\n            setPreviuosRoom(previousRoom);\n          }}\n        />\n      );\n    }\n    return (\n      <CompassItem\n        name={\n          SHORT_DIRECTIONS[direction] +\n          \":\" +\n          (currentMetaRoom.ownerNavLinks[direction]?.name ||\n            currentMetaRoom.userNavLinks[direction]?.name)\n        }\n        chatId={chatId}\n        room={\n          currentMetaRoom?.ownerNavLinks?.[direction] ||\n          currentMetaRoom?.userNavLinks?.[direction]\n        }\n        setDirection={() => {\n          setPreviousDirection(direction);\n          setPreviuosRoom(currentMetaRoom);\n        }}\n      />\n    );\n  };\n  return (\n    <Modal open={open} onClose={onClose}>\n      <Box sx={style}>\n        {loading ? (\n          <CircularProgress size={50} />\n        ) : (\n          <Box>\n            <Box\n              sx={{ bgcolor: \"white\", mb: \"10px\", borderRadius: \"10px\", p: 2 }}\n            >\n              <MetaHeader\n                room={currentMetaRoom}\n                direction={previousDirection}\n                previousRoom={previousRoom}\n              />\n            </Box>\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                bgcolor: \"white\",\n                borderRadius: \"10px\",\n                p: 2,\n              }}\n            >\n              {renderDirections(DIRECTIONS.NORTH)}\n              <Box\n                sx={{\n                  display: \"grid\",\n                  gridTemplateColumns: \"repeat(3, 1fr)\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <Box sx={{ display: \"flex\" }}>\n                  {renderDirections(DIRECTIONS.WEST)}\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <IconButton sx={{ color: theme.palette.primary.main }}>\n                    <ExploreIcon fontSize=\"large\" />\n                  </IconButton>\n                </Box>\n                <Box sx={{ display: \"flex\" }}>\n                  {renderDirections(DIRECTIONS.EAST)}\n                </Box>\n              </Box>\n              {renderDirections(DIRECTIONS.SOUTH)}\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </Modal>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport Box from \"@mui/material/Box\";\nimport xmpp from \"../../xmpp\";\nimport {\n  TActiveRoomFilter,\n  TMessageHistory,\n  TUserChatRooms,\n  useStoreState,\n} from \"../../store\";\nimport { getPublicProfile, uploadFile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\nimport { format, formatDistance, subDays } from \"date-fns\";\nimport * as DOMPurify from \"dompurify\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Message } from \"../../componets/Chat/Messages/Message\";\nimport { SystemMessage } from \"../../componets/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  useMediaQuery,\n  useTheme,\n} from \"@mui/material\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useDropzone } from \"react-dropzone\";\nimport { MetaNavigation } from \"../../componets/MetaNavigation/MetaNavigation\";\nimport { defaultChats, ROOMS_FILTERS } from \"../../config/config\";\nimport QrCodeIcon from \"@mui/icons-material/QrCode\";\nimport { QrModal } from \"../Profile/QrModal\";\nimport { generateChatLink } from \"../../utils\";\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if (arr[index - 1] && message) {\n    if (\n      format(new Date(arr[index - 1]?.date), \"dd\") !==\n      format(new Date(message.date), \"dd\")\n    ) {\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (\n    previousJID === currentJID &&\n    nextJID !== currentJID &&\n    arr[index - 1]?.data.isSystemMessage === \"false\"\n  ) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nconst defaultRoomsFilter = (rooms: TUserChatRooms[]) => {\n  return rooms.filter((item) => {\n    const splitedJid = item?.jid?.split(\"@\")[0];\n    return defaultChats[splitedJid];\n  });\n};\n\nconst filterChatRooms = (\n  rooms: TUserChatRooms[],\n  filter: TActiveRoomFilter\n) => {\n  if (filter === ROOMS_FILTERS.official || filter === ROOMS_FILTERS.favourite) {\n    let defaultRooms = defaultRoomsFilter(rooms);\n\n    let roomsList = [];\n    const roomsGroup = useStoreState.getState().userChatRoomGroups;\n\n    for (let index = 0; index < roomsGroup.length; ++index) {\n      let groupData = roomsGroup[index];\n      let roomData = rooms.filter(\n        (item) =>\n          item.jid === groupData.jid &&\n          groupData.group === ROOMS_FILTERS.official\n      );\n      if (roomData[0]) {\n        roomsList.push(roomData[0]);\n      }\n    }\n    let finalRooms = roomsList.concat(defaultRooms);\n    return finalRooms;\n  }\n  return rooms;\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const userChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n  const [showMetaNavigation, setShowMetaNavigation] = useState(true);\n\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const currentPickedRoom = useMemo(() => {\n    return userChatRooms.find((item) => item.jid === currentRoom);\n  }, [userChatRooms, currentRoom]);\n\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showDialogTxt, setShowDialogTxt] = useState(false);\n  const [isQrModalVisible, setQrModalVisible] = useState(false);\n\n  const [dialogTxt, setDialogTxt] = useState<{\n    headline: string;\n    description: string;\n  }>({ headline: \"\", description: \"\" });\n  // @ts-ignore\n  const { roomJID } = useParams();\n  const history = useHistory();\n  const [firstLoadMessages, setFirstLoadMessages] = useState(true);\n  const activeRoomFilter = useStoreState((state) => state.activeRoomFilter);\n  const setActiveRoomFilter = useStoreState(\n    (state) => state.setActiveRoomFilter\n  );\n  const openLastMetaRoom = activeRoomFilter === ROOMS_FILTERS.meta;\n  const closeQrModal = () => {\n    setQrModalVisible(false);\n  };\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      sendFile(acceptedFiles[0]);\n    },\n    [roomData]\n  );\n  const { getRootProps } = useDropzone({\n    onDrop,\n    noClick: true,\n    maxFiles: 1,\n  });\n  const onYReachStart = () => {\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === currentRoom\n    );\n\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    if (roomJID) {\n      loadMessages(roomJID);\n      setShowMetaNavigation(true);\n    }\n  }, [roomJID]);\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const chooseRoom = (jid: string) => {\n    history.push(\"/chat/\" + jid.split(\"@\")[0]);\n    loadMessages(jid);\n  };\n\n  const loadMessages = (jid: string) => {\n    setCurrentRoom(jid);\n    const currentRoomData = userChatRooms.filter((e) => e.jid === jid)[0];\n    setRoomData(currentRoomData);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n    setFirstLoadMessages(true);\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length <= 10 &&\n      filteredMessages.length > 0\n    ) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 50);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    return format(new Date(messagesInRoom[0].date), \"H:mm\");\n\n    // if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\n    //   return format(new Date(messagesInRoom[0].date), \"hh:mm\");\n    // } else {\n    //   return formatDistance(\n    //     subDays(new Date(messagesInRoom[0].date), 0),\n    //     new Date(),\n    //     { addSuffix: true }\n    //   );\n    // }\n  };\n\n  const stripHtml = (html: string) => {\n    let doc: any;\n    let str = html;\n\n    str = str.replace(/<br>/gi, \"\\n\");\n    str = str.replace(/<p.*>/gi, \"\\n\");\n    str = str.replace(/<(?:.|\\s)*?>/g, \"\");\n\n    if (str.trim().length === 0) {\n      doc = new DOMParser().parseFromString(html, \"text/html\");\n    } else {\n      doc = new DOMParser().parseFromString(str, \"text/html\");\n    }\n    return doc.body.textContent || \"\";\n  };\n\n  const sendMessage = (button: any) => {\n    if (myMessage.trim().length > 0) {\n      let userAvatar = \"\";\n      if (profile?.profileImage) {\n        userAvatar = profile?.profileImage;\n      }\n      const clearMessageFromHtml = DOMPurify.sanitize(myMessage);\n      const finalMessageTxt = stripHtml(clearMessageFromHtml);\n\n      if (finalMessageTxt.trim().length > 0) {\n        xmpp.sendMessage(\n          currentRoom,\n          user.firstName,\n          user.lastName,\n          userAvatar,\n          user.walletAddress,\n          typeof button === \"object\" ? button.value : finalMessageTxt,\n          typeof button === \"object\" ? button.notDisplayedValue : null\n        );\n      }\n    }\n  };\n\n  const sendFile = (file: File) => {\n    setDialogTxt({\n      headline: \"File is loading, please wait...\",\n      description: \"\",\n    });\n    setOpenDialog(true);\n\n    const formData = new FormData();\n    formData.append(\"files\", file);\n\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n          setOpenDialog(false);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogTxt({\n          headline: \"Error\",\n          description: \"An error occurred while uploading the file\",\n        });\n        setShowDialogTxt(true);\n      });\n    if (fileRef.current) {\n      fileRef.current.value = \"\";\n    }\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n\n  const handlePaste = (event) => {\n    // @ts-ignore\n    let item = Array.from(event.clipboardData.items).find((x: any) =>\n      /^image\\//.test(x.type)\n    );\n    if (item) {\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob);\n    }\n  };\n\n  const handleChatDetailClick = () => {\n    history.push(\"/chatDetails/\" + currentUntrackedChatRoom);\n  };\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if (currentUntrackedChatRoom) {\n      if (\n        !roomJID ||\n        roomJID === \"none\" ||\n        roomJID === \"\" ||\n        currentUntrackedChatRoom.split(\"@\")[0] === roomJID\n      ) {\n        if (currentUntrackedChatRoom.split(\"@\")[1]) {\n          chooseRoom(currentUntrackedChatRoom);\n        } else {\n          chooseRoom(currentUntrackedChatRoom + \"@conference.dev.dxmpp.com\");\n        }\n      }\n    }\n\n    if (\n      currentUntrackedChatRoom.split(\"@\")[0] !== roomJID &&\n      roomJID !== \"none\" &&\n      roomJID !== \"\"\n    ) {\n      useStoreState.getState().setCurrentUntrackedChatRoom(roomJID);\n      chooseRoom(roomJID);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    };\n\n    window.onfocus = () => {\n      if (currentRoom) {\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    };\n  }, [currentRoom]);\n\n  useEffect(() => {\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === currentRoom\n    );\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length > 0 &&\n      filteredMessages.length <= 51 &&\n      currentRoom &&\n      firstLoadMessages\n    ) {\n      const lastUpFilteredMessage = filteredMessages[0];\n\n      if (\n        filteredMessages.length >= 10 &&\n        filteredMessages.length < 15 &&\n        lastUpFilteredMessage.data.isSystemMessage\n      ) {\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(\n          currentRoom,\n          String(lastUpFilteredMessage.id),\n          5\n        );\n      } else if (filteredMessages.length === 1) {\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(\n          currentRoom,\n          String(lastUpFilteredMessage.id),\n          50\n        );\n      }\n    }\n  }, [messages]);\n\n  return (\n    <Box style={{ paddingBlock: \"20px\", height: \"100%\" }}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {filterChatRooms(userChatRooms, activeRoomFilter).map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_background !== \"none\"\n                      ? room.room_background\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <div {...getRootProps()} style={{ width: \"100%\", height: \"100%\" }}>\n          <ChatContainer>\n            {!!roomData && (\n              <ConversationHeader>\n                <ConversationHeader.Back />\n                {messages.filter((item: any) => item.roomJID === currentRoom)\n                  .length > 0 && (\n                  <ConversationHeader.Content\n                    userName={roomData.name}\n                    onClick={handleChatDetailClick}\n                    info={\n                      \"Active \" +\n                      formatDistance(\n                        subDays(\n                          new Date(\n                            messages\n                              .filter(\n                                (item: any) => item.roomJID === currentRoom\n                              )\n                              .slice(-1)[0].date\n                          ),\n                          0\n                        ),\n                        new Date(),\n                        { addSuffix: true }\n                      )\n                    }\n                  />\n                )}\n                <ConversationHeader.Actions>\n                  <BookmarkRemoveIcon />\n                  <IconButton\n                    sx={{ color: \"black\" }}\n                    onClick={() => setQrModalVisible(true)}\n                  >\n                    <QrCodeIcon />\n                  </IconButton>\n                </ConversationHeader.Actions>\n              </ConversationHeader>\n            )}\n            <MessageList\n              style={{\n                backgroundImage: currentPickedRoom?.room_background\n                  ? `url(${currentPickedRoom.room_background})`\n                  : \"white\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundSize: \"100% 100%\",\n              }}\n              loadingMore={loaderArchive}\n              onYReachStart={onYReachStart}\n              disableOnYReachWhenNoScroll={true}\n              typingIndicator={\n                !!userChatRooms.filter((e) => e.jid === currentRoom)[0]\n                  ?.composing && (\n                  <TypingIndicator\n                    style={{ opacity: \".6\" }}\n                    content={\n                      userChatRooms.filter((e) => e.jid === currentRoom)[0]\n                        ?.composing\n                    }\n                  />\n                )\n              }\n            >\n              {messages\n                .filter((item: any) => item.roomJID === currentRoom)\n                .map((message, index, arr) => {\n                  const position = getPosition(arr, message, index);\n                  if (message.data.isSystemMessage === \"false\") {\n                    return (\n                      <Message\n                        key={message.id}\n                        is={\"Message\"}\n                        position={position}\n                        message={message}\n                        userJid={xmpp.client?.jid?.toString()}\n                        buttonSender={sendMessage}\n                        chooseDirectRoom={chooseRoom}\n                      />\n                    );\n                  } else {\n                    return (\n                      <SystemMessage\n                        key={message.id}\n                        is={\"Message\"}\n                        message={message}\n                        userJid={xmpp.client?.jid?.toString()}\n                      />\n                    );\n                  }\n                })}\n              {messages.length <= 0 ||\n                (!currentRoom && (\n                  <MessageList.Content\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      height: \"100%\",\n                      textAlign: \"center\",\n                      fontSize: \"1.2em\",\n                    }}\n                  >\n                    {!loaderArchive ? (\n                      <span>\n                        {!currentRoom &&\n                          \"To get started, please select a chat room.\"}\n                      </span>\n                    ) : (\n                      \"Loading...\"\n                    )}\n                  </MessageList.Content>\n                ))}\n              {!loaderArchive &&\n                currentRoom &&\n                messages.filter((item: any) => item.roomJID === currentRoom)\n                  .length <= 0 && (\n                  <MessageList.Content\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      height: \"100%\",\n                      textAlign: \"center\",\n                      fontSize: \"1.2em\",\n                    }}\n                  >\n                    Message list is empty\n                  </MessageList.Content>\n                )}\n            </MessageList>\n            {!!roomData?.name && (\n              <div is={\"MessageInput\"}>\n                <MessageInput\n                  onPaste={handlePaste}\n                  placeholder=\"Type message here\"\n                  onChange={setMessage}\n                  onSend={sendMessage}\n                  onAttachClick={() => fileRef.current.click()}\n                />\n                <input\n                  type=\"file\"\n                  name=\"file\"\n                  id=\"file\"\n                  onChange={(event) => sendFile(event.target.files[0])}\n                  ref={fileRef}\n                  style={{ display: \"none\" }}\n                />\n              </div>\n            )}\n          </ChatContainer>\n        </div>\n      </MainContainer>\n\n      <Dialog\n        fullScreen={fullScreen}\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {dialogTxt.headline}\n        </DialogTitle>\n        <DialogContent>\n          {showDialogTxt && dialogTxt.description.length > 0 ? (\n            <DialogContentText>{dialogTxt.description}</DialogContentText>\n          ) : (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <CircularProgress />\n            </Box>\n          )}\n        </DialogContent>\n        {showDialogTxt ? (\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)} autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        ) : null}\n      </Dialog>\n      <QrModal\n        open={isQrModalVisible}\n        link={generateChatLink({ roomAddress: currentPickedRoom?.jid })}\n        onClose={closeQrModal}\n        title={'Share Chatroom'}\n      />\n      <MetaNavigation\n        open={showMetaNavigation || openLastMetaRoom}\n        chatId={currentRoom.split(\"@\")[0]}\n        onClose={() => {\n          setShowMetaNavigation(false);\n\n          openLastMetaRoom && setActiveRoomFilter(\"\");\n        }}\n      />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n      <ChatInRoom />\n    </Container>\n  );\n}\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","CONFERENCEDOMAIN","userJID","combinedWalletAddress","sort","join","roomJid","combinedUsersName","currentChatRooms","useStoreState","userChatRooms","isNewRoom","filter","el","jid","length","xmpp","roomName","setTimeout","Message","message","userJid","position","buttonSender","chooseDirectRoom","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","openDialog","setOpenDialog","React","anchorEl","setAnchorEl","dialogMenuType","setDialogMenuType","dialogText","setDialogText","openMenu","Boolean","coinAmount","setCoinAmount","coinData","store","balance","tokenType","contractAddress","user","messageDirection","setMessageDirection","openDialogMenu","type","sendCoins","amount","currentCoinAmount","Number","transferCoin","tokenName","senderWalletAddress","then","res","coinName","coinsMainName","coinReplacedName","sender","receiver","textMessage","roomJID","walletAddress","id","catch","error","console","log","userToBlackList","step","removeAllInMessageHistory","useEffect","quickReplies","JSON","parse","String","split","is","separator","onContextMenu","event","preventDefault","style","marginBottom","model","direction","avatarPosition","avatarSpacer","borderRadius","boxSizing","width","height","cursor","onClick","push","src","photoURL","onError","currentTarget","onerror","alt","display","justifyContent","alignItems","IconButton","undefined","MoreVert","isMediafile","mimetype","Card","sx","maxWidth","CardActionArea","CardMedia","objectFit","objectPosition","component","image","location","originalName","target","href","locationPreview","controls","title","dangerouslySetInnerHTML","__html","body","marginTop","minWidth","color","flexDirection","fontSize","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","coinsInMessage","coin","m","marginLeft","map","button","index","Button","variant","size","name","Dialog","open","onClose","DialogContent","margin","item","textAlign","Typography","fontWeight","Divider","result","temporaryRoomData","room_background","room_thumbnail","users_cnt","unreadMessages","composing","toUpdate","description","setNewUserChatRoom","startIcon","Send","Block","gutterBottom","TextField","label","onChange","value","SystemMessage","fontFamily","key","CHAT","CompassItem","room","chatId","setDirection","Box","padding","disabled","MetaHeader","previousRoom","metaDirection","metaRoom","DIRECTIONS","SHORT_DIRECTIONS","north","west","south","east","OPOSITE_DIRECTIONS","emptyMetaRoom","ownerNavLinks","ownerId","createdAt","_id","updatedAt","userNavLinks","top","left","transform","p","outline","MetaNavigation","previousDirection","setPreviousDirection","loading","setLoading","setPreviuosRoom","currentMetaRoom","setCurrentMetaRoom","state","theme","useTheme","getCurrentRoom","httpWithAuth","get","roomRoute","sendMessage","chatName","isPrevious","manipulatedWalletAddress","walletToUsername","textEnter","textLeave","isSystemMessage","tokenAmount","receiverMessageId","mucname","profileImage","isReply","mainMessageText","mainMessageId","mainMessageUserName","DOMAIN","sendRoomJoin","post","renderDirections","oppositePreviousDirection","getOpositeDirection","checkEmptyDirections","Modal","CircularProgress","bgcolor","mb","gridTemplateColumns","palette","primary","main","Explore","filterChatRooms","rooms","ROOMS_FILTERS","defaultRooms","splitedJid","defaultChats","defaultRoomsFilter","roomsList","roomsGroup","userChatRoomGroups","groupData","roomData","group","concat","ChatInRoom","messages","historyMessages","loaderArchive","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","showMetaNavigation","setShowMetaNavigation","currentRoom","setCurrentRoom","currentPickedRoom","useMemo","find","setRoomData","fileRef","useRef","fullScreen","useMediaQuery","breakpoints","down","showDialogTxt","setShowDialogTxt","isQrModalVisible","setQrModalVisible","headline","dialogTxt","setDialogTxt","useParams","firstLoadMessages","setFirstLoadMessages","activeRoomFilter","setActiveRoomFilter","openLastMetaRoom","onDrop","useCallback","acceptedFiles","sendFile","getRootProps","useDropzone","noClick","maxFiles","loadMessages","getPublicProfile","chooseRoom","currentRoomData","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","lastMessageID","getConversationInfo","messagesInRoom","slice","getLastActiveTime","trim","userAvatar","finalMessageTxt","html","DOMParser","parseFromString","textContent","stripHtml","DOMPurify","notDisplayedValue","file","formData","FormData","append","uploadFile","results","expiresAt","fileName","filename","isVisible","originalname","ownerKey","duration","userId","waveForm","attachmentId","wrappable","current","timeoutId","clearTimeout","window","onblur","onfocus","lastUpFilteredMessage","paddingBlock","responsive","scrollable","placeholder","active","unreadCnt","info","lastActivityTime","userName","BookmarkRemove","QrCode","backgroundImage","backgroundRepeat","backgroundSize","loadingMore","onYReachStart","disableOnYReachWhenNoScroll","typingIndicator","opacity","content","arr","previousJID","nextJID","currentJID","getPosition","toString","onPaste","Array","from","clipboardData","items","x","test","blob","getAsFile","onSend","onAttachClick","click","files","ref","DialogTitle","DialogContentText","DialogActions","autoFocus","QrModal","link","generateChatLink","roomAddress","Chat","Container"],"sourceRoot":""}