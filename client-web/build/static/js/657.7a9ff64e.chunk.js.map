{"version":3,"file":"static/js/657.7a9ff64e.chunk.js","mappings":"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","sources":["helpers/chat/createPrivateChat.ts","componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\nimport {useStoreState} from \"../../store\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    CONFERENCEDOMAIN: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    const currentChatRooms = useStoreState.getState().userChatRooms;\n\n    let isNewRoom = false;\n    if(currentChatRooms.filter((el) => el.jid === roomJid).length === 0){\n        isNewRoom = true;\n        xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n        xmpp.setOwner(combinedWalletAddress.toLowerCase());\n        xmpp.roomConfig(\n            combinedWalletAddress.toLowerCase(),\n            {roomName: combinedUsersName},\n        );\n        xmpp.subsribe(roomJid);\n        xmpp.presenceInRoom(roomJid);\n\n        setTimeout(() => {\n            xmpp.sendInvite(\n                underscoreManipulation(myWalletAddress),\n                roomJid.toLowerCase(),\n                underscoreManipulation(otherUserWalletAddress),\n            );\n        }, 1000);\n    }\n\n    return {roomJid, roomName: combinedUsersName, isNewRoom};\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Message as KitMessage,\n  MessageModel,\n  Button,\n  MessageSeparator,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport { TMessageHistory, useStoreState } from \"../../../store\";\nimport { useHistory } from \"react-router\";\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  FormControl,\n  IconButton,\n  InputLabel,\n  Menu,\n  MenuItem,\n  Select,\n  Slider,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport { transferCoin } from \"../../../http\";\nimport xmpp from \"../../../xmpp\";\nimport { createPrivateChat } from \"../../../helpers/chat/createPrivateChat\";\nimport coin from \"../../../assets/images/coin.png\";\nimport { Box } from \"@mui/system\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel[\"position\"];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any;\n  chooseDirectRoom: any;\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string;\n}\n\ntype IDialog = \"transfer\" | \"image\" | \"ban\" | \"error\";\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender,\n  chooseDirectRoom,\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [dialogMenuType, setDialogMenuType] = useState<IDialog>(\"transfer\");\n  const [dialogText, setDialogText] = useState(\"\");\n  const openMenu = Boolean(anchorEl);\n  const handleClickMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const [coinAmount, setCoinAmount] = useState(1);\n  const balance = useStoreState((store) => store.balance);\n  const coinData = balance.filter(\n    (el) => !el.tokenType && el.contractAddress.length > 10\n  );\n  const user = useStoreState((store) => store.user);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n\n  const openDialogMenu = (type: IDialog) => {\n    setAnchorEl(null);\n    setOpenDialog(true);\n    setDialogMenuType(type);\n  };\n\n  const sendCoins = () => {\n    // @ts-ignore\n    transferCoin(\n      \"DPT\",\n      coinData[0].tokenName,\n      Number(coinAmount),\n      message.data.senderWalletAddress\n    )\n      .then(() => {\n        const textMessage =\n          user.firstName +\n          \" \" +\n          user.lastName +\n          \" -> \" +\n          coinAmount +\n          \" \" +\n          coinData[0].tokenName +\n          \" -> \" +\n          message.data.senderFirstName +\n          \" \" +\n          message.data.senderLastName;\n\n        xmpp.sendSystemMessage(\n          message.roomJID,\n          user.firstName,\n          user.lastName,\n          user.walletAddress,\n          textMessage,\n          null,\n          message.id\n        );\n\n        setOpenDialog(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogText(\"An error occurred during the coin transfer.\");\n        setDialogMenuType(\"error\");\n      });\n  };\n\n  const openPrivateRoom = () => {\n    createPrivateChat(\n      user.walletAddress,\n      message.data.senderWalletAddress,\n      user.firstName,\n      message.data.senderFirstName,\n      \"@conference.dev.dxmpp.com\",\n      message.data.senderJID\n    )\n      .then((result) => {\n        if (result.isNewRoom) {\n          useStoreState.getState().setLoaderArchive(true);\n          const temporaryRoomData = {\n            jid: result.roomJid,\n            name: result.roomName,\n            room_background: \"none\",\n            room_thumbnail: \"none\",\n            users_cnt: \"2\",\n            unreadMessages: 0,\n            composing: \"\",\n            toUpdate: true,\n          };\n          useStoreState.getState().setNewUserChatRoom(temporaryRoomData);\n          console.log(\n            \"SAVE ROOM TO LIST => \",\n            useStoreState.getState().userChatRooms\n          );\n          chooseDirectRoom(result.roomJid);\n          xmpp.getRooms();\n        } else {\n          chooseDirectRoom(result.roomJid);\n        }\n      })\n      .catch((error) => {\n        console.log(\"openPrivateRoom Error: \", error);\n      });\n  };\n\n  const fullViewImage = () => {\n    setOpenDialog(true);\n    setDialogMenuType(\"image\");\n  };\n\n  useEffect(() => {\n    if (message.data.quickReplies) {\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n  }, []);\n  return (\n    <div is={\"Message\"}>\n      {position.separator ? (\n        <MessageSeparator>{position.separator}</MessageSeparator>\n      ) : null}\n      <KitMessage\n        model={{\n          sender: firstName + \" \" + lastName,\n          direction:\n            String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0]\n              ? \"outgoing\"\n              : \"incoming\",\n          position: position.position,\n        }}\n        avatarPosition={\n          String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0]\n            ? \"tr\"\n            : \"tl\"\n        }\n        avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n      >\n        {(position.type === \"first\" || position.type === \"single\") && (\n          <img\n            style={{\n              borderRadius: \"50%\",\n              boxSizing: \"border-box\",\n              width: \"42px\",\n              height: \"42px\",\n              cursor: \"pointer\",\n            }}\n            onClick={() =>\n              history.push(\"/profile/\" + message.data.senderWalletAddress)\n            }\n            is={\"Avatar\"}\n            src={\n              message.data.photoURL\n                ? message.data.photoURL\n                : \"https://icotar.com/initials/\" + firstName + \" \" + lastName\n            }\n            onError={({ currentTarget }) => {\n              currentTarget.onerror = null;\n              currentTarget.src =\n                \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\n            }}\n            alt={firstName}\n          />\n        )}\n\n        <KitMessage.CustomContent>\n          {(position.type === \"first\" || position.type === \"single\") && (\n            <span\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n              }}\n            >\n              <strong\n                style={{ cursor: \"pointer\" }}\n                onClick={() =>\n                  history.push(\"/profile/\" + message.data.senderWalletAddress)\n                }\n              >\n                {firstName} {lastName}\n                <br />\n              </strong>\n              {String(userJid).split(\"/\")[0] !==\n              String(messageJid).split(\"/\")[0] ? (\n                <IconButton\n                  aria-label=\"more\"\n                  id=\"long-button\"\n                  aria-controls={openMenu ? \"long-menu\" : undefined}\n                  aria-expanded={openMenu ? \"true\" : undefined}\n                  aria-haspopup=\"true\"\n                  onClick={handleClickMenu}\n                >\n                  <MoreVertIcon />\n                </IconButton>\n              ) : null}\n            </span>\n          )}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"image\" ? (\n            <Card sx={{ maxWidth: 200 }}>\n              <CardActionArea onClick={fullViewImage}>\n                <CardMedia\n                  style={{\n                    height: 150,\n                    objectFit: \"cover\",\n                    objectPosition: \"left\",\n                  }}\n                  component=\"img\"\n                  height=\"150\"\n                  image={message.data.location}\n                  alt={message.data.originalName}\n                />\n              </CardActionArea>\n            </Card>\n          ) : null}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"application\" ? (\n            <a target=\"_blank\" href={message.data.location}>\n              <KitMessage.ImageContent\n                src={message.data.locationPreview}\n                alt={message.data.originalName}\n                width={150}\n              />\n              {message.data.mimetype.split(\"/\")[1]}\n            </a>\n          ) : null}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"video\" ? (\n            <video controls width=\"200px\">\n              <source\n                src={message.data.location}\n                type={message.data.mimetype}\n                title={message.data.originalName}\n              />\n              Sorry, your browser doesn't support videos.\n            </video>\n          ) : null}\n\n          {!message.data.isMediafile ? message.body : null}\n        </KitMessage.CustomContent>\n\n        {(position.type === \"last\" || position.type === \"single\") && (\n          <KitMessage.Footer\n            sentTime={\n              differenceInHours(new Date(), new Date(message.date)) > 5\n                ? format(new Date(message.date), \"h:mm:ss a\")\n                : formatDistance(\n                    subDays(new Date(message.date), 0),\n                    new Date(),\n                    {\n                      addSuffix: true,\n                    }\n                  )\n            }\n          />\n        )}\n      </KitMessage>\n      {buttons ? (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"max-content\",\n            marginLeft: \"45px\",\n          }}\n        >\n          {buttons.map((button, index) => {\n            return (\n              <Button onClick={() => buttonSender(button)} key={index} border>\n                {button.name}\n              </Button>\n            );\n          })}\n        </div>\n      ) : null}\n      <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={openMenu}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n      >\n        <MenuItem onClick={() => openDialogMenu(\"transfer\")}>\n          Transfer coins\n        </MenuItem>\n        <MenuItem onClick={openPrivateRoom}>Direct message</MenuItem>\n        <MenuItem onClick={() => setAnchorEl(null)}>Ban this user</MenuItem>\n      </Menu>\n\n      <Dialog\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        maxWidth={\"xl\"}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogContent>\n          {dialogMenuType === \"error\" ? <div>{dialogText}</div> : null}\n\n          {dialogMenuType === \"transfer\" ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div>\n                Reward{\" \"}\n                <strong>\n                  {message.data.senderFirstName +\n                    \" \" +\n                    message.data.senderLastName}\n                </strong>{\" \"}\n                with coins\n              </div>\n              <Slider\n                aria-label=\"Coin amount\"\n                defaultValue={1}\n                valueLabelDisplay=\"auto\"\n                step={2}\n                marks\n                min={1}\n                max={7}\n                value={coinAmount}\n                onChange={(e, newValue) =>\n                  setCoinAmount(newValue || newValue[0])\n                }\n                sx={{marginTop: '10px'}}\n              />\n              <Box\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Typography sx={{ fontWeight: \"bold\" }}>\n                  {coinAmount}\n                </Typography>\n                <img\n                  src={coin}\n                  style={{ width: 30, height: 30 }}\n                  alt={\"coin\"}\n                />\n              </Box>\n            </div>\n          ) : null}\n\n          {dialogMenuType === \"image\" ? (\n            <div>\n              <img\n                src={message.data.location}\n                alt={message.data.originalName}\n                style={{ maxWidth: \"100%\" }}\n              />\n            </div>\n          ) : null}\n        </DialogContent>\n        <DialogActions>\n          {dialogMenuType === \"transfer\" && (\n            <Button onClick={sendCoins}>Send</Button>\n          )}\n          <Button onClick={() => setOpenDialog(false)} autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport Box from \"@mui/material/Box\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport { getPublicProfile, uploadFile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Message } from \"../../componets/Chat/Messages/Message\";\nimport { SystemMessage } from \"../../componets/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  useMediaQuery,\n  useTheme,\n} from \"@mui/material\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useDropzone } from 'react-dropzone';\n\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if (arr[index - 1] && message) {\n    if (\n      format(new Date(arr[index - 1]?.date), \"dd\") !==\n      format(new Date(message.date), \"dd\")\n    ) {\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID !== currentJID) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showDialogTxt, setShowDialogTxt] = useState(false);\n  const [dialogTxt, setDialogTxt] = useState<{\n    headline: string;\n    description: string;\n  }>({ headline: \"\", description: \"\" });\n  // @ts-ignore\n  const { roomJID } = useParams();\n  const history = useHistory();\n  const [firstLoadMessages, setFirstLoadMessages] = useState(true);\n\n  const onDrop = useCallback(acceptedFiles => {\n    sendFile(acceptedFiles[0]);\n  }, [roomData]);\n\n  const {\n    getRootProps\n  } = useDropzone({\n    onDrop,\n    noClick: true,\n    maxFiles: 1\n  });\n  const onYReachStart = () => {\n    const filteredMessages = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n    );\n\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const chooseRoom = (jid: string) => {\n    history.push(\"/chat/\" + jid.split(\"@\")[0]);\n    setCurrentRoom(jid);\n    const currentRoomData = useChatRooms.filter((e) => e.jid === jid)[0];\n    setRoomData(currentRoomData);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n    setFirstLoadMessages(true)\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length <= 10 &&\n      filteredMessages.length > 0\n    ) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 50);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\n      return format(new Date(messagesInRoom[0].date), \"hh:mm\");\n    } else {\n      return formatDistance(\n        subDays(new Date(messagesInRoom[0].date), 0),\n        new Date(),\n        { addSuffix: true }\n      );\n    }\n  };\n\n  const sendMessage = (button: any) => {\n    let userAvatar = \"\";\n    if (profile?.profileImage) {\n      userAvatar = profile?.profileImage;\n    }\n\n    xmpp.sendMessage(\n      currentRoom,\n      user.firstName,\n      user.lastName,\n      userAvatar,\n      user.walletAddress,\n      typeof button === \"object\" ? button.value : myMessage.split('<br>').join('\\n'),\n      typeof button === \"object\" ? button.notDisplayedValue : null\n    );\n  };\n\n  const sendFile = (file: File) => {\n    setDialogTxt({\n      headline: \"File is loading, please wait...\",\n      description: \"\",\n    });\n    setOpenDialog(true);\n\n    const formData = new FormData();\n    formData.append(\"files\", file);\n\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n          setOpenDialog(false);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogTxt({\n          headline: \"Error\",\n          description: \"An error occurred while uploading the file\",\n        });\n        setShowDialogTxt(true);\n      });\n    if(fileRef.current){\n      fileRef.current.value = \"\";\n    }\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n\n  const handlePaste = event => {\n    // @ts-ignore\n    let item = Array.from(event.clipboardData.items).find(x => /^image\\//.test(x.type));\n    if(item){\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob)\n    }\n  };\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if (currentUntrackedChatRoom) {\n      if (\n        !roomJID ||\n        roomJID === \"none\" ||\n        currentUntrackedChatRoom.split(\"@\")[0] === roomJID\n      ) {\n        chooseRoom(currentUntrackedChatRoom);\n      }\n    }\n\n    if (\n      currentUntrackedChatRoom.split(\"@\")[0] !== roomJID &&\n      roomJID !== \"none\"\n    ) {\n      const conferenceRoomJID = roomJID + \"@conference.dev.dxmpp.com\";\n      useStoreState.getState().setCurrentUntrackedChatRoom(conferenceRoomJID);\n      chooseRoom(conferenceRoomJID);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    };\n\n    window.onfocus = () => {\n      if (currentRoom) {\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    };\n  }, [currentRoom]);\n\n  useEffect(() => {\n    const filteredMessages = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n    );\n\n    if(!loaderArchive && filteredMessages.length > 0 && filteredMessages.length <= 51 && currentRoom && firstLoadMessages){\n      const lastUpFilteredMessage = filteredMessages[0];\n\n      if(filteredMessages.length >= 10 && filteredMessages.length < 15 && lastUpFilteredMessage.data.isSystemMessage){\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(currentRoom, String(lastUpFilteredMessage.id), 5);\n      }else if(filteredMessages.length === 1){\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(currentRoom, String(lastUpFilteredMessage.id), 50);\n      }\n    }\n  }, [messages])\n\n  return (\n    <Box style={{paddingBlock: \"20px\", height: \"100%\"}}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {useChatRooms.map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_background !== \"none\"\n                      ? room.room_background\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <div {...getRootProps()} style={{width: \"100%\", height: \"100%\"}}>\n        <ChatContainer >\n          {!!roomData && (\n            <ConversationHeader>\n              <ConversationHeader.Back />\n              {messages.filter((item: any) => item.roomJID === currentRoom)\n                .length > 0 && (\n                <ConversationHeader.Content\n                  userName={roomData.name}\n                  info={\n                    \"Active \" +\n                    formatDistance(\n                      subDays(\n                        new Date(\n                          messages\n                            .filter((item: any) => item.roomJID === currentRoom)\n                            .slice(-1)[0].date\n                        ),\n                        0\n                      ),\n                      new Date(),\n                      { addSuffix: true }\n                    )\n                  }\n                />\n              )}\n              <ConversationHeader.Actions>\n                <BookmarkRemoveIcon />\n              </ConversationHeader.Actions>\n            </ConversationHeader>\n          )}\n          <MessageList\n            loadingMore={loaderArchive}\n            onYReachStart={onYReachStart}\n            disableOnYReachWhenNoScroll={true}\n            typingIndicator={\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                ?.composing && (\n                <TypingIndicator\n                  content={\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                      ?.composing\n                  }\n                />\n              )\n            }\n          >\n            {messages\n              .filter((item: any) => item.roomJID === currentRoom)\n              .map((message, index, arr) => {\n                const position = getPosition(arr, message, index);\n                if (message.data.isSystemMessage === \"false\") {\n                  return (\n                    <Message\n                      key={message.id}\n                      is={\"Message\"}\n                      position={position}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                      buttonSender={sendMessage}\n                      chooseDirectRoom={chooseRoom}\n                    />\n                  );\n                } else {\n                  return (\n                    <SystemMessage\n                      key={message.id}\n                      is={\"Message\"}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                    />\n                  );\n                }\n              })}\n            {messages.length <= 0 ||\n              (!currentRoom && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  {!loaderArchive ? (\n                    <span>\n                      {!currentRoom &&\n                        \"To get started, please select a chat room.\"}\n                    </span>\n                  ) : (\n                    \"Loading...\"\n                  )}\n                </MessageList.Content>\n              ))}\n            {!loaderArchive &&\n              currentRoom &&\n              messages.filter((item: any) => item.roomJID === currentRoom)\n                .length <= 0 && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  Message list is empty\n                </MessageList.Content>\n              )}\n          </MessageList>\n          {!!roomData && (\n            <div is={\"MessageInput\"}>\n              <MessageInput\n                onPaste={handlePaste}\n                placeholder=\"Type message here\"\n                onChange={setMessage}\n                onSend={sendMessage}\n                onAttachClick={() => fileRef.current.click()}\n              />\n              <input\n                type=\"file\"\n                name=\"file\"\n                id=\"file\"\n                onChange={(event) => sendFile(event.target.files[0])}\n                ref={fileRef}\n                style={{ display: \"none\" }}\n              />\n            </div>\n          )}\n        </ChatContainer>\n        </div>\n      </MainContainer>\n\n      <Dialog\n        fullScreen={fullScreen}\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {dialogTxt.headline}\n        </DialogTitle>\n        <DialogContent>\n          {showDialogTxt && dialogTxt.description.length > 0 ? (\n            <DialogContentText>{dialogTxt.description}</DialogContentText>\n          ) : (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <CircularProgress />\n            </Box>\n          )}\n        </DialogContent>\n        {showDialogTxt ? (\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)} autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        ) : null}\n      </Dialog>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n      <ChatInRoom />\n    </Container>\n  );\n}\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","CONFERENCEDOMAIN","userJID","combinedWalletAddress","sort","join","roomJid","combinedUsersName","currentChatRooms","useStoreState","userChatRooms","isNewRoom","filter","el","jid","length","xmpp","roomName","setTimeout","Message","message","userJid","position","buttonSender","chooseDirectRoom","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","openDialog","setOpenDialog","React","anchorEl","setAnchorEl","dialogMenuType","setDialogMenuType","dialogText","setDialogText","openMenu","Boolean","coinAmount","setCoinAmount","coinData","store","balance","tokenType","contractAddress","user","loaderArchive","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","display","justifyContent","alignItems","IconButton","id","undefined","event","MoreVert","isMediafile","mimetype","Card","sx","maxWidth","CardActionArea","CardMedia","objectFit","objectPosition","component","image","location","originalName","target","href","locationPreview","controls","title","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","flexDirection","marginLeft","map","button","index","border","name","Menu","open","onClose","MenuListProps","anchorOrigin","vertical","horizontal","MenuItem","walletAddress","then","result","setLoaderArchive","temporaryRoomData","room_background","room_thumbnail","users_cnt","unreadMessages","composing","toUpdate","setNewUserChatRoom","console","log","catch","error","Dialog","DialogContent","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","value","onChange","e","newValue","marginTop","Typography","fontWeight","coin","DialogActions","transferCoin","tokenName","Number","textMessage","roomJID","autoFocus","SystemMessage","textAlign","color","fontSize","fontFamily","key","ChatInRoom","messages","state","historyMessages","useChatRooms","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","roomData","setRoomData","fileRef","useRef","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","showDialogTxt","setShowDialogTxt","headline","description","dialogTxt","setDialogTxt","useParams","firstLoadMessages","setFirstLoadMessages","onDrop","useCallback","acceptedFiles","sendFile","getRootProps","useDropzone","noClick","maxFiles","getPublicProfile","chooseRoom","currentRoomData","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","lastMessageID","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","userAvatar","profileImage","notDisplayedValue","file","formData","FormData","append","uploadFile","results","chatName","createdAt","expiresAt","fileName","filename","isVisible","originalname","ownerKey","size","duration","updatedAt","userId","waveForm","attachmentId","_id","wrappable","current","timeoutId","clearTimeout","conferenceRoomJID","window","onblur","onfocus","lastUpFilteredMessage","isSystemMessage","Box","paddingBlock","responsive","scrollable","placeholder","loading","room","active","unreadCnt","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","disableOnYReachWhenNoScroll","typingIndicator","content","arr","previousJID","nextJID","currentJID","getPosition","toString","onPaste","Array","from","clipboardData","items","find","x","test","blob","getAsFile","onSend","onAttachClick","click","files","ref","DialogTitle","DialogContentText","CircularProgress","Button","Chat","Container"],"sourceRoot":""}