{"version":3,"file":"static/js/955.7f770c11.chunk.js","mappings":"6KAEaA,EAAyB,SAACC,GACnC,OAAGA,EACQA,EAAIC,QAAQ,WAAY,OAAOC,cAE/B,uBAEf,EAEaC,EAAiB,yCAAG,WAC7BC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAgB,gFAwBP,OAtBHC,EAAwB,CAACN,EAAiBC,GAC3CM,OACAC,KAAK,KAEJC,EAAUH,EAAsBR,cAAgBM,EAChDM,EAAoB,CAACR,EAAaC,GAAgBI,OAAOC,KAAK,SAEpEG,EAAAA,GAAAA,cAAmBL,EAAsBR,eACzCa,EAAAA,GAAAA,SAAcL,EAAsBR,eACpCa,EAAAA,GAAAA,WACIL,EAAsBR,cACtB,CAACc,SAAUF,IAEfC,EAAAA,GAAAA,SAAcF,GACdE,EAAAA,GAAAA,eAAoBF,GAEpBI,YAAW,WACPF,EAAAA,GAAAA,WACIhB,EAAuBK,GACvBS,EAAQX,cACRH,EAAuBM,GAE/B,GAAG,KAAM,kBACF,CAACQ,QAAAA,EAASG,SAAUF,IAAkB,4CAChD,gBAhC6B,+C,0XC2Bf,SAASI,EAAY,GAA4B,IAA1BC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QACpCC,GAAOC,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMF,IAAI,IAC1CG,GAAUF,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMC,OAAO,IAChDC,GAAUC,EAAAA,EAAAA,QAAyB,MACzC,GAA4BC,EAAAA,EAAAA,UAAS,IAAG,eAAjCC,EAAM,KAAEC,EAAS,KAClBC,GAASJ,EAAAA,EAAAA,QAAyB,MACxC,GAAwBC,EAAAA,EAAAA,YAAgB,eAAjCI,EAAI,KAAEC,EAAO,KACpB,GAAwBL,EAAAA,EAAAA,YAAgB,eAAjCM,EAAI,KAAEC,EAAO,KA4EpB,OACE,SAACC,EAAA,EAAM,CAACC,QAAS,WAAO,EAAGjB,KAAMA,EAAK,UACpC,UAACkB,EAAA,EAAG,YACF,UAACC,EAAA,EAAW,CACVC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAAkB,0BAG5D,SAACC,EAAA,EAAU,CACTC,QAAS,WACPd,EAAU,IACVT,GAAQ,EACV,EAAE,UAEF,SAACwB,EAAA,EAAS,UAGd,SAACP,EAAA,EAAG,CAACQ,GAAI,CAAEC,WAAY,QAASC,QAAS,GAAI,UAC3C,UAACV,EAAA,EAAG,CAACE,MAAO,CAAES,MAAO,SAAU,WAC3BpB,IACA,UAACS,EAAA,EAAG,CACFE,MAAO,CACLU,OAAQ,QACRT,QAAS,OACTC,eAAgB,SAChBS,WAAY,UACZ,WAEF,kBACEC,KAAK,OACLC,IAAK3B,EACLc,MAAO,CAAEC,QAAS,QAClBa,OAAO,UACPC,SAzGhB,SAAsBC,GACpB,GAAIA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAMC,OAAS,EAAG,CAC/C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,wBAC9BhC,GAAuB,QAAb,EAAA8B,EAAOG,cAAM,aAAb,EAAeC,aAAc,GAAG,IAE5CJ,EAAOK,cAAcT,EAAEC,OAAOC,MAAM,GACtC,CACF,KAmGc,SAACQ,EAAA,EAAM,CAACtB,QAAS,kBAAMlB,EAAQyC,QAAQC,OAAO,EAAC,yBAGhDvC,IACD,UAACS,EAAA,EAAG,YACF,SAAC,IAAS,CACRN,KAAMA,EACNuB,SAAU,SAACc,EAAGC,GAAW,OAAKrC,EAAQqC,EAAY,EAClDC,WAlFhB,SAAwBvC,GACtB,IAAMwC,EAASC,SAASC,cAAc,UAChCC,EAAaC,OAAOC,iBACpBC,EAAS/C,EAAOoC,QAAQY,aAAehD,EAAOoC,QAAQlB,MACtD+B,EAASjD,EAAOoC,QAAQc,cAAgBlD,EAAOoC,QAAQjB,OACvDgC,EAAMV,EAAOW,WAAW,MAE9BX,EAAOvB,MAAQjB,EAAKiB,MAAQ0B,EAAaG,EACzCN,EAAOtB,OAASlB,EAAKkB,OAASyB,EAAaK,EAE3CE,EAAIE,aAAaT,EAAY,EAAG,EAAGA,EAAY,EAAG,GAClDO,EAAIG,sBAAwB,OAE5BH,EAAII,UACFvD,EAAOoC,QACPnC,EAAKuD,EAAIT,EACT9C,EAAKwD,EAAIR,EACThD,EAAKiB,MAAQ6B,EACb9C,EAAKkB,OAAS8B,EACd,EACA,EACAhD,EAAKiB,MAAQ6B,EACb9C,EAAKkB,OAAS8B,GAGhBR,EAAOiB,QACL,SAACvD,GACMA,EAMLC,EAAQD,GAJNwD,QAAQC,MAAM,kBAKlB,GACA,aACA,EAEJ,EA6CgBC,SAAU,IACVC,UAAW,IAAI,UAEf,gBACErD,MAAO,CAAES,MAAO,QAASC,OAAQ,QACjCG,IAAKtB,EACL+D,IAAI,UACJC,IAAKlE,EACLmE,OAlHlB,SAAqBxC,GAEjB,MAA0BA,EAAEyC,cAApBhD,EAAK,EAALA,MAAOC,EAAM,EAANA,OACfjB,EA3CN,SACEiE,EACAC,EACAC,GAEA,OAAOC,EAAAA,EAAAA,aACLC,EAAAA,EAAAA,gBACE,CACEC,KAAM,IACNtD,MAAO,IAETmD,EACAF,EACAC,GAEFD,EACAC,EAEJ,CAyBcK,CAAiBvD,EAAOC,EAfrB,GAiBf,OAgHc,SAACZ,EAAA,EAAG,CAACE,MAAO,CAAEC,QAAS,QAAS,UAC9B,SAACyB,EAAA,EAAM,CAACtB,QA/GxB,WACE,IAAM6D,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQzE,EAAM,cAC1B0E,EAAAA,GACiBH,GACdI,MAAK,SAACC,GAELrF,GAAQ,kBACHH,GAAI,IACPyF,aAAcD,EAASE,KAAK1F,KAAKyF,gBAEnC1F,GAAQ,EACV,IACC4F,OAAM,SAACzD,GAAC,OAAKkC,QAAQwB,IAAI1D,EAAE,GAChC,EAiGyChB,MAAO,CAAE2E,WAAY,QAAS,gCAWzE,CCnKe,SAASC,EAAiB,GAAkC,IAAhChG,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KACxD,GAA4BM,EAAAA,EAAAA,WAAS,GAAM,eAApCyF,EAAM,KAAEC,EAAS,KACxB,GAA8B1F,EAAAA,EAAAA,WAAS,GAAM,eAAtC2F,EAAO,KAAEC,EAAU,KACpB/F,GAAUF,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMC,OAAO,IAEhDgG,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,UAAWtG,EAAKsG,UAChBC,SAAUvG,EAAKuG,SACfC,YAAaxG,EAAKwG,YAAcxG,EAAKwG,YAAc,GACnDC,cAAezG,EAAKyG,cACpBC,aAAc1G,EAAK0G,cAErBC,SAAU,SAACC,GACT,IAAMC,EAAiC,CAAC,EAUxC,OARKD,EAAON,YACVO,EAAOP,UAAY,YAGhBM,EAAOL,WACVM,EAAON,SAAW,YAGbM,CACT,EACAC,SAAU,SAACF,GACT,IAAMG,EAAK,IAAI3B,SACf2B,EAAG1B,OAAO,YAAauB,EAAON,WAC9BS,EAAG1B,OAAO,WAAYuB,EAAOL,UAEzBK,EAAOJ,aACTO,EAAG1B,OAAO,cAAeuB,EAAOJ,aAGlCO,EAAG1B,OAAO,gBAAiBuB,EAAOH,eAClCM,EAAG1B,OAAO,eAAgBuB,EAAOF,cACjCR,GAAW,IACXc,EAAAA,EAAAA,MACGC,IAAI,SAAUF,GACdxB,MAAK,SAACC,GACL,IAAM0B,EAAW1B,EAASE,KAAK1F,KAC/BG,GAAQ,kBACHH,GAAI,IACPsG,UAAWY,EAASZ,UACpBC,SAAUW,EAASX,SACnBC,YAAaU,EAASV,YACtBC,cAAeS,EAAST,cACxBC,aAAcQ,EAASR,gBAEzB3G,GAAQ,EACV,IACCoH,SAAQ,kBAAMjB,GAAW,EAAM,GACpC,IAGF,OACE,UAACpF,EAAA,EAAM,CAACC,QAAS,WAAO,EAAGjB,KAAMA,EAAK,WACpC,UAACkB,EAAA,EAAG,YACF,UAACC,EAAA,EAAW,CACVC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAAkB,0BAG5D,SAACC,EAAA,EAAU,CAACC,QAAS,kBAAMvB,GAAQ,EAAM,EAAC,UACxC,SAACwB,EAAA,EAAS,UAGd,SAACP,EAAA,EAAG,CAACQ,GAAI,CAAEG,MAAO,OAAQF,WAAY,QAASC,QAAS,GAAI,UAC1D,UAACV,EAAA,EAAG,CAACE,MAAO,CAAEC,QAAS,QAAS,WAC9B,UAACH,EAAA,EAAG,CACFQ,GAAI,CAAE4F,YAAa,QACnBlG,MAAO,CAAEC,QAAS,OAAQkG,cAAe,UAAW,WAEpD,gBACEnG,MAAO,CAAES,MAAO,QAAS2F,aAAc,QACvC9C,IAAI,GACJC,IAAKzE,EAAKyF,aAAezF,EAAKyF,aAAe8B,KAE/C,cACEC,KAAK,IACLlG,QAAS,SAACY,GACRA,EAAEuF,iBACFzB,GAAU,EACZ,EAAE,8BAKN,SAAChF,EAAA,EAAG,WACF,kBACEE,MAAO,CAAEC,QAAS,OAAQkG,cAAe,UACzCP,SAAUX,EAAOuB,aAAa,WAE9B,SAACC,EAAA,EAAS,CACRC,OAAO,QACPC,MAAM,aACNC,KAAK,YACLC,QAAQ,WACR1D,SACE8B,EAAO6B,QAAQ1B,YAAaH,EAAOU,OAAOP,WAI5C2B,WACE9B,EAAO6B,QAAQ1B,WAAaH,EAAOU,OAAOP,UACrCH,EAAOU,OAAOP,UACf,GAENrE,SAAUkE,EAAO+B,aACjBC,OAAQhC,EAAOiC,WACfC,MAAOlC,EAAOS,OAAON,aAEvB,SAACqB,EAAA,EAAS,CACRC,OAAO,QACPC,MAAM,YACNC,KAAK,WACLC,QAAQ,WACR1D,SACE8B,EAAO6B,QAAQzB,WAAYJ,EAAOU,OAAON,UAI3C0B,WACE9B,EAAO6B,QAAQzB,UAAYJ,EAAOU,OAAON,SACpCJ,EAAOU,OAAON,SACf,GAENtE,SAAUkE,EAAO+B,aACjBC,OAAQhC,EAAOiC,WACfC,MAAOlC,EAAOS,OAAOL,YAEvB,SAACoB,EAAA,EAAS,CACRC,OAAO,QACPC,MAAM,sBACNC,KAAK,cACLC,QAAQ,WACR9F,SAAUkE,EAAO+B,aACjBC,OAAQhC,EAAOiC,WACfC,MAAOlC,EAAOS,OAAOJ,eAEvB,SAAC8B,EAAA,EAAgB,CACfC,QAASpC,EAAOS,OAAOH,cACvBqB,KAAK,gBACLU,SACE,SAACC,EAAA,EAAQ,CACPxG,SAAU,SAACC,GACTiE,EAAOuC,cAAc,gBAAiBxG,EAAEC,OAAOoG,QACjD,IAGJV,MAAM,kBACNc,eAAe,SAEjB,SAACL,EAAA,EAAgB,CACfC,QAASpC,EAAOS,OAAOF,aACvBoB,KAAK,eACLU,SACE,SAACC,EAAA,EAAQ,CACPxG,SAAU,SAACC,GACTiE,EAAOuC,cAAc,eAAgBxG,EAAEC,OAAOoG,QAChD,IAGJV,MAAM,iBACNc,eAAe,SAEjB,SAACC,EAAA,EAAa,CACZ9G,KAAK,SACLmE,QAASA,EACT8B,QAAQ,YAAW,+BAS9BhC,IAAU,SAAC,EAAU,CAACjG,KAAMiG,EAAQhG,QAASiG,MAGpD,C,0BC1Le,SAAS6C,EAAS,GAAqC,IAAnCC,EAAO,EAAPA,QAASC,EAAa,EAAbA,cAC1C,EAAwBC,EAAAA,UAAe,GAAM,eAAtCC,EAAI,KAAEC,EAAO,KACdlJ,GAAOC,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMF,IAAI,IACxCmJ,GAAUC,EAAAA,EAAAA,MAgBlB,OAAIN,GAEA,SAAC9H,EAAA,EAAG,CAACE,MAAO,CAAEmI,UAAW,OAAQjC,YAAa,QAAS,UACrD,UAACkC,EAAA,EAAI,CACH9H,GAAI,CACFL,QAAS,OACTO,QAAS,OACT2F,cAAe,SACfxF,WAAY,SACZF,MAAO,QACP,WAEF,SAACX,EAAA,EAAG,CAACQ,GAAI,CAAE4F,YAAa,QAAS,WAC5B0B,EAAQxC,YACT,gBACEpF,MAAO,CAAES,MAAO,QAAS2F,aAAc,QACvC9C,IAAI,GACJC,IAAKqE,EAAQrD,cAAgB8B,OAInC,UAACvG,EAAA,EAAG,YACF,UAACA,EAAA,EAAG,CAACQ,GAAI,CAAE+H,WAAY,QAAS,UACtB,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAASxC,UAAS,IAAU,OAAPwC,QAAO,IAAPA,OAAO,EAAPA,EAASvC,aAEzB,OAAPuC,QAAO,IAAPA,OAAO,EAAPA,EAAStC,eACR,UAACxF,EAAA,EAAG,2BAAsB,OAAP8H,QAAO,IAAPA,OAAO,EAAPA,EAAStC,gBAE9B,SAAC5D,EAAA,EAAM,CAACtB,QA3CO,YACrBxC,EAAAA,EAAAA,GACIkB,EAAK+I,cACLA,EACA/I,EAAKsG,UACLwC,EAAQxC,UACR,6BACFf,MAAK,SAAA9C,GACH/C,EAAAA,GAAAA,WACAO,EAAAA,EAAAA,WAAyBuJ,4BAA4B/G,EAAOjD,SAC5D2J,EAAQM,KAAK,SAAShH,EAAOjD,QACjC,IAAGmG,OAAM,SAAAtB,GACLD,QAAQwB,IAAI,0BAA2BvB,EAC3C,GACJ,EA6B2C0D,QAAQ,YAAY2B,KAAK,QAAO,qCAOzE,UAAC1I,EAAA,EAAG,CAACE,MAAO,CAAEmI,UAAW,OAAQjC,YAAa,QAAS,WACrD,UAACkC,EAAA,EAAI,CACH9H,GAAI,CACFL,QAAS,OACTO,QAAS,OACT2F,cAAe,SACfxF,WAAY,SACZF,MAAO,QACP,WAEF,SAACX,EAAA,EAAG,CAACQ,GAAI,CAAE4F,YAAa,QAAS,UAC/B,gBACElG,MAAO,CAAES,MAAO,QAAS2F,aAAc,QACvC9C,IAAI,GACJC,IAAKzE,EAAKyF,cAAgB8B,OAG9B,SAACvG,EAAA,EAAG,YACChB,EAAKsG,YACN,iCACE,UAACtF,EAAA,EAAG,CAACQ,GAAI,CAAE+H,WAAY,QAAS,UACzB,OAAJvJ,QAAI,IAAJA,OAAI,EAAJA,EAAMsG,UAAS,IAAO,OAAJtG,QAAI,IAAJA,OAAI,EAAJA,EAAMuG,aAEtB,OAAJvG,QAAI,IAAJA,OAAI,EAAJA,EAAMwG,eAAe,UAACxF,EAAA,EAAG,2BAAmB,OAAJhB,QAAI,IAAJA,OAAI,EAAJA,EAAMwG,oBAIpDxG,EAAKsG,YACJ,cACEkB,KAAK,IACLlG,QAAS,SAACY,GACRA,EAAEuF,iBACFyB,GAAQ,EACV,EAAE,qBAMPD,IAAQ,SAACnD,EAAgB,CAAChG,KAAMmJ,EAAMlJ,QAASmJ,EAASlJ,KAAMA,MAGrE,C,qGC5Ga2J,EAAiD,CAC5DC,KAAM,CAAEC,MAAO,QACfC,OAAQ,CAAED,MAAO,QACjBE,KAAM,CAAEF,MAAO,UACfG,OAAQ,CAAEH,MAAO,aACjBI,KAAM,CAAEJ,MAAO,cACf,UAAW,CAAEA,MAAO,UCMhBK,EAAU,SAAH,GAMN,IALLC,EAAI,EAAJA,KACApB,EAAa,EAAbA,cAKMqB,GAAQC,EAAAA,EAAAA,KACRlB,GAAUC,EAAAA,EAAAA,MAOhB,OACE,SAACkB,EAAA,GAAQ,WACP,UAACC,EAAA,EAAc,CAACjJ,QARA,WAClB6H,EAAQM,KAAK,CACXe,SAAU,cACVtK,MAAO,CAAEuK,QAASN,EAAMpB,cAAAA,IAE5B,EAGyC,WACnC,SAAC2B,EAAA,EAAc,WACb,SAACC,EAAA,EAAM,CACLzJ,MAAO,CAAE0J,gBAAiBR,EAAMS,QAAQC,QAAQC,MAChDtG,IAAK0F,EAAKa,kBAGd,SAACC,EAAA,EAAY,CAACH,QAASX,EAAKe,aAC5B,SAAClK,EAAA,EAAG,CACFQ,GAAI,CACFL,QAAS,OACTC,eAAgB,SAChBS,WAAY,UACZ,UAEF,kBAAMX,MAAO,CAAEiK,UAAW,OAAQxJ,MAAO,IAAK,UAC3CwI,EAAKiB,QAAO,IAAGjB,EAAKkB,eAjBdlB,EAAKmB,MAuBxB,EACMC,EAAW,SAAH,GAMP,IALLpB,EAAI,EAAJA,KACApB,EAAa,EAAbA,cAKMqB,GAAQC,EAAAA,EAAAA,KACRlB,GAAUC,EAAAA,EAAAA,MAOhB,OACE,SAACkB,EAAA,GAAQ,WACP,UAACC,EAAA,EAAc,CAACjJ,QARA,WAClB6H,EAAQM,KAAK,CACXe,SAAU,cACVtK,MAAO,CAAEuK,QAASN,EAAMpB,cAAAA,IAE5B,EAGyC,WACnC,SAAC2B,EAAA,EAAc,WACb,SAACC,EAAA,EAAM,CACLzJ,MAAO,CAAE0J,gBAAiBR,EAAMS,QAAQC,QAAQC,MAChDtG,IAAK0F,EAAKqB,gBAGd,SAACP,EAAA,EAAY,CAACH,QAASX,EAAKe,aAC5B,UAAClK,EAAA,EAAG,CACFQ,GAAI,CACFL,QAAS,OACTC,eAAgB,WAChBS,WAAY,UACZ,WAEF,SAACb,EAAA,EAAG,CACFQ,GAAI,CAEFL,QAAS,OACTC,eAAgB,WAChBS,WAAY,UACZ,SAEDsI,EAAKsB,OAAOC,KAAI,SAACC,GAChB,OACE,SAACC,EAAA,EAAI,CACHpK,GAAI,CACFoJ,gBAAiBjB,EAAYgC,GAAO9B,MACpCzC,YAAa,OAEfS,MAAO8D,GACFA,EAGX,OAEF,kBAAMzK,MAAO,CAAEiK,UAAW,OAAQxJ,MAAO,IAAK,UAC3CwI,EAAKiB,QAAO,IAAGjB,EAAKkB,gBAtCdlB,EAAKmB,MA4CxB,EAEe,SAASO,EAAW,GAM/B,IALFT,EAAO,EAAPA,QACArC,EAAa,EAAbA,cAKM+C,EAAWV,EAAQW,QAAO,SAAC5B,GAAI,MAAwB,QAAnBA,EAAK6B,SAAmB,IAC5DC,GAAYC,EAAAA,EAAAA,IAAiBd,GACnC,OACE,UAACe,EAAA,EAAI,CAAC3K,GAAI,CAAEG,MAAO,OAAQyK,QAAS,oBAAqB,UACtDN,EAASJ,KAAI,SAACvB,EAAMkC,GACnB,OACE,SAACnC,EAAO,CAACnB,cAAeA,EAAeoB,KAAMA,GAAWA,EAAKmB,MAEjE,IACCW,EAAUP,KAAI,SAACvB,EAAMkC,GACpB,OACE,SAACd,EAAQ,CACPxC,cAAeA,EACfoB,KAAMA,GACDA,EAAKmB,MAAQe,EAGxB,MAGN,C,0DC/HMC,EAAe,SAAH,GAMX,IAAD,EALJnC,EAAI,EAAJA,KACApB,EAAa,EAAbA,cAKMqB,GAAQC,EAAAA,EAAAA,KACRlB,GAAUC,EAAAA,EAAAA,MAOhB,OACE,SAACkB,EAAA,GAAQ,WACP,UAACC,EAAA,EAAc,CAACjJ,QARA,WAClB6H,EAAQM,KAAK,CACXe,SAAU,cACVtK,MAAO,CAAEuK,QAASN,EAAMpB,cAAAA,IAE5B,EAGyC,WACnC,SAAC2B,EAAA,EAAc,WACb,SAACC,EAAA,EAAM,CACLzJ,MAAO,CAAE0J,gBAAiBR,EAAMS,QAAQC,QAAQC,MAChDtG,KAAS,OAAJ0F,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMoC,YAAI,WAAN,EAAJ,EAAYC,mBAAuB,OAAJrC,QAAI,IAAJA,OAAI,EAAJA,EAAMsC,eAG9C,SAACxB,EAAA,EAAY,CACXH,QAASX,EAAKuC,aACdC,WAAWC,EAAAA,EAAAA,GAAO,IAAIC,KAAK1C,EAAK2C,WAAY,YAE9C,SAAC,IAAG,CACFtL,GAAI,CACFL,QAAS,OACTC,eAAgB,SAChBS,WAAY,UACZ,UAEF,SAACR,EAAA,EAAU,CAACG,GAAI,CAAEqI,MAAO,SAAU,UACjC,SAACkD,EAAA,EAAU,YApBJ5C,EAAK6C,IA0BxB,EAEe,SAASC,EAAe,GAMnC,IALFC,EAAS,EAATA,UACAnE,EAAa,EAAbA,cAKA,OACE,SAACoD,EAAA,EAAI,CAAC3K,GAAI,CAAEG,MAAO,OAAQyK,QAAS,oBAAqB,SACtDc,EAAUxB,KAAI,SAACvB,GACd,OACE,SAACmC,EAAY,CACXvD,cAAeA,EACfoB,KAAMA,GACDA,EAAK6C,IAGhB,KAGN,C,iDClEe,SAASG,GAAqBC,GAC3C,MAA8BpE,EAAAA,UAAe,GAAM,eAA5C/C,EAAO,KAAEC,EAAU,KAEpBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbqG,aAAc,GACdH,KAAM,MAER5F,SAAU,SAACC,GACT,IAAMC,EAAiC,CAAC,EAUxC,OARKD,EAAO8F,eACV7F,EAAO6F,aAAe,YAGnB9F,EAAO2F,OACV1F,EAAO0F,KAAO,YAGT1F,CACT,EACAC,SAAS,WAAD,8BAAE,WAAOF,GAAM,kFAKa,OAJlCV,GAAW,GAAM,SAEf9B,QAAQwB,IAAIgB,IACNG,EAAK,IAAI3B,UACZC,OAAO,QAASuB,EAAO2F,MAAM,SACHjH,EAAAA,KAAoB+H,KAAK,SAAUtG,GAAI,KAAD,EACP,OADtDuG,EAAc,OACdC,EAAeD,EAAe5H,KAAK8H,QAAQ,GAAGf,SAAS,EAAD,QAC3BnH,EAAAA,KAAoB+H,KAAK,QAAS,CACjEX,aAAc9F,EAAO8F,aACrBtK,MAAO,CAACmL,KACP,KAAD,GAHIE,EAAkB,OAIxBL,EAAMM,aAAaD,EAAmB/H,MACtCQ,GAAW,GACXkH,EAAMrN,SAAQ,GAAO,kDAErBqE,QAAQwB,IAAI,EAAD,IACXM,GAAW,GAAO,0DAErB,mDAnBQ,KAsBX,OACE,SAACpF,EAAA,EAAM,CAACC,QAAS,WAAO,EAAG4M,UAAU,EAAO7N,KAAMsN,EAAMtN,KAAK,UAC3D,UAAC,IAAG,CAACoB,MAAO,CAAES,MAAO,SAAU,WAC7B,UAACV,EAAA,EAAW,CACVC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAAkB,iCAG5D,SAACC,EAAA,EAAU,CAACC,QAAS,kBAAM8L,EAAMrN,SAAQ,EAAM,EAAC,UAC9C,SAACwB,EAAA,EAAS,UAGd,SAAC,IAAG,CACFC,GAAI,CACFG,MAAO,OACPF,WAAY,QACZC,QAAS,GACT,UAEF,kBAAMR,MAAO,CAAE0M,KAAM,KAAO9G,SAAUX,EAAOuB,aAAa,WACxD,kBACEzF,SAAU,SAACC,GACTiE,EAAOuC,cAAc,OAAQxG,EAAEC,OAAOC,MAAM,GAC9C,EACAN,KAAK,SAENqE,EAAO6B,QAAQuE,MAAQpG,EAAOU,OAAO0F,MACpC,SAACsB,GAAA,EAAc,CAACxJ,OAAK,WAClB8B,EAAOU,OAAO0F,OAEf,MACJ,SAAC5E,EAAA,EAAS,CACRC,OAAO,QACPkG,WAAY,CACVC,aAAc,OAEhBlG,MAAM,gBACNC,KAAK,eACLhG,KAAK,OACLkM,WAAS,EACTjG,QAAQ,WACR9F,SAAU,SAACC,GACTiE,EAAO+B,aAAahG,EACtB,EACAiG,OAAQhC,EAAOiC,WACf/D,MACE8B,EAAO6B,QAAQ0E,cACfuB,QAAQ9H,EAAOU,OAAO6F,cAExBzE,WACE9B,EAAO6B,QAAQ0E,cAAgBvG,EAAOU,OAAO6F,aACzCvG,EAAOU,OAAO6F,aACd,MAGR,SAAC,IAAG,CAAClL,GAAI,CAAEoG,OAAQ,EAAGzG,QAAS,OAAQC,eAAgB,UAAW,UAChE,SAACwH,EAAA,EAAa,CACZ3C,QAASA,EACTnE,KAAK,SACLiG,QAAQ,YAAW,+BAUnC,C,wCC7Ge,SAASmG,GAAad,GACnC,MAA8BpE,EAAAA,SAAoB,MAAK,eAAhDmF,EAAO,KAAEC,EAAU,KAC1B,EAAkCpF,EAAAA,SAAe,IAAG,eAA7CqF,EAAS,KAAEC,EAAY,KAC9B,EAAwBtF,EAAAA,SAA4B,MAAK,eAAlDuD,EAAI,KAAEgC,EAAO,KACpB,EAA8BvF,EAAAA,UAAe,GAAM,eAA5C/C,EAAO,KAAEC,EAAU,KAEpBsI,GAAavO,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMsO,UAAU,IACtDxO,GAAOC,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMF,IAAI,IAE1CI,EAAU4I,EAAAA,OAA+B,MAqBzC7C,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACb6E,UAAW,GACXuD,OAAQ,KAEV9H,SAAU,SAACC,GACT,IAAMC,EAAiC,CAAC,EAMxC,OAJKD,EAAOsE,YACVrE,EAAOqE,UAAY,YAGdrE,CACT,EACAC,SAAS,WAAD,8BAAE,WAAOF,GAAM,+EAChB2F,EAAK,CAAD,eACkB,OAAzB+B,EAAa,YAAY,2BAIrBvH,EAAK,IAAI3B,UACZC,OAAO,QAASkH,GAEnBrG,GAAW,GACXZ,EAAAA,GACcyB,GACXxB,KAAI,yCAAC,WAAOmJ,GAAG,4FACRpJ,EAAAA,GACJsB,EAAOsE,UACPwD,EAAIhJ,KAAK8H,QAAQ,GAAGR,IACpBpG,EAAO6H,QACP,KAAD,kBACyBnJ,EAAAA,GAAgBtF,EAAK+I,eAAe,KAAD,EAAvD4F,EAAW,OACjBH,EAAWG,EAAYjJ,KAAK0F,SAC5BgC,EAAMrN,SAAQ,GAAO,2CACtB,mDATI,IAUJoH,SAAQ,kBAAMjB,GAAW,EAAM,IAAE,2CACrC,mDAvBQ,KA0BX,OACE,SAACpF,EAAA,EAAM,CAACC,QAAS,WAAO,EAAG4M,UAAU,EAAO7N,KAAMsN,EAAMtN,KAAK,UAC3D,UAAC,IAAG,CAACoB,MAAO,CAAES,MAAO,SAAU,WAC7B,UAACV,EAAA,EAAW,CACVC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAAkB,mCAG5D,SAACC,EAAA,EAAU,CACTC,QAAS,WACP8L,EAAMrN,SAAQ,EAChB,EAAE,UAEF,SAACwB,EAAA,EAAS,UAGd,UAAC,IAAG,CACFC,GAAI,CACFG,MAAO,OACPF,WAAY,QACZC,QAAS,EACTP,QAAS,QACT,WAEF,SAAC,IAAG,CAACD,MAAO,CAAE0M,KAAM,IAAKlM,QAAS,MAAOkN,aAAc,QAAS,UAC9D,UAAC,IAAG,CACF1N,MAAO,CACLQ,QAAS,OACTP,QAAS,OACTkG,cAAe,SACfxF,WAAY,SACZT,eAAgB,MAChByN,OAAQ,iBACRvH,aAAc,OACd1F,OAAQ,OACRkN,gBAAiBX,EAAO,cAAUA,EAAO,KAAM,OAC/CY,eAAgB,QAChBC,mBAAoB,SACpBC,iBAAkB,aAClB,WAEF,kBACEhN,SApGE,SAACiN,GACf,IAAMC,EAAQD,EAAM/M,OAEpB,GAAIgN,EAAM/M,MAAO,CACf,IAAME,EAAS,IAAIC,WAEnBD,EAAO8M,OAAS,SAAClN,GACP,IAAD,EAAHA,IACU,QAAZ,EAAIA,EAAEC,cAAM,OAAR,EAAUM,QACZ2L,EAAWlM,EAAEC,OAAOM,QAG1B,EACA6L,EAAa,IACbC,EAAQY,EAAM/M,MAAM,IACpBE,EAAOK,cAAcwM,EAAM/M,MAAM,GACnC,CACF,EAoFcL,IAAK3B,EACL0B,KAAK,OACLE,OAAO,UACPd,MAAO,CAAEC,QAAS,WAEpB,SAACyB,EAAA,EAAM,CACLiH,MAAM,YACN9B,QAAQ,YACRzG,QAAS,wBAAqB,QAArB,EAAMlB,EAAQyC,eAAO,aAAf,EAAiBC,OAAO,EAAC,0BAIzCuL,GACC,SAAC,IAAG,CAACnN,MAAO,CAAE2I,MAAO,OAAQ,8BAC3B,WAGR,kBAAM3I,MAAO,CAAE0M,KAAM,KAAO9G,SAAUX,EAAOuB,aAAa,WACxD,SAACC,EAAA,EAAS,CACRC,OAAO,QACPkG,WAAY,CACVC,aAAc,OAEhBlG,MAAM,aACNC,KAAK,YACLhG,KAAK,OACLkM,WAAS,EACTjG,QAAQ,WACR9F,SAAU,SAACC,GACTiE,EAAO+B,aAAahG,EACtB,EACAiG,OAAQhC,EAAOiC,WACf/D,MACE8B,EAAO6B,QAAQkD,WAAa+C,QAAQ9H,EAAOU,OAAOqE,WAEpDjD,WACE9B,EAAO6B,QAAQkD,WAAa/E,EAAOU,OAAOqE,UACtC/E,EAAOU,OAAOqE,UACd,MAGR,UAACmE,GAAA,EAAW,CAACrB,WAAS,aACpB,SAACsB,GAAA,EAAU,CAACvH,QAAQ,WAAWwH,QAAQ,sBAAqB,qBAG5D,UAACC,GAAA,EAAY,CACX1B,WAAY,CACVhG,KAAM,SACN2H,GAAI,uBAENxN,SAAU,SAACC,GACTkC,QAAQwB,IAAI1D,GACZiE,EAAO+B,aAAahG,EACtB,EAAE,WAEF,mBAAQmG,MAAO,EAAE,gBACjB,mBAAQA,MAAO,EAAE,gBACjB,mBAAQA,MAAO,EAAE,sBAGrB,SAAC,IAAG,CAAC7G,GAAI,CAAEoG,OAAQ,EAAGzG,QAAS,OAAQC,eAAgB,UAAW,UAChE,SAACwH,EAAA,EAAa,CACZ3C,QAASA,EACTnE,KAAK,SACLiG,QAAQ,YAAW,gCAUnC,C,0DCtMa2H,KANQC,EAAAA,GAAAA,IAAG,oEAMiBA,EAAAA,GAAAA,IAAG,4S,YCwC5C,OApCA,SAAsB,IAAY,WAChC,MAAwB3G,EAAAA,UAAe,GAAM,eAAtClJ,EAAI,KAAEC,EAAO,KACdC,GAAOC,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMF,IAAI,IAC1C4P,GAAa3P,EAAAA,EAAAA,IAAc,SAACC,GAAK,OACrCA,EAAMkL,QAAQyE,MAAK,SAACC,GAAE,MAAsB,2BAAjBA,EAAG5E,SAAsC,GAAC,IAEvE,GAA0B6E,EAAAA,GAAAA,GAAgBL,GAA2B,CACnEM,UAAW,CACTjH,cAAe/I,EAAK+I,cACpBkH,gBAAiBL,EAAWK,mBAHxBvK,EAAI,EAAJA,KAAMO,EAAO,EAAPA,QAiBd,OAVA+C,EAAAA,WAAgB,WACVtD,IACF3F,GAAQ,GACRqE,QAAQwB,IAAIF,GACZ9F,YAAW,WACTG,GAAQ,EACV,GAAG,KAEP,GAAG,CAAC2F,EAAMO,KAGR,2BACGnG,IACC,SAACoQ,GAAA,EAAQ,CACPpQ,MAAM,EACNqQ,QAAO,yBAAoBzK,EAAK0K,WAAWC,UAE9C,MAIP,EC7BMC,GAAS,CACbC,cAAe,CACbC,eAAgB,OAChB3G,MAAO,UACP4G,SAAU,SAIP,SAASC,KACd,OAA8BpQ,EAAAA,EAAAA,WAAS,GAAM,eAAtC2F,EAAO,KAAEC,EAAU,KAC1B,GACE5F,EAAAA,EAAAA,YAA2C,eADtCqQ,EAAY,KAAEC,EAAe,KAE9B5Q,GAAOC,EAAAA,EAAAA,IAAc,SAAC4Q,GAAK,OAAKA,EAAM7Q,IAAI,IAC1C8Q,GAAQ7Q,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMkL,OAAO,IAC9C8B,GAAYjN,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMgN,SAAS,IAC1D,GAAoD5M,EAAAA,EAAAA,WAAS,GAAM,eAA5DyQ,EAAkB,KAAEC,EAAqB,KAChD,GAAkD1Q,EAAAA,EAAAA,WAAS,GAAM,eAA1D2Q,EAAiB,KAAEC,EAAoB,KAW9C,OATAC,EAAAA,EAAAA,YAAU,WACRjL,GAAW,IACXkL,EAAAA,EAAAA,IAAgBpR,EAAK+I,eAClBxD,MAAK,SAAC9C,GACLmO,EAAgBnO,EAAOiD,KACzB,IACCyB,SAAQ,kBAAMjB,GAAW,EAAM,GACpC,GAAG,IAECD,GAAgB,SAACoL,EAAA,EAAe,KAElC,UAACC,EAAA,EAAS,CAAC3D,SAAS,KAAKzM,MAAO,CAAEU,OAAQ,sBAAuB,WAC/D,SAAC,GAAY,KACb,SAACZ,EAAA,EAAG,CAACQ,GAAI,CAAEoG,OAAQ,OAAQjG,MAAO,SAAU,UAC1C,SAACkH,EAAQ,OAEX,UAAC0I,EAAA,EAAU,CACTxJ,QAAQ,KACR7G,MAAO,CACL0G,OAAQ,OACRzG,QAAS,OACTC,eAAgB,gBAChBS,WAAY,UACZ,WAEF,qCACA,cACE2F,KAAK,IACLtG,MAAOoP,GAAOC,cACdjP,QAAS,SAACY,GACRA,EAAEuF,iBACFyJ,GAAqB,EACvB,EAAE,iCAKN,SAACrF,EAAU,CACTT,QAAS0F,EAAM/E,OAAOyF,EAAAA,IACtBzI,cAAe/I,EAAK+I,kBAEnBmE,EAAU7K,SACX,iCACE,UAACkP,EAAA,EAAU,CACTxJ,QAAQ,KACR7G,MAAO,CACL0G,OAAQ,OACRzG,QAAS,OACTC,eAAgB,gBAChBS,WAAY,UACZ,WAEF,yCACA,cACE2F,KAAK,IACLtG,MAAOoP,GAAOC,cACdjP,QAAS,SAACY,GACRA,EAAEuF,iBACFuJ,GAAsB,EACxB,EAAE,qCAKN,SAAC/D,EAAc,CACblE,cAAe/I,EAAK+I,cACpBmE,UAAWA,SAKdyD,IACD,UAAC3P,EAAA,EAAG,YACF,SAACuQ,EAAA,EAAU,CAACxJ,QAAQ,KAAK7G,MAAO,CAAE0G,OAAQ,QAAS,2BAGnD,SAAC6J,EAAA,EAAY,CAACd,aAAcA,EAAaG,WAI5CC,IACC,SAAC5D,GAAoB,CACnBrN,KAAMiR,EACNhR,QAASiR,EACTtD,aAAc,WAAO,IAIxBuD,IACC,SAAC/C,GAAY,CAACpO,KAAMmR,EAAmBlR,QAASmR,MAIxD,C,gBCxGO,SAASQ,GAAatE,GAC3B,OAA8B9M,EAAAA,EAAAA,WAAS,GAAK,eAArC2F,EAAO,KAAEC,EAAU,KAC1B,GAA8B5F,EAAAA,EAAAA,YAAoB,eAA3CwI,EAAO,KAAE6I,EAAU,KAC1B,GACErR,EAAAA,EAAAA,YAA2C,eADtCqQ,EAAY,KAAEC,EAAe,KAEpC,GAAgCtQ,EAAAA,EAAAA,UAAqB,IAAG,eAAjDsR,EAAQ,KAAEC,EAAW,KAC5B,GAAkCvR,EAAAA,EAAAA,UAAsB,IAAG,eAApD4M,EAAS,KAAEQ,EAAY,KACxBoE,EAAY,yCAAG,WAAO5E,GAAsB,kFAC1C6E,EAAkB,GAAG,GAAD,QACP7E,GAAS,IAA5B,2BAA8B,CAAnB/C,EAAI,QACb,IAKEA,EAAKsC,SAAWtC,EAAK6H,UAAU,GAC/BD,EAAgBtI,KAAKU,EAGvB,CAFE,MAAO9F,GACPD,QAAQwB,IAAKuE,EAAK/H,MAAM,GAAG,UAC7B,CACF,CAAC,+BACDsL,EAAaqE,GAAiB,2CAC/B,gBAfiB,sCA8BlB,OAdAZ,EAAAA,EAAAA,YAAU,WACRjL,GAAW,IACX+L,EAAAA,EAAAA,IAAiB7E,EAAMrE,eAAexD,MAAK,SAAC9C,GAC1CkP,EAAWlP,EAAOiD,MAClBmM,EAAYpP,EAAOiD,KAAKkM,SAASxG,SACjC0G,EAAarP,EAAOiD,KAAKwH,UAC3B,IAEAhH,GAAW,IACXkL,EAAAA,EAAAA,IAAgBhE,EAAMrE,eAAexD,MAAK,SAAC9C,GACzCmO,EAAgBnO,EAAOiD,KACzB,GACF,GAAG,IAECO,GACK,SAACoL,EAAA,EAAe,KAGvB,UAACC,EAAA,EAAS,CAAC3D,SAAS,KAAKzM,MAAO,CAAEU,OAAQ,sBAAuB,WAC/D,UAACZ,EAAA,EAAG,aACQ,OAAP8H,QAAO,IAAPA,IAAAA,EAASxC,aACV,SAACtF,EAAA,EAAG,CAACQ,GAAI,CAAEG,MAAO,QAASiG,OAAQ,OAAQlG,QAAS,QAAS,UAC3D,SAACmH,EAAQ,CAACC,QAASA,EAASC,cAAeqE,EAAMrE,oBAGlD6I,EAAS7F,OAAOyF,EAAAA,IAAmBnP,SACpC,iCACE,SAACkP,EAAA,EAAU,CAACxJ,QAAQ,KAAK7G,MAAO,CAAE0G,OAAQ,QAAS,oBAGnD,SAACiE,EAAU,CACTT,QAASwG,EAAS7F,OAAOyF,EAAAA,IACzBzI,cAAeqE,EAAMrE,wBAK1BmE,EAAU7K,SACX,iCACE,SAACkP,EAAA,EAAU,CAACxJ,QAAQ,KAAK7G,MAAO,CAAE0G,OAAQ,QAAS,wBAGnD,SAACqF,EAAc,CACblE,cAAeqE,EAAMrE,cACrBmE,UAAWA,SAIdyD,IACD,iCACE,SAACY,EAAA,EAAU,CAACxJ,QAAQ,KAAK7G,MAAO,CAAE0G,OAAQ,QAAS,2BAGnD,SAAC6J,EAAA,EAAY,CAACd,aAAcA,EAAaG,aAMnD,CCpGe,SAASoB,KACtB,IAAMlS,GAAOC,EAAAA,EAAAA,IAAc,SAACC,GAAK,OAAKA,EAAMF,IAAI,IAC1CmS,GAA6BC,EAAAA,EAAAA,MAEnC,OAAIpS,EAAK+I,gBAAkBoJ,EAAOE,QACzB,SAAC3B,GAAS,KAEV,SAACgB,GAAY,CAAC3I,cAAeoJ,EAAOE,QAE/C,C","sources":["helpers/chat/createPrivateChat.ts","pages/Profile/ChangeImage.tsx","pages/Profile/EditProfileModal.tsx","pages/Profile/UserCard.tsx","constants/index.ts","pages/Profile/ItemsTable.tsx","pages/Profile/DocumentsTable.tsx","pages/Profile/DocumentsCreateModal.tsx","pages/Profile/NewItemModal.tsx","apollo/subscription/index.ts","componets/Subscription.tsx","pages/Profile/MyProfile.tsx","pages/Profile/OtherProfile.tsx","pages/Profile/index.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    CONFERENCEDOMAIN: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n    xmpp.setOwner(combinedWalletAddress.toLowerCase());\n    xmpp.roomConfig(\n        combinedWalletAddress.toLowerCase(),\n        {roomName: combinedUsersName},\n    );\n    xmpp.subsribe(roomJid);\n    xmpp.presenceInRoom(roomJid);\n\n    setTimeout(() => {\n        xmpp.sendInvite(\n            underscoreManipulation(myWalletAddress),\n            roomJid.toLowerCase(),\n            underscoreManipulation(otherUserWalletAddress),\n        );\n    }, 1000);\n    return {roomJid, roomName: combinedUsersName};\n};\n","import React, { useState, useRef } from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Button } from \"@mui/material\";\nimport ReactCrop, { centerCrop, makeAspectCrop, Crop } from \"react-image-crop\";\nimport * as http from \"../../http\";\nimport { useStoreState } from \"../../store\";\nimport \"react-image-crop/dist/ReactCrop.css\";\n\ntype TProps = {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nfunction centerAspectCrop(\n  mediaWidth: number,\n  mediaHeight: number,\n  aspect: number\n) {\n  return centerCrop(\n    makeAspectCrop(\n      {\n        unit: \"%\",\n        width: 90,\n      },\n      aspect,\n      mediaWidth,\n      mediaHeight\n    ),\n    mediaWidth,\n    mediaHeight\n  );\n}\n\nexport default function ChangeImage({ open, setOpen }: TProps) {\n  const user = useStoreState((state) => state.user);\n  const setUser = useStoreState((state) => state.setUser);\n  const fileRef = useRef<HTMLInputElement>(null);\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const imgRef = useRef<HTMLImageElement>(null);\n  const [crop, setCrop] = useState<Crop>();\n  const [blob, setBlob] = useState<Blob>();\n  const aspect = 2;\n\n  function onSelectFile(e: React.ChangeEvent<HTMLInputElement>) {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () =>\n        setImgSrc(reader.result?.toString() || \"\")\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  function onImageLoad(e: React.SyntheticEvent<HTMLImageElement>) {\n    if (aspect) {\n      const { width, height } = e.currentTarget;\n      setCrop(centerAspectCrop(width, height, aspect));\n    }\n  }\n\n  function onSave() {\n    const form = new FormData();\n    form.append(\"file\", blob, \"profileImg\");\n    http\n      .updateProfile(form)\n      .then((response) => {\n        // response.data.user\n        setUser({\n          ...user,\n          profileImage: response.data.user.profileImage,\n        });\n        setOpen(false);\n      })\n      .catch((e) => console.log(e));\n  }\n\n  function onCropComplete(crop) {\n    const canvas = document.createElement(\"canvas\");\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = imgRef.current.naturalWidth / imgRef.current.width;\n    const scaleY = imgRef.current.naturalHeight / imgRef.current.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n\n    ctx.drawImage(\n      imgRef.current,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n    );\n\n    canvas.toBlob(\n      (blob) => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        setBlob(blob);\n      },\n      \"image/jpeg\",\n      1\n    );\n  }\n\n  return (\n    <Dialog onClose={() => {}} open={open}>\n      <Box>\n        <DialogTitle\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          Change Image\n          <IconButton\n            onClick={() => {\n              setImgSrc(\"\");\n              setOpen(false);\n            }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <Box sx={{ typography: \"body1\", padding: 1 }}>\n          <Box style={{ width: \"400px\" }}>\n            {!imgSrc && (\n              <Box\n                style={{\n                  height: \"200px\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <input\n                  type=\"file\"\n                  ref={fileRef}\n                  style={{ display: \"none\" }}\n                  accept=\"image/*\"\n                  onChange={onSelectFile}\n                />\n                <Button onClick={() => fileRef.current.click()}>Upload</Button>\n              </Box>\n            )}\n            {!!imgSrc && (\n              <Box>\n                <ReactCrop\n                  crop={crop}\n                  onChange={(_, percentCrop) => setCrop(percentCrop)}\n                  onComplete={onCropComplete}\n                  minWidth={100}\n                  minHeight={100}\n                >\n                  <img\n                    style={{ width: \"400px\", height: \"auto\" }}\n                    ref={imgRef}\n                    alt=\"Crop me\"\n                    src={imgSrc}\n                    onLoad={onImageLoad}\n                  />\n                </ReactCrop>\n                <Box style={{ display: \"flex\" }}>\n                  <Button onClick={onSave} style={{ marginLeft: \"auto\" }}>\n                    Save\n                  </Button>\n                </Box>\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </Box>\n    </Dialog>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Button } from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport TextField from \"@mui/material/TextField\";\nimport { useStoreState } from \"../../store\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { httpWithAuth } from \"../../http\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport ChageImage from \"./ChangeImage\";\nimport defUserImage from \"../../assets/images/def-ava.png\";\n\ntype TProps = {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  user: any;\n};\n\nexport default function EditProfileModal({ open, setOpen, user }: TProps) {\n  const [change, setChange] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const setUser = useStoreState((state) => state.setUser);\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      description: user.description ? user.description : \"\",\n      isProfileOpen: user.isProfileOpen,\n      isAssetsOpen: user.isAssetsOpen,\n    },\n    validate: (values) => {\n      const errors: Record<string, string> = {};\n\n      if (!values.firstName) {\n        errors.firstName = \"Required\";\n      }\n\n      if (!values.lastName) {\n        errors.lastName = \"Required\";\n      }\n\n      return errors;\n    },\n    onSubmit: (values) => {\n      const fd = new FormData();\n      fd.append(\"firstName\", values.firstName);\n      fd.append(\"lastName\", values.lastName);\n\n      if (values.description) {\n        fd.append(\"description\", values.description);\n      }\n\n      fd.append(\"isProfileOpen\", values.isProfileOpen);\n      fd.append(\"isAssetsOpen\", values.isAssetsOpen);\n      setLoading(true);\n      httpWithAuth()\n        .put(\"/users\", fd)\n        .then((response) => {\n          const respUser = response.data.user;\n          setUser({\n            ...user,\n            firstName: respUser.firstName,\n            lastName: respUser.lastName,\n            description: respUser.description,\n            isProfileOpen: respUser.isProfileOpen,\n            isAssetsOpen: respUser.isAssetsOpen,\n          });\n          setOpen(false);\n        })\n        .finally(() => setLoading(false));\n    },\n  });\n\n  return (\n    <Dialog onClose={() => {}} open={open}>\n      <Box>\n        <DialogTitle\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          Edit Profile\n          <IconButton onClick={() => setOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <Box sx={{ width: \"100%\", typography: \"body1\", padding: 1 }}>\n          <Box style={{ display: \"flex\" }}>\n            <Box\n              sx={{ marginRight: \"10px\" }}\n              style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n              <img\n                style={{ width: \"150px\", borderRadius: \"10px\" }}\n                alt=\"\"\n                src={user.profileImage ? user.profileImage : defUserImage}\n              />\n              <a\n                href=\"/\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  setChange(true);\n                }}\n              >\n                change image\n              </a>\n            </Box>\n            <Box>\n              <form\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n                onSubmit={formik.handleSubmit}\n              >\n                <TextField\n                  margin=\"dense\"\n                  label=\"First Name\"\n                  name=\"firstName\"\n                  variant=\"standard\"\n                  error={\n                    formik.touched.firstName && formik.errors.firstName\n                      ? true\n                      : false\n                  }\n                  helperText={\n                    formik.touched.firstName && formik.errors.firstName\n                      ? (formik.errors.firstName as string)\n                      : \"\"\n                  }\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.firstName}\n                />\n                <TextField\n                  margin=\"dense\"\n                  label=\"Last Name\"\n                  name=\"lastName\"\n                  variant=\"standard\"\n                  error={\n                    formik.touched.lastName && formik.errors.lastName\n                      ? true\n                      : false\n                  }\n                  helperText={\n                    formik.touched.lastName && formik.errors.lastName\n                      ? (formik.errors.lastName as string)\n                      : \"\"\n                  }\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.lastName}\n                />\n                <TextField\n                  margin=\"dense\"\n                  label=\"Profile Description\"\n                  name=\"description\"\n                  variant=\"standard\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.description}\n                />\n                <FormControlLabel\n                  checked={formik.values.isProfileOpen}\n                  name=\"isProfileOpen\"\n                  control={\n                    <Checkbox\n                      onChange={(e) => {\n                        formik.setFieldValue(\"isProfileOpen\", e.target.checked);\n                      }}\n                    />\n                  }\n                  label=\"Is Profile Open\"\n                  labelPlacement=\"end\"\n                />\n                <FormControlLabel\n                  checked={formik.values.isAssetsOpen}\n                  name=\"isAssetsOpen\"\n                  control={\n                    <Checkbox\n                      onChange={(e) => {\n                        formik.setFieldValue(\"isAssetsOpen\", e.target.checked);\n                      }}\n                    />\n                  }\n                  label=\"Is Assets Open\"\n                  labelPlacement=\"end\"\n                />\n                <LoadingButton\n                  type=\"submit\"\n                  loading={loading}\n                  variant=\"contained\"\n                >\n                  Save\n                </LoadingButton>\n              </form>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n      {change && <ChageImage open={change} setOpen={setChange} />}\n    </Dialog>\n  );\n}\n","import * as React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Card from \"@mui/material/Card\";\nimport Box from \"@mui/material/Box\";\nimport { TProfile } from \"./types\";\nimport defUserImage from \"../../assets/images/def-ava.png\";\nimport { useStoreState } from \"../../store\";\nimport EditProfileModal from \"./EditProfileModal\";\nimport {Button} from \"@mui/material\";\nimport {createPrivateChat} from \"../../helpers/chat/createPrivateChat\";\nimport xmpp from \"../../xmpp\";\nimport {useHistory} from \"react-router-dom\";\n\ntype TProps = {\n  profile?: TProfile;\n  walletAddress?: string\n};\n\nexport default function UserCard({ profile, walletAddress }: TProps) {\n  const [edit, setEdit] = React.useState(false);\n  const user = useStoreState((state) => state.user);\n    const history = useHistory();\n    const openDirectChat = () => {\n      createPrivateChat(\n          user.walletAddress,\n          walletAddress,\n          user.firstName,\n          profile.firstName,\n          '@conference.dev.dxmpp.com',\n      ).then(result => {\n          xmpp.getRooms();\n          useStoreState.getState().setCurrentUntrackedChatRoom(result.roomJid);\n          history.push(\"/chat/\"+result.roomJid);\n      }).catch(error => {\n          console.log(\"openPrivateRoom Error: \", error);\n      })\n  }\n  if (profile) {\n    return (\n      <Box style={{ marginTop: \"10px\", marginRight: \"10px\" }}>\n        <Card\n          sx={{\n            display: \"flex\",\n            padding: \"10px\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            width: \"100%\",\n          }}\n        >\n          <Box sx={{ marginRight: \"10px\" }}>\n            {!!profile.firstName && (\n              <img\n                style={{ width: \"150px\", borderRadius: \"10px\" }}\n                alt=\"\"\n                src={profile.profileImage || defUserImage}\n              />\n            )}\n          </Box>\n          <Box>\n            <Box sx={{ fontWeight: \"bold\" }}>\n              {profile?.firstName} {profile?.lastName}\n            </Box>\n            {profile?.description && (\n              <Box>Description: {profile?.description}</Box>\n            )}\n            <Button onClick={openDirectChat} variant=\"contained\" size=\"small\">Direct message</Button>\n          </Box>\n        </Card>\n      </Box>\n    );\n  }\n  return (\n    <Box style={{ marginTop: \"10px\", marginRight: \"10px\" }}>\n      <Card\n        sx={{\n          display: \"flex\",\n          padding: \"10px\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          width: \"100%\",\n        }}\n      >\n        <Box sx={{ marginRight: \"10px\" }}>\n          <img\n            style={{ width: \"150px\", borderRadius: \"10px\" }}\n            alt=\"\"\n            src={user.profileImage || defUserImage}\n          />\n        </Box>\n        <Box>\n          {!!user.firstName && (\n            <>\n              <Box sx={{ fontWeight: \"bold\" }}>\n                {user?.firstName} {user?.lastName}\n              </Box>\n              {user?.description && <Box>Description: {user?.description}</Box>}\n            </>\n          )}\n        </Box>\n        {user.firstName && (\n          <a\n            href=\"/\"\n            onClick={(e) => {\n              e.preventDefault();\n              setEdit(true);\n            }}\n          >\n            Edit\n          </a>\n        )}\n      </Card>\n      {edit && <EditProfileModal open={edit} setOpen={setEdit} user={user} />}\n    </Box>\n  );\n}\n","export const NFMT_TYPES: Record<string, { type: string; color: string }> = {\n  \"1\": { type: \"free\", color: \"chocolate\" },\n  \"2\": { type: \"silver\", color: \"grey\" },\n  \"3\": { type: \"gold\", color: \"orange\" },\n};\n\nexport const NFMT_TRAITS: Record<string, { color: string }> = {\n  Free: { color: \"blue\" },\n  Silver: { color: \"grey\" },\n  Gold: { color: \"orange\" },\n  Bronze: { color: \"chocolate\" },\n  Rare: { color: \"lightgreen\" },\n  \"Unique!\": { color: \"black\" },\n};\n","import React from \"react\";\n\nimport { TBalance } from \"../../store\";\nimport {\n  Avatar,\n  Chip,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  ListItemText,\n  useTheme,\n  Box,\n} from \"@mui/material\";\nimport { produceNfmtItems } from \"../../utils\";\nimport { NFMT_TRAITS } from \"../../constants\";\nimport { useHistory } from \"react-router\";\n\nconst NftItem = ({\n  item,\n  walletAddress,\n}: {\n  item: TBalance;\n  walletAddress: string;\n}) => {\n  const theme = useTheme();\n  const history = useHistory();\n  const onItemClick = () => {\n    history.push({\n      pathname: \"/provenance\",\n      state: { nftItem: item, walletAddress },\n    });\n  };\n  return (\n    <ListItem key={item.nftId}>\n      <ListItemButton onClick={onItemClick}>\n        <ListItemAvatar>\n          <Avatar\n            style={{ backgroundColor: theme.palette.primary.main }}\n            src={item.imagePreview}\n          />\n        </ListItemAvatar>\n        <ListItemText primary={item.tokenName} />\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <span style={{ textAlign: \"left\", width: 50 }}>\n            {item.balance}/{item.total}\n          </span>\n        </Box>\n      </ListItemButton>\n    </ListItem>\n  );\n};\nconst NfmtItem = ({\n  item,\n  walletAddress,\n}: {\n  item: TBalance;\n  walletAddress: string;\n}) => {\n  const theme = useTheme();\n  const history = useHistory();\n  const onItemClick = () => {\n    history.push({\n      pathname: \"/provenance\",\n      state: { nftItem: item, walletAddress },\n    });\n  };\n  return (\n    <ListItem key={item.nftId}>\n      <ListItemButton onClick={onItemClick}>\n        <ListItemAvatar>\n          <Avatar\n            style={{ backgroundColor: theme.palette.primary.main }}\n            src={item.nftFileUrl}\n          />\n        </ListItemAvatar>\n        <ListItemText primary={item.tokenName} />\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n          }}\n        >\n          <Box\n            sx={{\n              // marginRight: \"10px\",\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              alignItems: \"center\",\n            }}\n          >\n            {item.traits.map((trait) => {\n              return (\n                <Chip\n                  sx={{\n                    backgroundColor: NFMT_TRAITS[trait].color,\n                    marginRight: \"5px\",\n                  }}\n                  label={trait}\n                  key={trait}\n                />\n              );\n            })}\n          </Box>\n          <span style={{ textAlign: \"left\", width: 50 }}>\n            {item.balance}/{item.total}\n          </span>\n        </Box>\n      </ListItemButton>\n    </ListItem>\n  );\n};\n\nexport default function ItemsTable({\n  balance,\n  walletAddress,\n}: {\n  balance: TBalance[];\n  walletAddress: string;\n}) {\n  const nftItems = balance.filter((item) => item.tokenType === \"NFT\");\n  const nfmtItems = produceNfmtItems(balance);\n  return (\n    <List sx={{ width: \"100%\", bgcolor: \"background.paper\" }}>\n      {nftItems.map((item, i) => {\n        return (\n          <NftItem walletAddress={walletAddress} item={item} key={item.nftId} />\n        );\n      })}\n      {nfmtItems.map((item, i) => {\n        return (\n          <NfmtItem\n            walletAddress={walletAddress}\n            item={item}\n            key={item.nftId + i}\n          />\n        );\n      })}\n    </List>\n  );\n}\n","import * as React from \"react\";\n\nimport { Box } from \"@mui/system\";\nimport * as http from \"../../http\";\n\nimport QrCodeIcon from \"@mui/icons-material/QrCode\";\nimport {\n  Avatar,\n  Chip,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  ListItemText,\n  useTheme,\n} from \"@mui/material\";\nimport { format } from \"date-fns\";\nimport { useHistory } from \"react-router\";\n\nconst DocumentItem = ({\n  item,\n  walletAddress,\n}: {\n  item: http.IDocument;\n  walletAddress: string;\n}) => {\n  const theme = useTheme();\n  const history = useHistory();\n  const onItemClick = () => {\n    history.push({\n      pathname: \"/provenance\",\n      state: { nftItem: item, walletAddress },\n    });\n  };\n  return (\n    <ListItem key={item._id}>\n      <ListItemButton onClick={onItemClick}>\n        <ListItemAvatar>\n          <Avatar\n            style={{ backgroundColor: theme.palette.primary.main }}\n            src={item?.file?.locationPreview || item?.location}\n          />\n        </ListItemAvatar>\n        <ListItemText\n          primary={item.documentName}\n          secondary={format(new Date(item.createdAt), \"pp PP\")}\n        />\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <IconButton sx={{ color: \"black\" }}>\n            <QrCodeIcon />\n          </IconButton>\n        </Box>\n      </ListItemButton>\n    </ListItem>\n  );\n};\n\nexport default function DocumentsTable({\n  documents,\n  walletAddress,\n}: {\n  documents: http.IDocument[];\n  walletAddress: string;\n}) {\n  return (\n    <List sx={{ width: \"100%\", bgcolor: \"background.paper\" }}>\n      {documents.map((item) => {\n        return (\n          <DocumentItem\n            walletAddress={walletAddress}\n            item={item}\n            key={item._id}\n          />\n        );\n      })}\n    </List>\n  );\n}\n","import * as React from \"react\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { IconButton } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport TextField from \"@mui/material/TextField\";\nimport { useFormik } from \"formik\";\nimport * as http from \"../../http\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\n\ntype TProps = {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  setDocuments: (Document: Object) => void;\n};\n\nexport default function DocumentsCreateModal(props: TProps) {\n  const [loading, setLoading] = React.useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      documentName: \"\",\n      file: null,\n    },\n    validate: (values) => {\n      const errors: Record<string, string> = {};\n\n      if (!values.documentName) {\n        errors.documentName = \"Required\";\n      }\n\n      if (!values.file) {\n        errors.file = \"Required\";\n      }\n\n      return errors;\n    },\n    onSubmit: async (values) => {\n      setLoading(true);\n      try {\n        console.log(values);\n        const fd = new FormData();\n        fd.append(\"files\", values.file);\n        const fileUploadResp = await http.httpWithAuth().post(\"/files\", fd);\n        const fileLocation = fileUploadResp.data.results[0].location;\n        const documentUploadRest = await http.httpWithAuth().post(\"/docs\", {\n          documentName: values.documentName,\n          files: [fileLocation],\n        });\n        props.setDocuments(documentUploadRest.data);\n        setLoading(false);\n        props.setOpen(false);\n      } catch (e) {\n        console.log(e);\n        setLoading(false);\n      }\n    },\n  });\n\n  return (\n    <Dialog onClose={() => {}} maxWidth={false} open={props.open}>\n      <Box style={{ width: \"400px\" }}>\n        <DialogTitle\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          Create New Document\n          <IconButton onClick={() => props.setOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <Box\n          sx={{\n            width: \"100%\",\n            typography: \"body1\",\n            padding: 1,\n          }}\n        >\n          <form style={{ flex: \"1\" }} onSubmit={formik.handleSubmit}>\n            <input\n              onChange={(e) => {\n                formik.setFieldValue(\"file\", e.target.files[0]);\n              }}\n              type=\"file\"\n            />\n            {formik.touched.file && formik.errors.file ? (\n              <FormHelperText error>\n                {formik.errors.file as string}\n              </FormHelperText>\n            ) : null}\n            <TextField\n              margin=\"dense\"\n              inputProps={{\n                autoComplete: \"off\",\n              }}\n              label=\"Document Name\"\n              name=\"documentName\"\n              type=\"text\"\n              fullWidth\n              variant=\"standard\"\n              onChange={(e) => {\n                formik.handleChange(e);\n              }}\n              onBlur={formik.handleBlur}\n              error={\n                formik.touched.documentName &&\n                Boolean(formik.errors.documentName)\n              }\n              helperText={\n                formik.touched.documentName && formik.errors.documentName\n                  ? formik.errors.documentName\n                  : \"\"\n              }\n            />\n            <Box sx={{ margin: 2, display: \"flex\", justifyContent: \"center\" }}>\n              <LoadingButton\n                loading={loading}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Create\n              </LoadingButton>\n            </Box>\n          </form>\n        </Box>\n      </Box>\n    </Dialog>\n  );\n}\n","import * as React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { Box } from \"@mui/system\";\nimport { IconButton } from \"@mui/material\";\nimport { Button, NativeSelect } from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { useFormik } from \"formik\";\nimport * as http from \"../../http\";\nimport { useStoreState } from \"../../store\";\n\ntype Props = {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function NewItemModal(props: Props) {\n  const [preview, setPreview] = React.useState<any>(null);\n  const [fileError, setFileError] = React.useState(\"\");\n  const [file, setFile] = React.useState<File | null>(null);\n  const [loading, setLoading] = React.useState(false);\n\n  const setBalance = useStoreState((state) => state.setBalance);\n  const user = useStoreState((state) => state.user);\n\n  const fileRef = React.useRef<HTMLInputElement>(null);\n\n  const onImage = (event: any) => {\n    const input = event.target as HTMLInputElement;\n\n    if (input.files) {\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        if (e) {\n          if (e.target?.result) {\n            setPreview(e.target.result);\n          }\n        }\n      };\n      setFileError(\"\");\n      setFile(input.files[0]);\n      reader.readAsDataURL(input.files[0]);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      tokenName: \"\",\n      rarity: \"1\",\n    },\n    validate: (values: Record<string, string>) => {\n      const errors: Record<string, string> = {};\n\n      if (!values.tokenName) {\n        errors.tokenName = \"Required\";\n      }\n\n      return errors;\n    },\n    onSubmit: async (values) => {\n      if (!file) {\n        setFileError(\"required\");\n        return;\n      }\n\n      const fd = new FormData();\n      fd.append(\"files\", file);\n\n      setLoading(true);\n      http\n        .uploadFile(fd)\n        .then(async (res) => {\n          await http.nftDeploy(\n            values.tokenName,\n            res.data.results[0]._id,\n            values.rarity\n          );\n          const balanceResp = await http.getBalance(user.walletAddress);\n          setBalance(balanceResp.data.balance);\n          props.setOpen(false);\n        })\n        .finally(() => setLoading(false));\n    },\n  });\n\n  return (\n    <Dialog onClose={() => {}} maxWidth={false} open={props.open}>\n      <Box style={{ width: \"400px\" }}>\n        <DialogTitle\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          Create new Item Token\n          <IconButton\n            onClick={() => {\n              props.setOpen(false);\n            }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <Box\n          sx={{\n            width: \"100%\",\n            typography: \"body1\",\n            padding: 1,\n            display: \"flex\",\n          }}\n        >\n          <Box style={{ flex: \"1\", padding: \"5px\", marginBottom: \"10px\" }}>\n            <Box\n              style={{\n                padding: \"10px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"end\",\n                border: \"1px solid gray\",\n                borderRadius: \"10px\",\n                height: \"100%\",\n                backgroundImage: preview ? `url(${preview})` : \"none\",\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                backgroundRepeat: \"no-repeat\",\n              }}\n            >\n              <input\n                onChange={onImage}\n                ref={fileRef}\n                type=\"file\"\n                accept=\"image/*\"\n                style={{ display: \"none\" }}\n              ></input>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => fileRef.current?.click()}\n              >\n                upload image\n              </Button>\n              {fileError ? (\n                <Box style={{ color: \"red\" }}>File is required</Box>\n              ) : null}\n            </Box>\n          </Box>\n          <form style={{ flex: \"1\" }} onSubmit={formik.handleSubmit}>\n            <TextField\n              margin=\"dense\"\n              inputProps={{\n                autoComplete: \"off\",\n              }}\n              label=\"Token Name\"\n              name=\"tokenName\"\n              type=\"text\"\n              fullWidth\n              variant=\"standard\"\n              onChange={(e) => {\n                formik.handleChange(e);\n              }}\n              onBlur={formik.handleBlur}\n              error={\n                formik.touched.tokenName && Boolean(formik.errors.tokenName)\n              }\n              helperText={\n                formik.touched.tokenName && formik.errors.tokenName\n                  ? formik.errors.tokenName\n                  : \"\"\n              }\n            />\n            <FormControl fullWidth>\n              <InputLabel variant=\"standard\" htmlFor=\"uncontrolled-native\">\n                Rarity\n              </InputLabel>\n              <NativeSelect\n                inputProps={{\n                  name: \"rarity\",\n                  id: \"uncontrolled-native\",\n                }}\n                onChange={(e) => {\n                  console.log(e);\n                  formik.handleChange(e);\n                }}\n              >\n                <option value={1}>1</option>\n                <option value={2}>2</option>\n                <option value={3}>3</option>\n              </NativeSelect>\n            </FormControl>\n            <Box sx={{ margin: 2, display: \"flex\", justifyContent: \"center\" }}>\n              <LoadingButton\n                loading={loading}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Create\n              </LoadingButton>\n            </Box>\n          </form>\n        </Box>\n      </Box>\n    </Dialog>\n  );\n}\n","import { gql } from \"@apollo/client\";\n\nexport const COUNT = gql`\n  subscription Count {\n    count\n  }\n`;\n\nexport const TRRANSFER_TO_SUBSCRIPTION = gql`\n  subscription onTransferTo(\n    $walletAddress: String!\n    $contractAddress: String!\n  ) {\n    transferTo(\n      walletAddress: $walletAddress\n      contractAddress: $contractAddress\n    ) {\n      amount\n      senderLastName\n      senderFirstName\n    }\n  }\n`;\n","import * as React from \"react\";\nimport { useSubscription } from \"@apollo/client\";\nimport { TRRANSFER_TO_SUBSCRIPTION } from \"../apollo/subscription\";\nimport { useStoreState } from \"../store\";\n\nimport Button from \"@mui/material/Button\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\ntype Props = {};\n\nfunction Subscription({}: Props) {\n  const [open, setOpen] = React.useState(false);\n  const user = useStoreState((state) => state.user);\n  const dptBalance = useStoreState((state) =>\n    state.balance.find((el) => el.tokenName === \"Dappros Platform Token\")\n  );\n  const { data, loading } = useSubscription(TRRANSFER_TO_SUBSCRIPTION, {\n    variables: {\n      walletAddress: user.walletAddress,\n      contractAddress: dptBalance.contractAddress,\n    },\n  });\n\n  React.useEffect(() => {\n    if (data) {\n      setOpen(true);\n      console.log(data);\n      setTimeout(() => {\n        setOpen(false);\n      }, 1000);\n    }\n  }, [data, loading]);\n\n  return (\n    <div>\n      {open && (\n        <Snackbar\n          open={true}\n          message={`You get coinst ${data.transferTo.amount}`}\n        />\n      )}\n      ;\n    </div>\n  );\n}\n\nexport default Subscription;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport { ExplorerRespose, ITransaction, TProfile } from \"./types\";\nimport UserCard from \"./UserCard\";\nimport { getPublicProfile, getTransactions, getBalance } from \"../../http\";\nimport { useStoreState } from \"../../store\";\nimport ItemsTable from \"./ItemsTable\";\nimport { Transactions } from \"../Transactions/Transactions\";\nimport { Typography } from \"@mui/material\";\nimport DocumentsTable from \"./DocumentsTable\";\nimport { FullPageSpinner } from \"../../componets/FullPageSpinner\";\nimport { filterNftBalances } from \"../../utils\";\nimport DocumentsCreateModal from \"./DocumentsCreateModal\";\nimport NewItemModal from \"./NewItemModal\";\nimport Subscription from \"../../componets/Subscription\";\n\nconst styles = {\n  craeteNewLink: {\n    textDecoration: \"none\",\n    color: \"inherit\",\n    fontSize: \"14px\",\n  },\n};\n\nexport function MyProfile() {\n  const [loading, setLoading] = useState(false);\n  const [transactions, setTransactions] =\n    useState<ExplorerRespose<ITransaction[]>>();\n  const user = useStoreState((store) => store.user);\n  const items = useStoreState((state) => state.balance);\n  const documents = useStoreState((state) => state.documents);\n  const [showCreateDocument, setShowCreateDocument] = useState(false);\n  const [showCreateNewItem, setShowCreateNewItem] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getTransactions(user.walletAddress)\n      .then((result) => {\n        setTransactions(result.data);\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  if (loading) return <FullPageSpinner />;\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 80px)\" }}>\n      <Subscription></Subscription>\n      <Box sx={{ margin: \"auto\", width: \"200px\" }}>\n        <UserCard />\n      </Box>\n      <Typography\n        variant=\"h6\"\n        style={{\n          margin: \"16px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <span>Items</span>\n        <a\n          href=\"/\"\n          style={styles.craeteNewLink}\n          onClick={(e) => {\n            e.preventDefault();\n            setShowCreateNewItem(true);\n          }}\n        >\n          Create New Item\n        </a>\n      </Typography>\n      <ItemsTable\n        balance={items.filter(filterNftBalances)}\n        walletAddress={user.walletAddress}\n      />\n      {!!documents.length && (\n        <>\n          <Typography\n            variant=\"h6\"\n            style={{\n              margin: \"16px\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <span>Documents</span>\n            <a\n              href=\"/\"\n              style={styles.craeteNewLink}\n              onClick={(e) => {\n                e.preventDefault();\n                setShowCreateDocument(true);\n              }}\n            >\n              Create New Document\n            </a>\n          </Typography>\n          <DocumentsTable\n            walletAddress={user.walletAddress}\n            documents={documents}\n          />\n        </>\n      )}\n\n      {!!transactions && (\n        <Box>\n          <Typography variant=\"h6\" style={{ margin: \"16px\" }}>\n            Transactions\n          </Typography>\n          <Transactions transactions={transactions.items} />\n        </Box>\n      )}\n\n      {showCreateDocument && (\n        <DocumentsCreateModal\n          open={showCreateDocument}\n          setOpen={setShowCreateDocument}\n          setDocuments={() => {}}\n        />\n      )}\n\n      {showCreateNewItem && (\n        <NewItemModal open={showCreateNewItem} setOpen={setShowCreateNewItem} />\n      )}\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport { ExplorerRespose, ITransaction, TProfile } from \"./types\";\nimport UserCard from \"./UserCard\";\nimport {\n  getPublicProfile,\n  getTransactions,\n  getBalance,\n  IDocument,\n} from \"../../http\";\nimport { Transactions } from \"../Transactions/Transactions\";\nimport { FullPageSpinner } from \"../../componets/FullPageSpinner\";\nimport ItemsTable from \"./ItemsTable\";\nimport { filterNftBalances } from \"../../utils\";\nimport { TBalance } from \"../../store\";\nimport { Typography } from \"@mui/material\";\nimport DocumentsTable from \"./DocumentsTable\";\nimport * as http from \"../../http\";\n\ntype TProps = {\n  walletAddress: string;\n};\n\nexport function OtherProfile(props: TProps) {\n  const [loading, setLoading] = useState(true);\n  const [profile, setProfile] = useState<TProfile>();\n  const [transactions, setTransactions] =\n    useState<ExplorerRespose<ITransaction[]>>();\n  const [balances, setBalances] = useState<TBalance[]>([]);\n  const [documents, setDocuments] = useState<IDocument[]>([]);\n  const getDocuments = async (documents: IDocument[]) => {\n    const mappedDocuments = [];\n    for (const item of documents) {\n      try {\n        // const { data: file } = await http\n        //   .httpWithAuth()\n        //   .get<http.IFile>(\"/files/\" + item.files[0]);\n        // item.file = file;\n        item.location = item.locations[0]\n        mappedDocuments.push(item);\n      } catch (error) {\n        console.log( item.files[0],\"sdjfkls\");\n      }\n    }\n    setDocuments(mappedDocuments);\n  };\n  useEffect(() => {\n    setLoading(true);\n    getPublicProfile(props.walletAddress).then((result) => {\n      setProfile(result.data);\n      setBalances(result.data.balances.balance);\n      getDocuments(result.data.documents);\n    });\n    // .finally(() => setLoading(false));\n    setLoading(false);\n    getTransactions(props.walletAddress).then((result) => {\n      setTransactions(result.data);\n    });\n  }, []);\n\n  if (loading) {\n    return <FullPageSpinner />;\n  }\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 80px)\" }}>\n      <Box>\n        {!!profile?.firstName && (\n          <Box sx={{ width: \"200px\", margin: \"auto\", padding: \"10px\" }}>\n            <UserCard profile={profile} walletAddress={props.walletAddress} />\n          </Box>\n        )}\n        {!!balances.filter(filterNftBalances).length && (\n          <>\n            <Typography variant=\"h6\" style={{ margin: \"16px\" }}>\n              Items\n            </Typography>\n            <ItemsTable\n              balance={balances.filter(filterNftBalances)}\n              walletAddress={props.walletAddress}\n            />\n          </>\n        )}\n      </Box>\n      {!!documents.length && (\n        <>\n          <Typography variant=\"h6\" style={{ margin: \"16px\" }}>\n            Documents\n          </Typography>\n          <DocumentsTable\n            walletAddress={props.walletAddress}\n            documents={documents}\n          />\n        </>\n      )}\n      {!!transactions && (\n        <>\n          <Typography variant=\"h6\" style={{ margin: \"16px\" }}>\n            Transactions\n          </Typography>\n          <Transactions transactions={transactions.items} />\n        </>\n      )}\n      {/* <DocumentsTable walletAddress={props.walletAddress} /> */}\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { useStoreState } from \"../../store\";\nimport { useParams } from \"react-router-dom\";\nimport { MyProfile } from \"./MyProfile\";\nimport { OtherProfile } from \"./OtherProfile\";\n\nexport default function Profile() {\n  const user = useStoreState((state) => state.user);\n  const params: { wallet: string } = useParams();\n\n  if (user.walletAddress === params.wallet) {\n    return <MyProfile />;\n  } else {\n    return <OtherProfile walletAddress={params.wallet} />;\n  }\n}\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","CONFERENCEDOMAIN","userJID","combinedWalletAddress","sort","join","roomJid","combinedUsersName","xmpp","roomName","setTimeout","ChangeImage","open","setOpen","user","useStoreState","state","setUser","fileRef","useRef","useState","imgSrc","setImgSrc","imgRef","crop","setCrop","blob","setBlob","Dialog","onClose","Box","DialogTitle","style","display","justifyContent","IconButton","onClick","Close","sx","typography","padding","width","height","alignItems","type","ref","accept","onChange","e","target","files","length","reader","FileReader","addEventListener","result","toString","readAsDataURL","Button","current","click","_","percentCrop","onComplete","canvas","document","createElement","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","x","y","toBlob","console","error","minWidth","minHeight","alt","src","onLoad","currentTarget","mediaWidth","mediaHeight","aspect","centerCrop","makeAspectCrop","unit","centerAspectCrop","form","FormData","append","http","then","response","profileImage","data","catch","log","marginLeft","EditProfileModal","change","setChange","loading","setLoading","formik","useFormik","initialValues","firstName","lastName","description","isProfileOpen","isAssetsOpen","validate","values","errors","onSubmit","fd","httpWithAuth","put","respUser","finally","marginRight","flexDirection","borderRadius","defUserImage","href","preventDefault","handleSubmit","TextField","margin","label","name","variant","touched","helperText","handleChange","onBlur","handleBlur","value","FormControlLabel","checked","control","Checkbox","setFieldValue","labelPlacement","LoadingButton","UserCard","profile","walletAddress","React","edit","setEdit","history","useHistory","marginTop","Card","fontWeight","setCurrentUntrackedChatRoom","push","size","NFMT_TRAITS","Free","color","Silver","Gold","Bronze","Rare","NftItem","item","theme","useTheme","ListItem","ListItemButton","pathname","nftItem","ListItemAvatar","Avatar","backgroundColor","palette","primary","main","imagePreview","ListItemText","tokenName","textAlign","balance","total","nftId","NfmtItem","nftFileUrl","traits","map","trait","Chip","ItemsTable","nftItems","filter","tokenType","nfmtItems","produceNfmtItems","List","bgcolor","i","DocumentItem","file","locationPreview","location","documentName","secondary","format","Date","createdAt","QrCode","_id","DocumentsTable","documents","DocumentsCreateModal","props","post","fileUploadResp","fileLocation","results","documentUploadRest","setDocuments","maxWidth","flex","FormHelperText","inputProps","autoComplete","fullWidth","Boolean","NewItemModal","preview","setPreview","fileError","setFileError","setFile","setBalance","rarity","res","balanceResp","marginBottom","border","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","event","input","onload","FormControl","InputLabel","htmlFor","NativeSelect","id","TRRANSFER_TO_SUBSCRIPTION","gql","dptBalance","find","el","useSubscription","variables","contractAddress","Snackbar","message","transferTo","amount","styles","craeteNewLink","textDecoration","fontSize","MyProfile","transactions","setTransactions","store","items","showCreateDocument","setShowCreateDocument","showCreateNewItem","setShowCreateNewItem","useEffect","getTransactions","FullPageSpinner","Container","Typography","filterNftBalances","Transactions","OtherProfile","setProfile","balances","setBalances","getDocuments","mappedDocuments","locations","getPublicProfile","Profile","params","useParams","wallet"],"sourceRoot":""}