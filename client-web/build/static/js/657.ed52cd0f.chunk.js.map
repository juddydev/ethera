{"version":3,"file":"static/js/657.ed52cd0f.chunk.js","mappings":"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","sources":["componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Message as KitMessage, MessageModel, Button, MessageSeparator } from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport { TMessageHistory } from \"../../../store\";\nimport {useHistory} from \"react-router\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel['position'];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string\n}\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n\n  useEffect(() => {\n    if(message.data.quickReplies){\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n  }, [])\n\n  return (\n  <div is={\"Message\"}>\n    {position.separator ?\n      <MessageSeparator>\n        {position.separator}\n      </MessageSeparator> : null\n    }\n    <KitMessage\n      key={message.key}\n      model={{\n        sender: firstName + \" \" + lastName,\n        direction: String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"outgoing\" : \"incoming\",\n        position: position.position,\n      }}\n      avatarPosition={String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"tr\" : \"tl\"}\n      avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n    >\n      {(position.type === \"first\" || position.type === \"single\") && (\n        <img\n          style={{\n            borderRadius: \"50%\",\n            boxSizing: \"border-box\",\n            width: \"42px\",\n            height: \"42px\",\n            cursor: \"pointer\"\n          }}\n          onClick={() => history.push(\"/profile/\"+message.data.senderWalletAddress)}\n          is={\"Avatar\"}\n          src={message.data.photoURL}\n          onError={({ currentTarget }) => {\n            currentTarget.onerror = null;\n            currentTarget.src =\n              \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\n          }}\n          alt={firstName}\n        />\n      )}\n\n      <KitMessage.CustomContent>\n        {(position.type === \"first\" || position.type === \"single\") && (\n          <strong style={{cursor: \"pointer\"}} onClick={() => history.push(\"/profile/\" + message.data.senderWalletAddress)}>\n            {firstName} {lastName}\n            <br />\n          </strong>\n        )}\n        {message.body}\n      </KitMessage.CustomContent>\n\n      {(position.type === \"last\" || position.type === \"single\") && (\n        <KitMessage.Footer\n          sentTime={\n            differenceInHours(new Date(), new Date(message.date)) > 5\n              ? format(new Date(message.date), \"h:mm:ss a\")\n              : formatDistance(subDays(new Date(message.date), 0), new Date(), {\n                  addSuffix: true,\n                })\n          }\n        />\n      )}\n    </KitMessage>\n        {buttons ?\n            <div style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"max-content\",\n              marginLeft: \"45px\"\n            }}>\n              {buttons.map((button, index) => {\n                return (\n                  <Button onClick={() => buttonSender(button)} key={index} border>{button.name}</Button>\n                );\n             })}\n            </div>\n          : null}\n  </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport { getPublicProfile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport {Message} from \"../../componets/Chat/Messages/Message\";\nimport {SystemMessage} from \"../../componets/Chat/Messages/SystemMessage\";\n\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID;\n  const nextJID = arr[index + 1]?.data.senderJID;\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if(arr[index - 1] && message){\n    if(format(new Date(arr[index - 1]?.date), \"dd\") !== format(new Date(message.date), \"dd\")){\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID !== currentJID) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState((store) => store.currentUntrackedChatRoom);\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n\n  const onYReachStart = () => {\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n      )[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const chooseRoom = (jid: string) => {\n    setCurrentRoom(jid);\n    setRoomData(useChatRooms.filter((e) => e.jid === jid)[0]);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n\n    if (!loaderArchive && filteredMessages.length <= 10) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 10);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\n      return format(new Date(messagesInRoom[0].date), \"hh:mm\");\n    } else {\n      return formatDistance(\n        subDays(new Date(messagesInRoom[0].date), 0),\n        new Date(),\n        { addSuffix: true }\n      );\n    }\n  };\n\n  const sendMessage = (button: any) => {\n    let userAvatar = \"\";\n    if (profile?.profileImage) {\n      userAvatar = profile?.profileImage;\n    }\n\n    xmpp.sendMessage(\n      currentRoom,\n      user.firstName,\n      user.lastName,\n      userAvatar,\n      user.walletAddress,\n      typeof button === 'object' ? button.value : myMessage,\n        typeof button === 'object' ? button.notDisplayedValue : null\n    );\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(user.walletAddress, roomData.jid, user.firstName+\" \"+user.lastName);\n  }\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid)\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if(currentUntrackedChatRoom){\n      chooseRoom(currentUntrackedChatRoom);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    }\n\n    window.onfocus = () => {\n      if(currentRoom){\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    }\n  }, [currentRoom])\n\n  return (\n    <Box style={{ height: \"500px\" }}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {useChatRooms.map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_background !== \"none\"\n                      ? room.room_background\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <ChatContainer>\n          {!!roomData.name && (\n            <ConversationHeader>\n              <ConversationHeader.Back />\n              {messages.filter((item: any) => item.roomJID === currentRoom)\n                .length > 0 && (\n                <ConversationHeader.Content\n                  userName={roomData.name}\n                  info={\n                    \"Active \" +\n                    formatDistance(\n                      subDays(\n                        new Date(\n                          messages\n                            .filter((item: any) => item.roomJID === currentRoom)\n                            .slice(-1)[0].date\n                        ),\n                        0\n                      ),\n                      new Date(),\n                      { addSuffix: true }\n                    )\n                  }\n                />\n              )}\n              <ConversationHeader.Actions>\n                <BookmarkRemoveIcon />\n              </ConversationHeader.Actions>\n            </ConversationHeader>\n          )}\n          <MessageList\n            loadingMore={loaderArchive}\n            onYReachStart={onYReachStart}\n            typingIndicator={\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                ?.composing && (\n                <TypingIndicator\n                  content={\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                      ?.composing\n                  }\n                />\n              )\n            }\n          >\n            {messages\n              .filter((item: any) => item.roomJID === currentRoom)\n              .map((message, index, arr) => {\n                const position = getPosition(arr, message, index);\n                if(message.data.isSystemMessage === \"false\") {\n                  return (\n                      <Message\n                          key={message.id}\n                          is={\"Message\"}\n                          position={position}\n                          message={message}\n                          userJid={xmpp.client?.jid?.toString()}\n                          buttonSender={sendMessage}\n                      />\n                  );\n                }else{\n                  return (\n                      <SystemMessage\n                          is={\"Message\"}\n                          message={message}\n                          userJid={xmpp.client?.jid?.toString()}\n                      />\n                  );\n                }\n              })}\n            {messages.length <= 0 ||\n              (!currentRoom && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  {!loaderArchive ? (\n                    <span>\n                      {!currentRoom &&\n                        \"To get started, please select a chat room.\"}\n                    </span>\n                  ) : (\n                    \"Loading...\"\n                  )}\n                </MessageList.Content>\n              ))}\n            {!loaderArchive &&\n              currentRoom &&\n              messages.filter((item: any) => item.roomJID === currentRoom)\n                .length <= 0 && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  Message list is empty\n                </MessageList.Content>\n              )}\n          </MessageList>\n          {!!roomData.name && (\n            <MessageInput\n              placeholder=\"Type message here\"\n              onChange={setMessage}\n              onSend={sendMessage}\n            />\n          )}\n        </ChatContainer>\n      </MainContainer>\n    </Box>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport { useStoreState } from \"../../store\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n    const user = useStoreState((state) => state.user);\n    const messages = useStoreState((state) => state.messages);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!user.firstName) {\n            history.push(\"/\");\n        }\n    }, [user.firstName, history]);\n    return (\n        <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n            <Box>Chat</Box>\n            <Box>{messages.length}</Box>\n            <ChatInRoom />\n        </Container>\n    );\n}\n"],"names":["Message","message","userJid","position","buttonSender","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","key","display","flexDirection","marginLeft","map","button","index","border","name","SystemMessage","textAlign","color","fontSize","fontFamily","ChatInRoom","messages","useStoreState","state","historyMessages","user","store","useChatRooms","userChatRooms","loaderArchive","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","jid","room_background","room_thumbnail","users_cnt","roomData","setRoomData","getPublicProfile","walletAddress","then","result","chooseRoom","filter","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","roomJID","length","lastMessageID","id","xmpp","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","userAvatar","profileImage","value","notDisplayedValue","timeoutId","setTimeout","clearTimeout","window","onblur","onfocus","Box","responsive","scrollable","placeholder","loading","room","active","unreadCnt","unreadMessages","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","typingIndicator","composing","content","arr","previousJID","nextJID","currentJID","getPosition","isSystemMessage","toString","justifyContent","onChange","onSend","Chat","Container","maxWidth"],"sourceRoot":""}