{"version":3,"file":"static/js/657.c8302e10.chunk.js","mappings":"wLAGaA,EAAyB,SAACC,GACnC,OAAGA,EACQA,EAAIC,QAAQ,WAAY,OAAOC,cAE/B,uBAEf,EAEaC,EAAiB,yCAAG,WAC7BC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAgB,oFA8Bf,OA5BKC,EAAwB,CAACN,EAAiBC,GAC3CM,OACAC,KAAK,KAEJC,EAAUH,EAAsBR,cAAgBM,EAChDM,EAAoB,CAACR,EAAaC,GAAgBI,OAAOC,KAAK,SAE9DG,EAAmBC,EAAAA,EAAAA,WAAyBC,cAE9CC,GAAY,EACkD,IAA/DH,EAAiBI,QAAO,SAACC,GAAE,OAAKA,EAAGC,MAAQR,CAAO,IAAES,SACnDJ,GAAY,EACZK,EAAAA,GAAAA,cAAmBb,EAAsBR,eACzCqB,EAAAA,GAAAA,SAAcb,EAAsBR,eACpCqB,EAAAA,GAAAA,WACIb,EAAsBR,cACtB,CAACsB,SAAUV,IAEfS,EAAAA,GAAAA,SAAcV,GACdU,EAAAA,GAAAA,eAAoBV,GAEpBY,YAAW,WACPF,EAAAA,GAAAA,WACIxB,EAAuBK,GACvBS,EAAQX,cACRH,EAAuBM,GAE/B,GAAG,MACN,kBAEM,CAACQ,QAAAA,EAASW,SAAUV,EAAmBI,UAAAA,IAAU,2CAC3D,gBAvC6B,+C,2bC4CjBQ,EAA8B,SAAH,GAMjC,IALLC,EAAO,EAAPA,QACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAgB,EAAhBA,iBAEMC,EAAYL,EAAQM,KAAKC,gBACzBC,EAAWR,EAAQM,KAAKG,eACxBC,EAAaV,EAAQM,KAAKK,UAC1BC,GAAUC,EAAAA,EAAAA,MAChB,GAA8BC,EAAAA,EAAAA,YAAsB,eAA7CC,EAAO,KAAEC,EAAU,KAC1B,GAAoCF,EAAAA,EAAAA,WAAS,GAAM,eAA5CG,EAAU,KAAEC,EAAa,KAChC,EAAgCC,EAAAA,SAAmC,MAAK,eAAjEC,EAAQ,KAAEC,EAAW,KAC5B,GAA4CP,EAAAA,EAAAA,UAAkB,YAAW,eAAlEQ,EAAc,KAAEC,EAAiB,KACxC,GAAoCT,EAAAA,EAAAA,UAAS,IAAG,gBAAzCU,GAAU,MAAEC,GAAa,MAC1BC,GAAWC,QAAQP,GAIzB,IAAoCN,EAAAA,EAAAA,UAAS,GAAE,iBAAxCc,GAAU,MAAEC,GAAa,MAE1BC,IADUzC,EAAAA,EAAAA,IAAc,SAAC0C,GAAK,OAAKA,EAAMC,OAAO,IAC7BxC,QACvB,SAACC,GAAE,OAAMA,EAAGwC,WAAaxC,EAAGyC,gBAAgBvC,OAAS,EAAE,IAEnDwC,IAAO9C,EAAAA,EAAAA,IAAc,SAAC0C,GAAK,OAAKA,EAAMI,IAAI,IA2FhD,OALAC,EAAAA,EAAAA,YAAU,WACJpC,EAAQM,KAAK+B,cACfrB,EAAWsB,KAAKC,MAAMvC,EAAQM,KAAK+B,cAEvC,GAAG,KAED,iBAAKG,GAAI,UAAU,UAChBtC,EAASuC,WACR,SAAC,KAAgB,UAAEvC,EAASuC,YAC1B,MACJ,UAAC,KAAU,CACTC,MAAO,CACLC,OAAQtC,EAAY,IAAMG,EAC1BoC,UACEC,OAAO5C,GAAS6C,MAAM,KAAK,KAAOD,OAAOnC,GAAYoC,MAAM,KAAK,GAC5D,WACA,WACN5C,SAAUA,EAASA,UAErB6C,eACEF,OAAO5C,GAAS6C,MAAM,KAAK,KAAOD,OAAOnC,GAAYoC,MAAM,KAAK,GAC5D,KACA,KAENE,aAAgC,UAAlB9C,EAAS+C,MAAsC,WAAlB/C,EAAS+C,KAAkB,WAElD,UAAlB/C,EAAS+C,MAAsC,WAAlB/C,EAAS+C,QACtC,gBACEC,MAAO,CACLC,aAAc,MACdC,UAAW,aACXC,MAAO,OACPC,OAAQ,OACRC,OAAQ,WAEVC,QAAS,kBACP5C,EAAQ6C,KAAK,YAAczD,EAAQM,KAAKoD,oBAAoB,EAE9DlB,GAAI,SACJmB,IACE3D,EAAQM,KAAKsD,SACT5D,EAAQM,KAAKsD,SACb,+BAAiCvD,EAAY,IAAMG,EAEzDqD,QAAS,YAAwB,IAArBC,EAAa,EAAbA,cACVA,EAAcC,QAAU,KACxBD,EAAcH,IACZ,+BAAiCtD,EAAY,IAAMG,CACvD,EACAwD,IAAK3D,KAIT,UAAC,mBAAwB,YACH,UAAlBH,EAAS+C,MAAsC,WAAlB/C,EAAS+C,QACtC,kBACEC,MAAO,CACLe,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UACZ,WAEF,oBACEjB,MAAO,CAAEK,OAAQ,WACjBC,QAAS,kBACP5C,EAAQ6C,KAAK,YAAczD,EAAQM,KAAKoD,oBAAoB,EAC7D,UAEArD,EAAS,IAAGG,GACb,qBAEDqC,OAAO5C,GAAS6C,MAAM,KAAK,KAC5BD,OAAOnC,GAAYoC,MAAM,KAAK,IAC5B,SAACsB,EAAA,EAAU,CACT,aAAW,OACXC,GAAG,cACH,gBAAe3C,GAAW,iBAAc4C,EACxC,gBAAe5C,GAAW,YAAS4C,EACnC,gBAAc,OACdd,QA7KQ,SAACe,GACvBlD,EAAYkD,EAAMT,cACpB,EA2KyC,UAEzB,SAACU,EAAA,EAAY,MAEb,QAIPxE,EAAQM,KAAKmE,aAC0B,UAAxCzE,EAAQM,KAAKoE,SAAS5B,MAAM,KAAK,IAC/B,SAAC6B,EAAA,EAAI,CAACC,GAAI,CAAEC,SAAU,KAAM,UAC1B,SAACC,EAAA,EAAc,CAACtB,QA/FN,WACpBtC,GAAc,GACdK,EAAkB,QACpB,EA4FmD,UACrC,SAACwD,EAAA,EAAS,CACR7B,MAAO,CACLI,OAAQ,IACR0B,UAAW,QACXC,eAAgB,QAElBC,UAAU,MACV5B,OAAO,MACP6B,MAAOnF,EAAQM,KAAK8E,SACpBpB,IAAKhE,EAAQM,KAAK+E,mBAItB,KAEHrF,EAAQM,KAAKmE,aAC0B,gBAAxCzE,EAAQM,KAAKoE,SAAS5B,MAAM,KAAK,IAC/B,eAAGwC,OAAO,SAASC,KAAMvF,EAAQM,KAAK8E,SAAS,WAC7C,SAAC,kBAAuB,CACtBzB,IAAK3D,EAAQM,KAAKkF,gBAClBxB,IAAKhE,EAAQM,KAAK+E,aAClBhC,MAAO,MAERrD,EAAQM,KAAKoE,SAAS5B,MAAM,KAAK,MAElC,KAEH9C,EAAQM,KAAKmE,aAC0B,UAAxCzE,EAAQM,KAAKoE,SAAS5B,MAAM,KAAK,IAC/B,mBAAO2C,UAAQ,EAACpC,MAAM,QAAO,WAC3B,mBACEM,IAAK3D,EAAQM,KAAK8E,SAClBnC,KAAMjD,EAAQM,KAAKoE,SACnBgB,MAAO1F,EAAQM,KAAK+E,eACpB,iDAGF,KAEJrF,EAAQM,KAAKmE,YAET,MADF,iBAAMkB,wBAAyB,CAACC,OAAQ5F,EAAQ6F,KAAKvH,QAAQ,wBAAyB,8BAKtE,SAAlB4B,EAAS+C,MAAqC,WAAlB/C,EAAS+C,QACrC,SAAC,YAAiB,CAChB6C,UACEC,EAAAA,EAAAA,GAAkB,IAAIC,KAAQ,IAAIA,KAAKhG,EAAQiG,OAAS,GACpDC,EAAAA,EAAAA,GAAO,IAAIF,KAAKhG,EAAQiG,MAAO,cAC/BE,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,GAAQ,IAAIJ,KAAKhG,EAAQiG,MAAO,GAChC,IAAID,KACJ,CACEK,WAAW,SAO1BtF,GACC,gBACEmC,MAAO,CACLe,QAAS,OACTqC,cAAe,SACfjD,MAAO,cACPkD,WAAY,QACZ,SAEDxF,EAAQyF,KAAI,SAACC,EAAQC,GACpB,OACE,SAAC,KAAM,CAAClD,QAAS,kBAAMrD,EAAasG,EAAO,EAAcE,QAAM,WAC5DF,EAAOG,MADwCF,EAItD,MAEA,MACJ,UAACG,EAAA,EAAI,CACHxC,GAAG,aACHjD,SAAUA,EACV0F,KAAMpF,GACNqF,QAAS,kBAAM1F,EAAY,KAAK,EAChC2F,cAAe,CACb,kBAAmB,gBAErBC,aAAc,CACZC,SAAU,SACVC,WAAY,UACZ,WAEF,SAACC,EAAA,EAAQ,CAAC5D,QAAS,kBA3QDP,EA2QsB,WA1Q5C5B,EAAY,MACZH,GAAc,QACdK,EAAkB0B,GAHG,IAACA,CA2QiC,EAAC,6BAGpD,SAACmE,EAAA,EAAQ,CAAC5D,QA/NQ,YACtBhF,EAAAA,EAAAA,GACE2D,GAAKkF,cACLrH,EAAQM,KAAKoD,oBACbvB,GAAK9B,UACLL,EAAQM,KAAKC,gBACb,4BACAP,EAAQM,KAAKK,WAEZ2G,MAAK,SAACC,GACL,GAAIA,EAAOhI,UAAW,CACpB,IAAMiI,EAAoB,CACxB9H,IAAK6H,EAAOrI,QACZ0H,KAAMW,EAAO1H,SACb4H,gBAAiB,OACjBC,eAAgB,OAChBC,UAAW,IACXC,eAAgB,EAChBC,UAAW,GACXC,UAAU,GAEZzI,EAAAA,EAAAA,WAAyB0I,mBAAmBP,GAC5CpH,EAAiBmH,EAAOrI,QAC1B,MACEkB,EAAiBmH,EAAOrI,QAE5B,IACC8I,OAAM,SAACC,GACNC,QAAQC,IAAI,0BAA2BF,EACzC,GACJ,EAiMyC,gCAIrC,UAACG,EAAA,EAAM,CACLtB,KAAM7F,EACN8F,QAAS,kBAAM7F,GAAc,EAAK,EAClC2D,SAAU,KACV,kBAAgB,0BAAyB,WAEzC,UAACwD,EAAA,EAAa,WACQ,UAAnB/G,GAA6B,yBAAME,KAAoB,KAEpC,aAAnBF,GACC,iBAAK4B,MAAO,CAAEe,QAAS,OAAQqC,cAAe,UAAW,WACvD,oCACS,KACP,4BACGtG,EAAQM,KAAKC,gBACZ,IACAP,EAAQM,KAAKG,iBACP,IAAG,iBAGf,SAAC6H,EAAA,GAAM,CACL,aAAW,cACXC,aAAc,EACdC,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,EACLC,MAAOjH,GACPkH,SAAU,SAACC,EAAGC,GAAQ,OACpBnH,GAAcmH,GAAYA,EAAS,GAAG,EAExCpE,GAAI,CAACqE,UAAW,WAElB,UAAC,IAAG,CACFrE,GAAI,CACFX,QAAS,OACTC,eAAgB,SAChBC,WAAY,UACZ,WAEF,SAAC+E,EAAA,EAAU,CAACtE,GAAI,CAAEuE,WAAY,QAAS,SACpCvH,MAEH,gBACE+B,IAAKyF,EACLlG,MAAO,CAAEG,MAAO,GAAIC,OAAQ,IAC5BU,IAAK,eAIT,KAEgB,UAAnB1C,GACC,0BACE,gBACEqC,IAAK3D,EAAQM,KAAK8E,SAClBpB,IAAKhE,EAAQM,KAAK+E,aAClBnC,MAAO,CAAE2B,SAAU,YAGrB,SAEN,UAACwE,EAAA,EAAa,WACQ,aAAnB/H,IACC,SAAC,KAAM,CAACkC,QA7UA,YAEhB8F,EAAAA,EAAAA,IACE,MACAxH,GAAS,GAAGyH,UACZC,OAAO5H,IACP5B,EAAQM,KAAKoD,qBAEZ4D,MAAK,WACJ,IAAMmC,EACJtH,GAAK9B,UACL,IACA8B,GAAK3B,SACL,OACAoB,GACA,IACAE,GAAS,GAAGyH,UACZ,OACAvJ,EAAQM,KAAKC,gBACb,IACAP,EAAQM,KAAKG,eAEfb,EAAAA,GAAAA,kBACEI,EAAQ0J,QACRvH,GAAK9B,UACL8B,GAAK3B,SACL2B,GAAKkF,cACLoC,EACA,KACAzJ,EAAQqE,IAGVnD,GAAc,EAChB,IACC8G,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZxG,GAAc,+CACdF,EAAkB,QACpB,GACJ,EAsSqC,mBAE7B,SAAC,KAAM,CAACiC,QAAS,kBAAMtC,GAAc,EAAM,EAAEyI,WAAS,6BAOhE,ECraaC,EAAoC,SAAH,GAA4B,IAAvB5J,EAAO,EAAPA,QAAgB,EAAPC,QACxD,OACI,gBAAKiD,MAAO,CACR2G,UAAW,SACXC,MAAO,UACPC,SAAU,OACV3G,UAAW,aACX4G,WAAY,sDACd,SACGhK,EAAQ6F,MADL7F,EAAQiK,IAIxB,E,6ECyEO,SAASC,IAAc,IAAD,IACrBC,GAAW9K,EAAAA,EAAAA,IAAc,SAAC+K,GAAK,OAAKA,EAAMC,eAAe,IACzDlI,GAAO9C,EAAAA,EAAAA,IAAc,SAAC0C,GAAK,OAAKA,EAAMI,IAAI,IAC1CmI,GAAejL,EAAAA,EAAAA,IAAc,SAAC0C,GAAK,OAAKA,EAAMzC,aAAa,IAC3DiL,GAAgBlL,EAAAA,EAAAA,IAAc,SAAC0C,GAAK,OAAKA,EAAMwI,aAAa,IAC5DC,GAA2BnL,EAAAA,EAAAA,IAC/B,SAAC0C,GAAK,OAAKA,EAAMyI,wBAAwB,IAE3C,GAA8B1J,EAAAA,EAAAA,YAAoB,eAA3C2J,EAAO,KAAEC,EAAU,KAC1B,GAAkC5J,EAAAA,EAAAA,UAAS,IAAG,eAAvC6J,EAAS,KAAEC,EAAY,KAC9B,GAAsC9J,EAAAA,EAAAA,UAAS,IAAG,eAA3C+J,EAAW,KAAEC,EAAc,KAClC,GAAgChK,EAAAA,EAAAA,UAM7B,CACDpB,IAAK,GACLkH,KAAM,GACNa,gBAAiB,GACjBC,eAAgB,GAChBC,UAAW,KACX,eAZKoD,EAAQ,KAAEC,EAAW,KAatBC,GAAUC,EAAAA,EAAAA,QAAO,MACjBC,GAAQC,EAAAA,EAAAA,KACRC,IAAaC,EAAAA,EAAAA,GAAcH,EAAMI,YAAYC,KAAK,OACxD,IAAoC1K,EAAAA,EAAAA,WAAS,GAAM,iBAA5CG,GAAU,MAAEC,GAAa,MAChC,IAA0CJ,EAAAA,EAAAA,WAAS,GAAM,iBAAlD2K,GAAa,MAAEC,GAAgB,MACtC,IAAkC5K,EAAAA,EAAAA,UAG/B,CAAE6K,SAAU,GAAIC,YAAa,KAAK,iBAH9BC,GAAS,MAAEC,GAAY,MAKtBpC,IAAYqC,EAAAA,EAAAA,MAAZrC,QACF9I,IAAUC,EAAAA,EAAAA,MAChB,IAAkDC,EAAAA,EAAAA,WAAS,GAAK,iBAAzDkL,GAAiB,MAAEC,GAAoB,MAExCC,IAASC,EAAAA,EAAAA,cAAY,SAAAC,GACzBC,GAASD,EAAc,GACzB,GAAG,CAACrB,IAGFuB,IACEC,EAAAA,EAAAA,IAAY,CACdL,OAAAA,GACAM,SAAS,EACTC,SAAU,IAJVH,cAmBFlK,EAAAA,EAAAA,YAAU,YACRsK,EAAAA,EAAAA,IAAiBvK,EAAKkF,eAAeC,MAAK,SAACC,GACzCmD,EAAWnD,EAAOjH,KAAKiH,OACzB,GACF,GAAG,IAEH,IAAMoF,GAAa,SAACjN,GAClBkB,GAAQ6C,KAAK,SAAW/D,EAAIoD,MAAM,KAAK,IACvCgI,EAAepL,GACf,IAAMkN,EAAkBtC,EAAa9K,QAAO,SAACuJ,GAAC,OAAKA,EAAErJ,MAAQA,CAAG,IAAE,GAClEsL,EAAY4B,GACZvN,EAAAA,EAAAA,WAAyBwN,qBAAqBnN,GAC9CL,EAAAA,EAAAA,WAAyByN,4BAA4BpN,GAErD,IAAMqN,EAAmB5C,EAAS3K,QAChC,SAACwN,GAAS,OAAKA,EAAKtD,UAAYhK,CAAG,IAIrC,GAFAuM,IAAqB,IAGlB1B,GACDwC,EAAiBpN,QAAU,IAC3BoN,EAAiBpN,OAAS,EAC1B,CACA,IAAMsN,EAAgBF,EAAiB,GAAG1I,GAC1CzE,EAAAA,GAAAA,oBAAyBF,EAAKmD,OAAOoK,GAAgB,GACvD,CACF,EAEMC,GAAsB,SAACxD,GAC3B,IAAMyD,EAAiBhD,EACpB3K,QAAO,SAACwN,GAAS,OAAKA,EAAKtD,UAAYA,CAAO,IAC9C0D,OAAO,GACV,OAAI7C,GAAiB4C,EAAexN,QAAU,EACrC,aAGLwN,EAAexN,OAAS,EACnBwN,EAAe,GAAGtH,KAEpB,iBACT,EAEMwH,GAAoB,SAAC3D,GACzB,IAAMyD,EAAiBhD,EACpB3K,QAAO,SAACwN,GAAS,OAAKA,EAAKtD,UAAYA,CAAO,IAC9C0D,OAAO,GACV,OAAID,EAAexN,QAAU,EACpB,IAGFuG,EAAAA,EAAAA,GAAO,IAAIF,KAAKmH,EAAe,GAAGlH,MAAO,OAWlD,EAkBMqH,GAAc,SAAC7G,GACnB,GAAIkE,EAAU4C,OAAO5N,OAAS,EAAG,CAC/B,IAAI6N,EAAa,GACN,OAAP/C,QAAO,IAAPA,GAAAA,EAASgD,eACXD,EAAoB,OAAP/C,QAAO,IAAPA,OAAO,EAAPA,EAASgD,cAExB,IACMC,EAvBQ,SAACC,GACjB,IACItP,EAAMsP,EAWV,OALyB,KAFzBtP,GADAA,GADAA,EAAIA,EAAIC,QAAQ,SAAU,OAClBA,QAAQ,UAAW,OACnBA,QAAQ,gBAAiB,KAE1BiP,OAAO5N,QACN,IAAIiO,WAAYC,gBAAgBF,EAAM,cAEtC,IAAIC,WAAYC,gBAAgBxP,EAAK,cAElCwH,KAAKiI,aAAe,EACjC,CAS4BC,CADKC,EAAAA,SAAmBrD,IAG7C+C,EAAgBH,OAAO5N,OAAS,GACjCC,EAAAA,GAAAA,YACIiL,EACA1I,EAAK9B,UACL8B,EAAK3B,SACLgN,EACArL,EAAKkF,cACa,kBAAXZ,EAAsBA,EAAOoC,MAAQ6E,EAC1B,kBAAXjH,EAAsBA,EAAOwH,kBAAoB,KAGhE,CACF,EAEM5B,GAAW,SAAC6B,GAChBpC,GAAa,CACXH,SAAU,kCACVC,YAAa,KAEf1K,IAAc,GAEd,IAAMiN,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASH,IAEzBI,EAAAA,EAAAA,IAAWH,GACR7G,MAAK,SAACC,GACL,IAAIiG,EAAa,GACN,OAAP/C,QAAO,IAAPA,GAAAA,EAASgD,eACXD,EAAoB,OAAP/C,QAAO,IAAPA,OAAO,EAAPA,EAASgD,cAGxBlG,EAAOjH,KAAKiO,QAAQ/H,IAAG,yCAAC,WAAOwG,GAAS,4EAChC1M,EAAO,CACXD,UAAW8B,EAAK9B,UAChBG,SAAU2B,EAAK3B,SACf6G,cAAelF,EAAKkF,cACpBmH,SAAUzD,EAASnE,KACnB4G,WAAYA,EACZiB,UAAWzB,EAAKyB,UAChBC,UAAW1B,EAAK0B,UAChBC,SAAU3B,EAAK4B,SACfC,UAAW7B,EAAK6B,UAChBzJ,SAAU4H,EAAK5H,SACfI,gBAAiBwH,EAAKxH,gBACtBd,SAAUsI,EAAKtI,SACfW,aAAc2H,EAAK8B,aACnBC,SAAU/B,EAAK+B,SACfC,KAAMhC,EAAKgC,KACXC,SAAc,OAAJjC,QAAI,IAAJA,OAAI,EAAJA,EAAMiC,SAChBC,UAAWlC,EAAKkC,UAChBC,OAAQnC,EAAKmC,OACbC,SAAU,GACVC,aAAcrC,EAAKsC,IACnBC,WAAW,GAEb3P,EAAAA,GAAAA,uBAA4BiL,EAAavK,GACzCY,IAAc,GAAO,2CACtB,mDA1BsB,GA2BzB,IACC8G,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ6D,GAAa,CACXH,SAAU,QACVC,YAAa,+CAEfF,IAAiB,EACnB,IACCT,EAAQuE,UACTvE,EAAQuE,QAAQ3G,MAAQ,GAE5B,EA+EA,OA1DAzG,EAAAA,EAAAA,YAAU,WACR,IAAMqN,EAAY3P,YAAW,WAC3BF,EAAAA,GAAAA,gBAAqBuC,EAAKkF,cAAe0D,EAASrL,IACpD,GAAG,KACH,OAAO,kBAAMgQ,aAAaD,EAAW,CACvC,GAAG,CAAC9E,KAEJvI,EAAAA,EAAAA,YAAU,WACJoI,IAECd,IACW,SAAZA,IACY,KAAZA,IACAc,EAAyB1H,MAAM,KAAK,KAAO4G,IAE3CiD,GAAWnC,IAKXA,EAAyB1H,MAAM,KAAK,KAAO4G,IAC/B,SAAZA,IACY,KAAZA,KAEFrK,EAAAA,EAAAA,WAAyByN,4BAA4BpD,IACrDiD,GAAWjD,KAGbiG,OAAOC,OAAS,WACdvQ,EAAAA,EAAAA,WAAyByN,4BAA4B,GACvD,EAEA6C,OAAOE,QAAU,WACXhF,IACFxL,EAAAA,EAAAA,WAAyByN,4BAA4BjC,GACrDxL,EAAAA,EAAAA,WAAyBwN,qBAAqBhC,GAElD,CACF,GAAG,CAACA,KAEJzI,EAAAA,EAAAA,YAAU,WACR,IAAM2K,EAAmB5C,EAAS3K,QAC9B,SAACwN,GAAS,OAAKA,EAAKtD,UAAYmB,CAAW,IAG/C,IAAIN,GAAiBwC,EAAiBpN,OAAS,GAAKoN,EAAiBpN,QAAU,IAAMkL,GAAemB,GAAkB,CACpH,IAAM8D,EAAwB/C,EAAiB,GAE5CA,EAAiBpN,QAAU,IAAMoN,EAAiBpN,OAAS,IAAMmQ,EAAsBxP,KAAKyP,iBAC7F9D,IAAqB,GACrBrM,EAAAA,GAAAA,oBAAyBiL,EAAahI,OAAOiN,EAAsBzL,IAAK,IACrC,IAA5B0I,EAAiBpN,SACxBsM,IAAqB,GACrBrM,EAAAA,GAAAA,oBAAyBiL,EAAahI,OAAOiN,EAAsBzL,IAAK,IAE5E,CACF,GAAG,CAAC8F,KAGF,UAAC6F,EAAA,EAAG,CAAC9M,MAAO,CAAC+M,aAAc,OAAQ3M,OAAQ,QAAQ,WACjD,UAAC,KAAa,CAAC4M,YAAU,aACvB,UAAC,KAAO,CAAChQ,SAAS,OAAOiQ,YAAY,EAAM,WACzC,SAAC,KAAM,CAACC,YAAY,eACpB,SAAC,KAAgB,CAACC,QAAS9F,EAAc,SACtCD,EAAa9D,KAAI,SAAC8J,GAAI,OACrB,SAAC,KAAY,CACXC,OAAQD,EAAK5Q,MAAQmL,EAErB2F,UAAWF,EAAK1I,eAChBpE,QAAS,kBAAMmJ,GAAW2D,EAAK5Q,IAAI,EACnCkH,KAAM0J,EAAK1J,KACX6J,KAAMvD,GAAoBoD,EAAK5Q,KAC/BgR,iBAAkBrD,GAAkBiD,EAAK5Q,KAAK,UAE9C,SAAC,KAAM,CACLiE,IAC2B,SAAzB2M,EAAK7I,gBACD6I,EAAK7I,gBACL,+BAAiC6I,EAAK1J,QAXzC0J,EAAK5Q,IAcG,UAKrB,kCAAS4M,MAAc,IAAEpJ,MAAO,CAACG,MAAO,OAAQC,OAAQ,QAAQ,UAChE,UAAC,KAAa,aACTyH,IACD,UAAC,KAAkB,YACjB,SAAC,UAAuB,IACvBZ,EAAS3K,QAAO,SAACwN,GAAS,OAAKA,EAAKtD,UAAYmB,CAAW,IACzDlL,OAAS,IACV,SAAC,aAA0B,CACzBgR,SAAU5F,EAASnE,KACnB6J,KACE,WACAtK,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,GACE,IAAIJ,KACFmE,EACG3K,QAAO,SAACwN,GAAS,OAAKA,EAAKtD,UAAYmB,CAAW,IAClDuC,OAAO,GAAG,GAAGnH,MAElB,GAEF,IAAID,KACJ,CAAEK,WAAW,OAKrB,SAAC,aAA0B,WACzB,SAACuK,EAAA,EAAkB,UAIzB,UAAC,KAAW,CACVC,YAAatG,EACbuG,cAxTY,WACpB,IAAM/D,EAAmB5C,EAAS3K,QAC9B,SAACwN,GAAS,OAAKA,EAAKtD,UAAYmB,CAAW,IAG/C,IAAIN,EAAJ,CAGE,IAAM0C,EAAgBF,EAAiB,GAAG1I,GAC1CzE,EAAAA,GAAAA,oBAAyBiL,EAAahI,OAAOoK,GAAgB,GAC/D,CACF,EA8SU8D,6BAA6B,EAC7BC,kBACwD,QAArD,EAAC1G,EAAa9K,QAAO,SAACuJ,GAAC,OAAKA,EAAErJ,MAAQmL,CAAW,IAAE,UAAE,QAApD,EACEhD,aACF,SAAC,KAAe,CACd3E,MAAO,CAAC+N,QAAS,MACjBC,QACsD,QAD/C,EACL5G,EAAa9K,QAAO,SAACuJ,GAAC,OAAKA,EAAErJ,MAAQmL,CAAW,IAAE,UAAE,aAApD,EACIhD,YAIX,UAEAsC,EACE3K,QAAO,SAACwN,GAAS,OAAKA,EAAKtD,UAAYmB,CAAW,IAClDrE,KAAI,SAACxG,EAAS0G,EAAOyK,GACpB,IAC8C,IAYvC,IAbDjR,EA3aF,SAClBiR,EACAnR,EACA0G,GACI,IAAD,UAU4B,EATzB0K,EAA4B,QAAjB,EAAGD,EAAIzK,EAAQ,UAAE,OAAgB,QAAhB,EAAd,EAAgBpG,KAAKK,iBAAS,WAAhB,EAAd,EAAgCmC,MAAM,KAAK,GACzDuO,EAAwB,QAAjB,EAAGF,EAAIzK,EAAQ,UAAE,OAAgB,QAAhB,EAAd,EAAgBpG,KAAKK,iBAAS,WAAhB,EAAd,EAAgCmC,MAAM,KAAK,GACrDwO,EAAmC,QAAzB,EAAGtR,EAAQM,KAAKK,iBAAS,aAAtB,EAAwBmC,MAAM,KAAK,GAElDyE,EAA2B,CAC7BrH,SAAU,SACV+C,KAAM,UAYR,OATIkO,EAAIzK,EAAQ,IAAM1G,IAElBkG,EAAAA,EAAAA,GAAO,IAAIF,KAAmB,QAAf,EAACmL,EAAIzK,EAAQ,UAAE,aAAd,EAAgBT,MAAO,SACvCC,EAAAA,EAAAA,GAAO,IAAIF,KAAKhG,EAAQiG,MAAO,QAE/BsB,EAAO9E,WAAYyD,EAAAA,EAAAA,GAAO,IAAIF,KAAKhG,EAAQiG,MAAO,uBAIlDmL,IAAgBE,GAAcD,IAAYC,EACrC/J,EAGL6J,IAAgBE,GAAcD,IAAYC,GAC5C/J,EAAOrH,SAAW,QAClBqH,EAAOtE,KAAO,QACPsE,GAGL6J,IAAgBE,GAAcD,IAAYC,GAC5C/J,EAAOrH,SAAW,SAClBqH,EAAOtE,KAAO,SACPsE,GAGL6J,IAAgBE,GAAcD,IAAYC,GAC5C/J,EAAOrH,SAAW,SAClBqH,EAAOtE,KAAO,OACPsE,GAGFA,CACT,CA6XiCgK,CAAYJ,EAAKnR,EAAS0G,GAC3C,MAAqC,UAAjC1G,EAAQM,KAAKyP,iBAEb,SAAChQ,EAAO,CAENyC,GAAI,UACJtC,SAAUA,EACVF,QAASA,EACTC,QAAoB,QAAb,EAAEL,EAAAA,GAAAA,cAAW,OAAK,QAAL,EAAX,EAAaF,WAAG,WAAL,EAAX,EAAkB8R,WAC3BrR,aAAcmN,GACdlN,iBAAkBuM,IANb3M,EAAQqE,KAWf,SAACuF,EAAa,CAEZpH,GAAI,UACJxC,QAASA,EACTC,QAAoB,QAAb,EAAEL,EAAAA,GAAAA,cAAW,OAAK,QAAL,EAAX,EAAaF,WAAG,WAAL,EAAX,EAAkB8R,YAHtBxR,EAAQqE,GAOrB,IACD8F,EAASxK,QAAU,IAChBkL,IACA,SAAC,aAAmB,CAClB3H,MAAO,CACLe,QAAS,OACTqC,cAAe,SACfpC,eAAgB,SAChBZ,OAAQ,OACRuG,UAAW,SACXE,SAAU,SACV,SAEAQ,EAMA,cALA,2BACIM,GACA,kDAOVN,GACAM,GACAV,EAAS3K,QAAO,SAACwN,GAAS,OAAKA,EAAKtD,UAAYmB,CAAW,IACxDlL,QAAU,IACX,SAAC,aAAmB,CAClBuD,MAAO,CACLe,QAAS,OACTqC,cAAe,SACfpC,eAAgB,SAChBZ,OAAQ,OACRuG,UAAW,SACXE,SAAU,SACV,wCAMPgB,IACD,iBAAKvI,GAAI,eAAe,WACtB,SAAC,KAAY,CACXiP,QAtNM,SAAAlN,GAElB,IAAIyI,EAAO0E,MAAMC,KAAKpN,EAAMqN,cAAcC,OAAOC,MAAK,SAAAC,GAAC,MAAI,WAAWC,KAAKD,EAAE9O,KAAK,IAClF,GAAG+J,EAAK,CAEN,IAAIiF,EAAOjF,EAAKkF,YAChB7F,GAAS4F,EACX,CACF,EA+Mc7B,YAAY,oBACZtH,SAjOK,SAACD,GAClB+B,EAAa/B,GACbjJ,EAAAA,GAAAA,YACEuC,EAAKkF,cACL0D,EAASrL,IACTyC,EAAK9B,UAAY,IAAM8B,EAAK3B,SAEhC,EA2Nc2R,OAAQ7E,GACR8E,cAAe,kBAAMnH,EAAQuE,QAAQ6C,OAAO,KAE9C,kBACEpP,KAAK,OACL2D,KAAK,OACLvC,GAAG,OACHyE,SAAU,SAACvE,GAAK,OAAK8H,GAAS9H,EAAMe,OAAOgN,MAAM,GAAG,EACpDC,IAAKtH,EACL/H,MAAO,CAAEe,QAAS,uBAQ5B,UAACmE,EAAA,EAAM,CACLiD,WAAYA,GACZvE,KAAM7F,GACN8F,QAAS,kBAAM7F,IAAc,EAAK,EAClC,kBAAgB,0BAAyB,WAEzC,SAACsR,EAAA,EAAW,CAACnO,GAAG,0BAAyB,SACtCwH,GAAUF,YAEb,SAACtD,EAAA,EAAa,UACXoD,IAAiBI,GAAUD,YAAYjM,OAAS,GAC/C,SAAC8S,EAAA,EAAiB,UAAE5G,GAAUD,eAE9B,SAACoE,EAAA,EAAG,CAACpL,GAAI,CAAEX,QAAS,OAAQC,eAAgB,UAAW,UACrD,SAACwO,EAAA,EAAgB,QAItBjH,IACC,SAACpC,EAAA,EAAa,WACZ,SAACsJ,EAAA,EAAM,CAACnP,QAAS,kBAAMtC,IAAc,EAAM,EAAEyI,WAAS,uBAItD,UAIZ,CCxkBe,SAASiJ,IACtB,OACE,SAACC,EAAA,EAAS,CAAChO,SAAS,KAAK3B,MAAO,CAAEI,OAAQ,sBAAuB,UAC/D,SAAC4G,EAAU,KAGjB,C","sources":["helpers/chat/createPrivateChat.ts","componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\nimport {useStoreState} from \"../../store\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    CONFERENCEDOMAIN: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    const currentChatRooms = useStoreState.getState().userChatRooms;\n\n    let isNewRoom = false;\n    if(currentChatRooms.filter((el) => el.jid === roomJid).length === 0){\n        isNewRoom = true;\n        xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n        xmpp.setOwner(combinedWalletAddress.toLowerCase());\n        xmpp.roomConfig(\n            combinedWalletAddress.toLowerCase(),\n            {roomName: combinedUsersName},\n        );\n        xmpp.subsribe(roomJid);\n        xmpp.presenceInRoom(roomJid);\n\n        setTimeout(() => {\n            xmpp.sendInvite(\n                underscoreManipulation(myWalletAddress),\n                roomJid.toLowerCase(),\n                underscoreManipulation(otherUserWalletAddress),\n            );\n        }, 1000);\n    }\n\n    return {roomJid, roomName: combinedUsersName, isNewRoom};\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Message as KitMessage,\n  MessageModel,\n  Button,\n  MessageSeparator,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport { TMessageHistory, useStoreState } from \"../../../store\";\nimport { useHistory } from \"react-router\";\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  FormControl,\n  IconButton,\n  InputLabel,\n  Menu,\n  MenuItem,\n  Select,\n  Slider,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport { transferCoin } from \"../../../http\";\nimport xmpp from \"../../../xmpp\";\nimport { createPrivateChat } from \"../../../helpers/chat/createPrivateChat\";\nimport coin from \"../../../assets/images/coin.png\";\nimport { Box } from \"@mui/system\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel[\"position\"];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any;\n  chooseDirectRoom: any;\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string;\n}\n\ntype IDialog = \"transfer\" | \"image\" | \"ban\" | \"error\";\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender,\n  chooseDirectRoom,\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [dialogMenuType, setDialogMenuType] = useState<IDialog>(\"transfer\");\n  const [dialogText, setDialogText] = useState(\"\");\n  const openMenu = Boolean(anchorEl);\n  const handleClickMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const [coinAmount, setCoinAmount] = useState(1);\n  const balance = useStoreState((store) => store.balance);\n  const coinData = balance.filter(\n    (el) => !el.tokenType && el.contractAddress.length > 10\n  );\n  const user = useStoreState((store) => store.user);\n\n  const openDialogMenu = (type: IDialog) => {\n    setAnchorEl(null);\n    setOpenDialog(true);\n    setDialogMenuType(type);\n  };\n\n  const sendCoins = () => {\n    // @ts-ignore\n    transferCoin(\n      \"DPT\",\n      coinData[0].tokenName,\n      Number(coinAmount),\n      message.data.senderWalletAddress\n    )\n      .then(() => {\n        const textMessage =\n          user.firstName +\n          \" \" +\n          user.lastName +\n          \" -> \" +\n          coinAmount +\n          \" \" +\n          coinData[0].tokenName +\n          \" -> \" +\n          message.data.senderFirstName +\n          \" \" +\n          message.data.senderLastName;\n\n        xmpp.sendSystemMessage(\n          message.roomJID,\n          user.firstName,\n          user.lastName,\n          user.walletAddress,\n          textMessage,\n          null,\n          message.id\n        );\n\n        setOpenDialog(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogText(\"An error occurred during the coin transfer.\");\n        setDialogMenuType(\"error\");\n      });\n  };\n\n  const openPrivateRoom = () => {\n    createPrivateChat(\n      user.walletAddress,\n      message.data.senderWalletAddress,\n      user.firstName,\n      message.data.senderFirstName,\n      \"@conference.dev.dxmpp.com\",\n      message.data.senderJID\n    )\n      .then((result) => {\n        if (result.isNewRoom) {\n          const temporaryRoomData = {\n            jid: result.roomJid,\n            name: result.roomName,\n            room_background: \"none\",\n            room_thumbnail: \"none\",\n            users_cnt: \"2\",\n            unreadMessages: 0,\n            composing: \"\",\n            toUpdate: true,\n          };\n          useStoreState.getState().setNewUserChatRoom(temporaryRoomData);\n          chooseDirectRoom(result.roomJid);\n        } else {\n          chooseDirectRoom(result.roomJid);\n        }\n      })\n      .catch((error) => {\n        console.log(\"openPrivateRoom Error: \", error);\n      });\n  };\n\n  const fullViewImage = () => {\n    setOpenDialog(true);\n    setDialogMenuType(\"image\");\n  };\n\n  useEffect(() => {\n    if (message.data.quickReplies) {\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n  }, []);\n  return (\n    <div is={\"Message\"}>\n      {position.separator ? (\n        <MessageSeparator>{position.separator}</MessageSeparator>\n      ) : null}\n      <KitMessage\n        model={{\n          sender: firstName + \" \" + lastName,\n          direction:\n            String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0]\n              ? \"outgoing\"\n              : \"incoming\",\n          position: position.position,\n        }}\n        avatarPosition={\n          String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0]\n            ? \"tr\"\n            : \"tl\"\n        }\n        avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n      >\n        {(position.type === \"first\" || position.type === \"single\") && (\n          <img\n            style={{\n              borderRadius: \"50%\",\n              boxSizing: \"border-box\",\n              width: \"42px\",\n              height: \"42px\",\n              cursor: \"pointer\",\n            }}\n            onClick={() =>\n              history.push(\"/profile/\" + message.data.senderWalletAddress)\n            }\n            is={\"Avatar\"}\n            src={\n              message.data.photoURL\n                ? message.data.photoURL\n                : \"https://icotar.com/initials/\" + firstName + \" \" + lastName\n            }\n            onError={({ currentTarget }) => {\n              currentTarget.onerror = null;\n              currentTarget.src =\n                \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\n            }}\n            alt={firstName}\n          />\n        )}\n\n        <KitMessage.CustomContent>\n          {(position.type === \"first\" || position.type === \"single\") && (\n            <span\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n              }}\n            >\n              <strong\n                style={{ cursor: \"pointer\" }}\n                onClick={() =>\n                  history.push(\"/profile/\" + message.data.senderWalletAddress)\n                }\n              >\n                {firstName} {lastName}\n                <br />\n              </strong>\n              {String(userJid).split(\"/\")[0] !==\n              String(messageJid).split(\"/\")[0] ? (\n                <IconButton\n                  aria-label=\"more\"\n                  id=\"long-button\"\n                  aria-controls={openMenu ? \"long-menu\" : undefined}\n                  aria-expanded={openMenu ? \"true\" : undefined}\n                  aria-haspopup=\"true\"\n                  onClick={handleClickMenu}\n                >\n                  <MoreVertIcon />\n                </IconButton>\n              ) : null}\n            </span>\n          )}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"image\" ? (\n            <Card sx={{ maxWidth: 200 }}>\n              <CardActionArea onClick={fullViewImage}>\n                <CardMedia\n                  style={{\n                    height: 150,\n                    objectFit: \"cover\",\n                    objectPosition: \"left\",\n                  }}\n                  component=\"img\"\n                  height=\"150\"\n                  image={message.data.location}\n                  alt={message.data.originalName}\n                />\n              </CardActionArea>\n            </Card>\n          ) : null}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"application\" ? (\n            <a target=\"_blank\" href={message.data.location}>\n              <KitMessage.ImageContent\n                src={message.data.locationPreview}\n                alt={message.data.originalName}\n                width={150}\n              />\n              {message.data.mimetype.split(\"/\")[1]}\n            </a>\n          ) : null}\n\n          {message.data.isMediafile &&\n          message.data.mimetype.split(\"/\")[0] === \"video\" ? (\n            <video controls width=\"200px\">\n              <source\n                src={message.data.location}\n                type={message.data.mimetype}\n                title={message.data.originalName}\n              />\n              Sorry, your browser doesn't support videos.\n            </video>\n          ) : null}\n\n        {!message.data.isMediafile ?\n            <span dangerouslySetInnerHTML={{__html: message.body.replace(/\\b(https?\\:\\/\\/\\S+)/mg, '<a href=\"$1\">$1</a>')}}></span>\n            : null\n        }\n      </KitMessage.CustomContent>\n\n        {(position.type === \"last\" || position.type === \"single\") && (\n          <KitMessage.Footer\n            sentTime={\n              differenceInHours(new Date(), new Date(message.date)) > 5\n                ? format(new Date(message.date), \"h:mm:ss a\")\n                : formatDistance(\n                    subDays(new Date(message.date), 0),\n                    new Date(),\n                    {\n                      addSuffix: true,\n                    }\n                  )\n            }\n          />\n        )}\n      </KitMessage>\n      {buttons ? (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"max-content\",\n            marginLeft: \"45px\",\n          }}\n        >\n          {buttons.map((button, index) => {\n            return (\n              <Button onClick={() => buttonSender(button)} key={index} border>\n                {button.name}\n              </Button>\n            );\n          })}\n        </div>\n      ) : null}\n      <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={openMenu}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n      >\n        <MenuItem onClick={() => openDialogMenu(\"transfer\")}>\n          Transfer coins\n        </MenuItem>\n        <MenuItem onClick={openPrivateRoom}>Direct message</MenuItem>\n        {/*<MenuItem onClick={() => setAnchorEl(null)}>Ban this user</MenuItem>*/}\n      </Menu>\n\n      <Dialog\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        maxWidth={\"xl\"}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogContent>\n          {dialogMenuType === \"error\" ? <div>{dialogText}</div> : null}\n\n          {dialogMenuType === \"transfer\" ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div>\n                Reward{\" \"}\n                <strong>\n                  {message.data.senderFirstName +\n                    \" \" +\n                    message.data.senderLastName}\n                </strong>{\" \"}\n                with coins\n              </div>\n              <Slider\n                aria-label=\"Coin amount\"\n                defaultValue={1}\n                valueLabelDisplay=\"auto\"\n                step={2}\n                marks\n                min={1}\n                max={7}\n                value={coinAmount}\n                onChange={(e, newValue) =>\n                  setCoinAmount(newValue || newValue[0])\n                }\n                sx={{marginTop: '10px'}}\n              />\n              <Box\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Typography sx={{ fontWeight: \"bold\" }}>\n                  {coinAmount}\n                </Typography>\n                <img\n                  src={coin}\n                  style={{ width: 30, height: 30 }}\n                  alt={\"coin\"}\n                />\n              </Box>\n            </div>\n          ) : null}\n\n          {dialogMenuType === \"image\" ? (\n            <div>\n              <img\n                src={message.data.location}\n                alt={message.data.originalName}\n                style={{ maxWidth: \"100%\" }}\n              />\n            </div>\n          ) : null}\n        </DialogContent>\n        <DialogActions>\n          {dialogMenuType === \"transfer\" && (\n            <Button onClick={sendCoins}>Send</Button>\n          )}\n          <Button onClick={() => setOpenDialog(false)} autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport Box from \"@mui/material/Box\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport { getPublicProfile, uploadFile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport * as DOMPurify from \"dompurify\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Message } from \"../../componets/Chat/Messages/Message\";\nimport { SystemMessage } from \"../../componets/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  useMediaQuery,\n  useTheme,\n} from \"@mui/material\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useDropzone } from 'react-dropzone';\n\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if (arr[index - 1] && message) {\n    if (\n      format(new Date(arr[index - 1]?.date), \"dd\") !==\n      format(new Date(message.date), \"dd\")\n    ) {\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID !== currentJID) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showDialogTxt, setShowDialogTxt] = useState(false);\n  const [dialogTxt, setDialogTxt] = useState<{\n    headline: string;\n    description: string;\n  }>({ headline: \"\", description: \"\" });\n  // @ts-ignore\n  const { roomJID } = useParams();\n  const history = useHistory();\n  const [firstLoadMessages, setFirstLoadMessages] = useState(true);\n\n  const onDrop = useCallback(acceptedFiles => {\n    sendFile(acceptedFiles[0]);\n  }, [roomData]);\n\n  const {\n    getRootProps\n  } = useDropzone({\n    onDrop,\n    noClick: true,\n    maxFiles: 1\n  });\n  const onYReachStart = () => {\n    const filteredMessages = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n    );\n\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const chooseRoom = (jid: string) => {\n    history.push(\"/chat/\" + jid.split(\"@\")[0]);\n    setCurrentRoom(jid);\n    const currentRoomData = useChatRooms.filter((e) => e.jid === jid)[0];\n    setRoomData(currentRoomData);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n    setFirstLoadMessages(true)\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length <= 10 &&\n      filteredMessages.length > 0\n    ) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 50);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    return format(new Date(messagesInRoom[0].date), \"H:mm\");\n\n    // if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\n    //   return format(new Date(messagesInRoom[0].date), \"hh:mm\");\n    // } else {\n    //   return formatDistance(\n    //     subDays(new Date(messagesInRoom[0].date), 0),\n    //     new Date(),\n    //     { addSuffix: true }\n    //   );\n    // }\n  };\n\n  const stripHtml = (html: string) => {\n    let doc: any;\n    let str = html;\n\n    str=str.replace(/<br>/gi, \"\\n\");\n    str=str.replace(/<p.*>/gi, \"\\n\");\n    str=str.replace(/<(?:.|\\s)*?>/g, \"\");\n\n    if(str.trim().length === 0){\n      doc = new DOMParser().parseFromString(html, 'text/html');\n    }else{\n      doc = new DOMParser().parseFromString(str, 'text/html');\n    }\n    return doc.body.textContent || \"\";\n  }\n\n  const sendMessage = (button: any) => {\n    if (myMessage.trim().length > 0) {\n      let userAvatar = \"\";\n      if (profile?.profileImage) {\n        userAvatar = profile?.profileImage;\n      }\n      const clearMessageFromHtml = DOMPurify.sanitize(myMessage);\n      const finalMessageTxt = stripHtml(clearMessageFromHtml);\n\n      if(finalMessageTxt.trim().length > 0){\n        xmpp.sendMessage(\n            currentRoom,\n            user.firstName,\n            user.lastName,\n            userAvatar,\n            user.walletAddress,\n            typeof button === \"object\" ? button.value : finalMessageTxt,\n            typeof button === \"object\" ? button.notDisplayedValue : null\n        );\n      }\n    }\n  };\n\n  const sendFile = (file: File) => {\n    setDialogTxt({\n      headline: \"File is loading, please wait...\",\n      description: \"\",\n    });\n    setOpenDialog(true);\n\n    const formData = new FormData();\n    formData.append(\"files\", file);\n\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n          setOpenDialog(false);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogTxt({\n          headline: \"Error\",\n          description: \"An error occurred while uploading the file\",\n        });\n        setShowDialogTxt(true);\n      });\n    if(fileRef.current){\n      fileRef.current.value = \"\";\n    }\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n\n  const handlePaste = event => {\n    // @ts-ignore\n    let item = Array.from(event.clipboardData.items).find(x => /^image\\//.test(x.type));\n    if(item){\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob)\n    }\n  };\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if (currentUntrackedChatRoom) {\n      if (\n        !roomJID ||\n        roomJID === \"none\" ||\n        roomJID === \"\" ||\n        currentUntrackedChatRoom.split(\"@\")[0] === roomJID\n      ) {\n        chooseRoom(currentUntrackedChatRoom);\n      }\n    }\n\n    if (\n        currentUntrackedChatRoom.split(\"@\")[0] !== roomJID &&\n        roomJID !== \"none\" &&\n        roomJID !== \"\"\n    ) {\n      useStoreState.getState().setCurrentUntrackedChatRoom(roomJID);\n      chooseRoom(roomJID);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    };\n\n    window.onfocus = () => {\n      if (currentRoom) {\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    };\n  }, [currentRoom]);\n\n  useEffect(() => {\n    const filteredMessages = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n    );\n\n    if(!loaderArchive && filteredMessages.length > 0 && filteredMessages.length <= 51 && currentRoom && firstLoadMessages){\n      const lastUpFilteredMessage = filteredMessages[0];\n\n      if(filteredMessages.length >= 10 && filteredMessages.length < 15 && lastUpFilteredMessage.data.isSystemMessage){\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(currentRoom, String(lastUpFilteredMessage.id), 5);\n      }else if(filteredMessages.length === 1){\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(currentRoom, String(lastUpFilteredMessage.id), 50);\n      }\n    }\n  }, [messages])\n\n  return (\n    <Box style={{paddingBlock: \"20px\", height: \"100%\"}}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {useChatRooms.map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_background !== \"none\"\n                      ? room.room_background\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <div {...getRootProps()} style={{width: \"100%\", height: \"100%\"}}>\n        <ChatContainer >\n          {!!roomData && (\n            <ConversationHeader>\n              <ConversationHeader.Back />\n              {messages.filter((item: any) => item.roomJID === currentRoom)\n                .length > 0 && (\n                <ConversationHeader.Content\n                  userName={roomData.name}\n                  info={\n                    \"Active \" +\n                    formatDistance(\n                      subDays(\n                        new Date(\n                          messages\n                            .filter((item: any) => item.roomJID === currentRoom)\n                            .slice(-1)[0].date\n                        ),\n                        0\n                      ),\n                      new Date(),\n                      { addSuffix: true }\n                    )\n                  }\n                />\n              )}\n              <ConversationHeader.Actions>\n                <BookmarkRemoveIcon />\n              </ConversationHeader.Actions>\n            </ConversationHeader>\n          )}\n          <MessageList\n            loadingMore={loaderArchive}\n            onYReachStart={onYReachStart}\n            disableOnYReachWhenNoScroll={true}\n            typingIndicator={\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                ?.composing && (\n                <TypingIndicator\n                  style={{opacity: \".6\"}}\n                  content={\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                      ?.composing\n                  }\n                />\n              )\n            }\n          >\n            {messages\n              .filter((item: any) => item.roomJID === currentRoom)\n              .map((message, index, arr) => {\n                const position = getPosition(arr, message, index);\n                if (message.data.isSystemMessage === \"false\") {\n                  return (\n                    <Message\n                      key={message.id}\n                      is={\"Message\"}\n                      position={position}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                      buttonSender={sendMessage}\n                      chooseDirectRoom={chooseRoom}\n                    />\n                  );\n                } else {\n                  return (\n                    <SystemMessage\n                      key={message.id}\n                      is={\"Message\"}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                    />\n                  );\n                }\n              })}\n            {messages.length <= 0 ||\n              (!currentRoom && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  {!loaderArchive ? (\n                    <span>\n                      {!currentRoom &&\n                        \"To get started, please select a chat room.\"}\n                    </span>\n                  ) : (\n                    \"Loading...\"\n                  )}\n                </MessageList.Content>\n              ))}\n            {!loaderArchive &&\n              currentRoom &&\n              messages.filter((item: any) => item.roomJID === currentRoom)\n                .length <= 0 && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  Message list is empty\n                </MessageList.Content>\n              )}\n          </MessageList>\n          {!!roomData && (\n            <div is={\"MessageInput\"}>\n              <MessageInput\n                onPaste={handlePaste}\n                placeholder=\"Type message here\"\n                onChange={setMessage}\n                onSend={sendMessage}\n                onAttachClick={() => fileRef.current.click()}\n              />\n              <input\n                type=\"file\"\n                name=\"file\"\n                id=\"file\"\n                onChange={(event) => sendFile(event.target.files[0])}\n                ref={fileRef}\n                style={{ display: \"none\" }}\n              />\n            </div>\n          )}\n        </ChatContainer>\n        </div>\n      </MainContainer>\n\n      <Dialog\n        fullScreen={fullScreen}\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {dialogTxt.headline}\n        </DialogTitle>\n        <DialogContent>\n          {showDialogTxt && dialogTxt.description.length > 0 ? (\n            <DialogContentText>{dialogTxt.description}</DialogContentText>\n          ) : (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <CircularProgress />\n            </Box>\n          )}\n        </DialogContent>\n        {showDialogTxt ? (\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)} autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        ) : null}\n      </Dialog>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n      <ChatInRoom />\n    </Container>\n  );\n}\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","CONFERENCEDOMAIN","userJID","combinedWalletAddress","sort","join","roomJid","combinedUsersName","currentChatRooms","useStoreState","userChatRooms","isNewRoom","filter","el","jid","length","xmpp","roomName","setTimeout","Message","message","userJid","position","buttonSender","chooseDirectRoom","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","openDialog","setOpenDialog","React","anchorEl","setAnchorEl","dialogMenuType","setDialogMenuType","dialogText","setDialogText","openMenu","Boolean","coinAmount","setCoinAmount","coinData","store","balance","tokenType","contractAddress","user","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","display","justifyContent","alignItems","IconButton","id","undefined","event","MoreVert","isMediafile","mimetype","Card","sx","maxWidth","CardActionArea","CardMedia","objectFit","objectPosition","component","image","location","originalName","target","href","locationPreview","controls","title","dangerouslySetInnerHTML","__html","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","flexDirection","marginLeft","map","button","index","border","name","Menu","open","onClose","MenuListProps","anchorOrigin","vertical","horizontal","MenuItem","walletAddress","then","result","temporaryRoomData","room_background","room_thumbnail","users_cnt","unreadMessages","composing","toUpdate","setNewUserChatRoom","catch","error","console","log","Dialog","DialogContent","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","value","onChange","e","newValue","marginTop","Typography","fontWeight","coin","DialogActions","transferCoin","tokenName","Number","textMessage","roomJID","autoFocus","SystemMessage","textAlign","color","fontSize","fontFamily","key","ChatInRoom","messages","state","historyMessages","useChatRooms","loaderArchive","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","roomData","setRoomData","fileRef","useRef","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","showDialogTxt","setShowDialogTxt","headline","description","dialogTxt","setDialogTxt","useParams","firstLoadMessages","setFirstLoadMessages","onDrop","useCallback","acceptedFiles","sendFile","getRootProps","useDropzone","noClick","maxFiles","getPublicProfile","chooseRoom","currentRoomData","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","lastMessageID","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","trim","userAvatar","profileImage","finalMessageTxt","html","DOMParser","parseFromString","textContent","stripHtml","DOMPurify","notDisplayedValue","file","formData","FormData","append","uploadFile","results","chatName","createdAt","expiresAt","fileName","filename","isVisible","originalname","ownerKey","size","duration","updatedAt","userId","waveForm","attachmentId","_id","wrappable","current","timeoutId","clearTimeout","window","onblur","onfocus","lastUpFilteredMessage","isSystemMessage","Box","paddingBlock","responsive","scrollable","placeholder","loading","room","active","unreadCnt","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","disableOnYReachWhenNoScroll","typingIndicator","opacity","content","arr","previousJID","nextJID","currentJID","getPosition","toString","onPaste","Array","from","clipboardData","items","find","x","test","blob","getAsFile","onSend","onAttachClick","click","files","ref","DialogTitle","DialogContentText","CircularProgress","Button","Chat","Container"],"sourceRoot":""}