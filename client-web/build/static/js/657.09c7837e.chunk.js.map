{"version":3,"file":"static/js/657.09c7837e.chunk.js","mappings":"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","sources":["helpers/chat/createPrivateChat.ts","componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\nimport {useStoreState} from \"../../store\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    CONFERENCEDOMAIN: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    const currentChatRooms = useStoreState.getState().userChatRooms;\n\n    let isNewRoom = false;\n    if(currentChatRooms.filter((el) => el.jid === roomJid).length === 0){\n        isNewRoom = true;\n        xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n        xmpp.setOwner(combinedWalletAddress.toLowerCase());\n        xmpp.roomConfig(\n            combinedWalletAddress.toLowerCase(),\n            {roomName: combinedUsersName},\n        );\n        xmpp.subsribe(roomJid);\n        xmpp.presenceInRoom(roomJid);\n\n        setTimeout(() => {\n            xmpp.sendInvite(\n                underscoreManipulation(myWalletAddress),\n                roomJid.toLowerCase(),\n                underscoreManipulation(otherUserWalletAddress),\n            );\n        }, 1000);\n    }\n\n    return {roomJid, roomName: combinedUsersName, isNewRoom};\n};\n","import React, {useEffect, useState} from \"react\";\nimport { Message as KitMessage, MessageModel, Button, MessageSeparator } from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport {TMessageHistory, useStoreState} from \"../../../store\";\nimport {useHistory} from \"react-router\";\nimport {\n  Card, CardActionArea, CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  IconButton, Menu, MenuItem, TextField,\n} from \"@mui/material\";\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {transferCoin} from \"../../../http\";\nimport xmpp from \"../../../xmpp\";\nimport {createPrivateChat} from \"../../../helpers/chat/createPrivateChat\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel['position'];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any;\n  chooseDirectRoom: any;\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string\n}\n\ntype IDialog = \"transfer\" | \"image\" | \"ban\" | \"error\";\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender,\n  chooseDirectRoom\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [dialogMenuType, setDialogMenuType] = useState<IDialog>(\"transfer\");\n  const [dialogText, setDialogText] = useState(\"\");\n  const openMenu = Boolean(anchorEl);\n  const handleClickMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const [coinAmount, setCoinAmount] = useState(\"\");\n  const balance = useStoreState((store) => store.balance);\n  const coinData = balance.filter(el => !el.tokenType && el.contractAddress.length > 10)\n  const user = useStoreState((store) => store.user);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n\n  const openDialogMenu = (type: IDialog) => {\n    setAnchorEl(null)\n    setOpenDialog(true);\n    setDialogMenuType(type);\n  }\n\n  const sendCoins = () => {\n    // @ts-ignore\n    transferCoin(coinData[0].tokenSymbol, coinData[0].tokenName, Number(coinAmount), message.data.senderWalletAddress).then(() => {\n      const textMessage = user.firstName + \" \" + user.lastName + \" -> \" + coinAmount + \" \" + coinData[0].tokenName + \" -> \" + message.data.senderFirstName + \" \" + message.data.senderLastName;\n\n      xmpp.sendSystemMessage(\n          message.roomJID,\n          user.firstName,\n          user.lastName,\n          user.walletAddress,\n          textMessage,\n          null,\n          message.id\n      );\n\n      setOpenDialog(false);\n    }).catch(error => {\n      console.log(error);\n      setDialogText(\"An error occurred during the coin transfer.\");\n      setDialogMenuType(\"error\");\n    })\n  }\n\n  const openPrivateRoom = () => {\n    createPrivateChat(\n        user.walletAddress,\n        message.data.senderWalletAddress,\n        user.firstName,\n        message.data.senderFirstName,\n        '@conference.dev.dxmpp.com',\n        message.data.senderJID\n    ).then(result => {\n          if(result.isNewRoom){\n            useStoreState.getState().setLoaderArchive(true);\n            const temporaryRoomData = {\n              jid: result.roomJid,\n              name: result.roomName,\n              room_background: \"none\",\n              room_thumbnail: \"none\",\n              users_cnt: \"2\",\n              unreadMessages: 0,\n              composing: \"\",\n              toUpdate: true\n            }\n            useStoreState.getState().setNewUserChatRoom(temporaryRoomData);\n            console.log(\"SAVE ROOM TO LIST => \", useStoreState.getState().userChatRooms)\n            chooseDirectRoom(result.roomJid)\n            xmpp.getRooms();\n          }else{\n            chooseDirectRoom(result.roomJid)\n          }\n    }).catch(error => {\n      console.log(\"openPrivateRoom Error: \", error);\n    })\n  }\n\n  const fullViewImage = () => {\n    setOpenDialog(true);\n    setDialogMenuType(\"image\");\n  }\n\n  useEffect(() => {\n    if(message.data.quickReplies){\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n  }, [])\n\n  return (\n  <div is={\"Message\"}>\n    {position.separator ?\n      <MessageSeparator>\n        {position.separator}\n      </MessageSeparator> : null\n    }\n    <KitMessage\n      model={{\n        sender: firstName + \" \" + lastName,\n        direction: String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"outgoing\" : \"incoming\",\n        position: position.position,\n      }}\n      avatarPosition={String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"tr\" : \"tl\"}\n      avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n    >\n      {(position.type === \"first\" || position.type === \"single\") && (\n        <img\n          style={{\n            borderRadius: \"50%\",\n            boxSizing: \"border-box\",\n            width: \"42px\",\n            height: \"42px\",\n            cursor: \"pointer\"\n          }}\n          onClick={() => history.push(\"/profile/\"+message.data.senderWalletAddress)}\n          is={\"Avatar\"}\n          src={message.data.photoURL ? message.data.photoURL : \"https://icotar.com/initials/\" + firstName + \" \" + lastName}\n          onError={({ currentTarget }) => {\n            currentTarget.onerror = null;\n            currentTarget.src =\n              \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\n          }}\n          alt={firstName}\n        />\n      )}\n\n      <KitMessage.CustomContent>\n        {(position.type === \"first\" || position.type === \"single\") && (\n            <span style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n              <strong style={{cursor: \"pointer\"}} onClick={() => history.push(\"/profile/\" + message.data.senderWalletAddress)}>\n                {firstName} {lastName}\n                <br />\n              </strong>\n              {String(userJid).split(\"/\")[0] !== String(messageJid).split(\"/\")[0] ?\n                  <IconButton\n                      aria-label=\"more\"\n                      id=\"long-button\"\n                      aria-controls={openMenu ? 'long-menu' : undefined}\n                      aria-expanded={openMenu ? 'true' : undefined}\n                      aria-haspopup=\"true\"\n                      onClick={handleClickMenu}\n                  >\n                    <MoreVertIcon />\n                  </IconButton>\n              :null\n              }\n            </span>\n        )}\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"image\"?\n            <Card sx={{ maxWidth: 200 }}>\n              <CardActionArea onClick={fullViewImage}>\n                <CardMedia\n                    style={{height: 150, objectFit: \"cover\", objectPosition: \"left\"}}\n                    component=\"img\"\n                    height=\"150\"\n                    image={message.data.location}\n                    alt={message.data.originalName}\n                />\n              </CardActionArea>\n            </Card>\n            :null\n        }\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"application\"?\n            <a target=\"_blank\" href={message.data.location}>\n              <KitMessage.ImageContent src={message.data.locationPreview} alt={message.data.originalName} width={150} />\n              {message.data.mimetype.split(\"/\")[1]}\n            </a>\n            :null\n        }\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"video\" ?\n            <video controls width=\"200px\">\n              <source src={message.data.location} type={message.data.mimetype} title={message.data.originalName}/>\n              Sorry, your browser doesn't support videos.\n            </video>\n            : null\n        }\n\n        {!message.data.isMediafile ?\n            message.body\n            : null\n        }\n      </KitMessage.CustomContent>\n\n      {(position.type === \"last\" || position.type === \"single\") && (\n        <KitMessage.Footer\n          sentTime={\n            differenceInHours(new Date(), new Date(message.date)) > 5\n              ? format(new Date(message.date), \"h:mm:ss a\")\n              : formatDistance(subDays(new Date(message.date), 0), new Date(), {\n                  addSuffix: true,\n                })\n          }\n        />\n      )}\n    </KitMessage>\n        {buttons ?\n            <div style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"max-content\",\n              marginLeft: \"45px\"\n            }}>\n              {buttons.map((button, index) => {\n                return (\n                  <Button onClick={() => buttonSender(button)} key={index} border>{button.name}</Button>\n                );\n             })}\n            </div>\n          : null}\n    <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={openMenu}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n    >\n      <MenuItem onClick={() => openDialogMenu(\"transfer\")}>Transfer coins</MenuItem>\n      <MenuItem onClick={openPrivateRoom}>Direct message</MenuItem>\n      <MenuItem onClick={() => setAnchorEl(null)}>Ban this user</MenuItem>\n    </Menu>\n\n    <Dialog\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        maxWidth={\"xl\"}\n        aria-labelledby=\"responsive-dialog-title\"\n    >\n      <DialogContent>\n        {dialogMenuType === \"error\" ?\n            <div>\n              {dialogText}\n            </div>\n            :null\n        }\n\n        {dialogMenuType === \"transfer\" ?\n            <div style={{display: \"flex\", flexDirection: \"column\"}}>\n              Rewards <strong>{coinData[0].tokenName}</strong> with coins\n              <TextField id=\"outlined-basic\" label=\"Outlined\" type={\"number\"} variant=\"outlined\" value={coinAmount} onChange={event => setCoinAmount(event.target.value)} />\n              <Button onClick={sendCoins}>Send</Button>\n            </div>\n        :null\n        }\n\n        {dialogMenuType === \"image\" ?\n            <div>\n              <img src={message.data.location} alt={message.data.originalName} style={{maxWidth: \"100%\"}} />\n            </div>\n        :null\n        }\n\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setOpenDialog(false)} autoFocus>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport Box from \"@mui/material/Box\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport { getPublicProfile, uploadFile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Message } from \"../../componets/Chat/Messages/Message\";\nimport { SystemMessage } from \"../../componets/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  useMediaQuery,\n  useTheme,\n} from \"@mui/material\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useDropzone } from 'react-dropzone';\n\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if (arr[index - 1] && message) {\n    if (\n      format(new Date(arr[index - 1]?.date), \"dd\") !==\n      format(new Date(message.date), \"dd\")\n    ) {\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID !== currentJID) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showDialogTxt, setShowDialogTxt] = useState(false);\n  const [dialogTxt, setDialogTxt] = useState<{\n    headline: string;\n    description: string;\n  }>({ headline: \"\", description: \"\" });\n  // @ts-ignore\n  const { roomJID } = useParams();\n  const history = useHistory();\n  const [firstLoadMessages, setFirstLoadMessages] = useState(true);\n\n  const onDrop = useCallback(acceptedFiles => {\n    sendFile(acceptedFiles[0]);\n  }, [roomData]);\n\n  const {\n    getRootProps\n  } = useDropzone({\n    onDrop,\n    noClick: true,\n    maxFiles: 1\n  });\n  const onYReachStart = () => {\n    const filteredMessages = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n    );\n\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const chooseRoom = (jid: string) => {\n    history.push(\"/chat/\" + jid.split(\"@\")[0]);\n    setCurrentRoom(jid);\n    const currentRoomData = useChatRooms.filter((e) => e.jid === jid)[0];\n    setRoomData(currentRoomData);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n    setFirstLoadMessages(true)\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length <= 10 &&\n      filteredMessages.length > 0\n    ) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 50);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\n      return format(new Date(messagesInRoom[0].date), \"hh:mm\");\n    } else {\n      return formatDistance(\n        subDays(new Date(messagesInRoom[0].date), 0),\n        new Date(),\n        { addSuffix: true }\n      );\n    }\n  };\n\n  const sendMessage = (button: any) => {\n    let userAvatar = \"\";\n    if (profile?.profileImage) {\n      userAvatar = profile?.profileImage;\n    }\n\n    xmpp.sendMessage(\n      currentRoom,\n      user.firstName,\n      user.lastName,\n      userAvatar,\n      user.walletAddress,\n      typeof button === \"object\" ? button.value : myMessage.split('<br>').join('\\n'),\n      typeof button === \"object\" ? button.notDisplayedValue : null\n    );\n  };\n\n  const sendFile = (file: File) => {\n    setDialogTxt({\n      headline: \"File is loading, please wait...\",\n      description: \"\",\n    });\n    setOpenDialog(true);\n\n    const formData = new FormData();\n    formData.append(\"files\", file);\n\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n          setOpenDialog(false);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogTxt({\n          headline: \"Error\",\n          description: \"An error occurred while uploading the file\",\n        });\n        setShowDialogTxt(true);\n      });\n    if(fileRef.current){\n      fileRef.current.value = \"\";\n    }\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n\n  const handlePaste = event => {\n    // @ts-ignore\n    let item = Array.from(event.clipboardData.items).find(x => /^image\\//.test(x.type));\n    if(item){\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob)\n    }\n  };\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if (currentUntrackedChatRoom) {\n      if (\n        !roomJID ||\n        roomJID === \"none\" ||\n        currentUntrackedChatRoom.split(\"@\")[0] === roomJID\n      ) {\n        chooseRoom(currentUntrackedChatRoom);\n      }\n    }\n\n    if (\n      currentUntrackedChatRoom.split(\"@\")[0] !== roomJID &&\n      roomJID !== \"none\"\n    ) {\n      const conferenceRoomJID = roomJID + \"@conference.dev.dxmpp.com\";\n      useStoreState.getState().setCurrentUntrackedChatRoom(conferenceRoomJID);\n      chooseRoom(conferenceRoomJID);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    };\n\n    window.onfocus = () => {\n      if (currentRoom) {\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    };\n  }, [currentRoom]);\n\n  useEffect(() => {\n    const filteredMessages = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n    );\n\n    if(!loaderArchive && filteredMessages.length > 0 && filteredMessages.length <= 51 && currentRoom && firstLoadMessages){\n      const lastUpFilteredMessage = filteredMessages[0];\n\n      if(filteredMessages.length >= 10 && filteredMessages.length < 15 && lastUpFilteredMessage.data.isSystemMessage){\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(currentRoom, String(lastUpFilteredMessage.id), 5);\n      }else if(filteredMessages.length === 1){\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(currentRoom, String(lastUpFilteredMessage.id), 50);\n      }\n    }\n  }, [messages])\n\n  return (\n    <Box style={{paddingBlock: \"20px\", height: \"100%\"}}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {useChatRooms.map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_background !== \"none\"\n                      ? room.room_background\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <div {...getRootProps()} style={{width: \"100%\", height: \"100%\"}}>\n        <ChatContainer >\n          {!!roomData && (\n            <ConversationHeader>\n              <ConversationHeader.Back />\n              {messages.filter((item: any) => item.roomJID === currentRoom)\n                .length > 0 && (\n                <ConversationHeader.Content\n                  userName={roomData.name}\n                  info={\n                    \"Active \" +\n                    formatDistance(\n                      subDays(\n                        new Date(\n                          messages\n                            .filter((item: any) => item.roomJID === currentRoom)\n                            .slice(-1)[0].date\n                        ),\n                        0\n                      ),\n                      new Date(),\n                      { addSuffix: true }\n                    )\n                  }\n                />\n              )}\n              <ConversationHeader.Actions>\n                <BookmarkRemoveIcon />\n              </ConversationHeader.Actions>\n            </ConversationHeader>\n          )}\n          <MessageList\n            loadingMore={loaderArchive}\n            onYReachStart={onYReachStart}\n            disableOnYReachWhenNoScroll={true}\n            typingIndicator={\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                ?.composing && (\n                <TypingIndicator\n                  content={\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                      ?.composing\n                  }\n                />\n              )\n            }\n          >\n            {messages\n              .filter((item: any) => item.roomJID === currentRoom)\n              .map((message, index, arr) => {\n                const position = getPosition(arr, message, index);\n                if (message.data.isSystemMessage === \"false\") {\n                  return (\n                    <Message\n                      key={message.id}\n                      is={\"Message\"}\n                      position={position}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                      buttonSender={sendMessage}\n                      chooseDirectRoom={chooseRoom}\n                    />\n                  );\n                } else {\n                  return (\n                    <SystemMessage\n                      key={message.id}\n                      is={\"Message\"}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                    />\n                  );\n                }\n              })}\n            {messages.length <= 0 ||\n              (!currentRoom && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  {!loaderArchive ? (\n                    <span>\n                      {!currentRoom &&\n                        \"To get started, please select a chat room.\"}\n                    </span>\n                  ) : (\n                    \"Loading...\"\n                  )}\n                </MessageList.Content>\n              ))}\n            {!loaderArchive &&\n              currentRoom &&\n              messages.filter((item: any) => item.roomJID === currentRoom)\n                .length <= 0 && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  Message list is empty\n                </MessageList.Content>\n              )}\n          </MessageList>\n          {!!roomData && (\n            <div is={\"MessageInput\"}>\n              <MessageInput\n                onPaste={handlePaste}\n                placeholder=\"Type message here\"\n                onChange={setMessage}\n                onSend={sendMessage}\n                onAttachClick={() => fileRef.current.click()}\n              />\n              <input\n                type=\"file\"\n                name=\"file\"\n                id=\"file\"\n                onChange={(event) => sendFile(event.target.files[0])}\n                ref={fileRef}\n                style={{ display: \"none\" }}\n              />\n            </div>\n          )}\n        </ChatContainer>\n        </div>\n      </MainContainer>\n\n      <Dialog\n        fullScreen={fullScreen}\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {dialogTxt.headline}\n        </DialogTitle>\n        <DialogContent>\n          {showDialogTxt && dialogTxt.description.length > 0 ? (\n            <DialogContentText>{dialogTxt.description}</DialogContentText>\n          ) : (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <CircularProgress />\n            </Box>\n          )}\n        </DialogContent>\n        {showDialogTxt ? (\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)} autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        ) : null}\n      </Dialog>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n      <ChatInRoom />\n    </Container>\n  );\n}\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","CONFERENCEDOMAIN","userJID","combinedWalletAddress","sort","join","roomJid","combinedUsersName","currentChatRooms","useStoreState","userChatRooms","isNewRoom","filter","el","jid","length","xmpp","roomName","setTimeout","Message","message","userJid","position","buttonSender","chooseDirectRoom","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","openDialog","setOpenDialog","React","anchorEl","setAnchorEl","dialogMenuType","setDialogMenuType","dialogText","setDialogText","openMenu","Boolean","coinAmount","setCoinAmount","coinData","store","balance","tokenType","contractAddress","user","loaderArchive","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","display","justifyContent","alignItems","IconButton","id","undefined","event","MoreVert","isMediafile","mimetype","Card","sx","maxWidth","CardActionArea","CardMedia","objectFit","objectPosition","component","image","location","originalName","target","href","locationPreview","controls","title","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","flexDirection","marginLeft","map","button","index","border","name","Menu","open","onClose","MenuListProps","anchorOrigin","vertical","horizontal","MenuItem","walletAddress","then","result","setLoaderArchive","temporaryRoomData","room_background","room_thumbnail","users_cnt","unreadMessages","composing","toUpdate","setNewUserChatRoom","console","log","catch","error","Dialog","DialogContent","tokenName","TextField","label","variant","value","onChange","transferCoin","tokenSymbol","Number","textMessage","roomJID","DialogActions","autoFocus","SystemMessage","textAlign","color","fontSize","fontFamily","key","ChatInRoom","messages","state","historyMessages","useChatRooms","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","roomData","setRoomData","fileRef","useRef","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","showDialogTxt","setShowDialogTxt","headline","description","dialogTxt","setDialogTxt","useParams","firstLoadMessages","setFirstLoadMessages","onDrop","useCallback","acceptedFiles","sendFile","getRootProps","useDropzone","noClick","maxFiles","getPublicProfile","chooseRoom","currentRoomData","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","lastMessageID","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","userAvatar","profileImage","notDisplayedValue","file","formData","FormData","append","uploadFile","results","chatName","createdAt","expiresAt","fileName","filename","isVisible","originalname","ownerKey","size","duration","updatedAt","userId","waveForm","attachmentId","_id","wrappable","current","timeoutId","clearTimeout","conferenceRoomJID","window","onblur","onfocus","lastUpFilteredMessage","isSystemMessage","Box","paddingBlock","responsive","scrollable","placeholder","loading","room","active","unreadCnt","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","disableOnYReachWhenNoScroll","typingIndicator","content","arr","previousJID","nextJID","currentJID","getPosition","toString","onPaste","Array","from","clipboardData","items","find","x","test","blob","getAsFile","onSend","onAttachClick","click","files","ref","DialogTitle","DialogContentText","CircularProgress","Button","Chat","Container"],"sourceRoot":""}