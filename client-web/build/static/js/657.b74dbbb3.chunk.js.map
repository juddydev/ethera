{"version":3,"file":"static/js/657.b74dbbb3.chunk.js","mappings":"6TAwBaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,QACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,SACAC,EACI,EADJA,aAEMC,EAAYJ,EAAQK,KAAKC,gBACzBC,EAAWP,EAAQK,KAAKG,eACxBC,EAAaT,EAAQK,KAAKK,UAC1BC,GAAUC,EAAAA,EAAAA,MAChB,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACLhB,EAAQK,KAAKY,cACdF,EAAWG,KAAKC,MAAMnB,EAAQK,KAAKY,cAEtC,GAAE,KAGH,iBAAKG,GAAI,UAAT,UACGlB,EAASmB,WACR,SAAC,KAAD,UACGnB,EAASmB,YACU,MAExB,UAAC,KAAD,CAEEC,MAAO,CACLC,OAAQnB,EAAY,IAAMG,EAC1BiB,UAAWC,OAAOxB,GAASyB,MAAM,KAAK,KAAOD,OAAOhB,GAAYiB,MAAM,KAAK,GAAK,WAAa,WAC7FxB,SAAUA,EAASA,UAErByB,eAAgBF,OAAOxB,GAASyB,MAAM,KAAK,KAAOD,OAAOhB,GAAYiB,MAAM,KAAK,GAAK,KAAO,KAC5FE,aAAgC,UAAlB1B,EAAS2B,MAAsC,WAAlB3B,EAAS2B,KARtD,WAUsB,UAAlB3B,EAAS2B,MAAsC,WAAlB3B,EAAS2B,QACtC,gBACEC,MAAO,CACLC,aAAc,MACdC,UAAW,aACXC,MAAO,OACPC,OAAQ,OACRC,OAAQ,WAEVC,QAAS,kBAAMzB,EAAQ0B,KAAK,YAAYrC,EAAQK,KAAKiC,oBAA5C,EACTlB,GAAI,SACJmB,IAAKvC,EAAQK,KAAKmC,SAClBC,QAAS,YAAwB,IAArBC,EAAoB,EAApBA,cACVA,EAAcC,QAAU,KACxBD,EAAcH,IACZ,+BAAiCnC,EAAY,IAAMG,CACtD,EACDqC,IAAKxC,KAIT,UAAC,mBAAD,YACsB,UAAlBF,EAAS2B,MAAsC,WAAlB3B,EAAS2B,QACtC,oBAAQC,MAAO,CAACK,OAAQ,WAAYC,QAAS,kBAAMzB,EAAQ0B,KAAK,YAAcrC,EAAQK,KAAKiC,oBAA9C,EAA7C,UACGlC,EADH,IACeG,GACb,qBAIHP,EAAQK,KAAKwC,aAAuD,UAAxC7C,EAAQK,KAAKyC,SAASpB,MAAM,KAAK,IAC3D,SAAC,kBAAD,CAAyBa,IAAKvC,EAAQK,KAAK0C,SAAUH,IAAK5C,EAAQK,KAAK2C,aAAcf,MAAO,MAC1F,KAGJjC,EAAQK,KAAKwC,aAAuD,UAAxC7C,EAAQK,KAAKyC,SAASpB,MAAM,KAAK,IAC1D,mBAAOuB,UAAQ,EAAChB,MAAM,QAAtB,WACE,mBAAQM,IAAKvC,EAAQK,KAAK0C,SAAUlB,KAAM7B,EAAQK,KAAKyC,SAAUI,MAAOlD,EAAQK,KAAK2C,eADvF,iDAIE,KAGJhD,EAAQK,KAAKwC,YAET,KADF7C,EAAQmD,SAKM,SAAlBjD,EAAS2B,MAAqC,WAAlB3B,EAAS2B,QACrC,SAAC,YAAD,CACEuB,UACEC,EAAAA,EAAAA,GAAkB,IAAIC,KAAQ,IAAIA,KAAKtD,EAAQuD,OAAS,GACpDC,EAAAA,EAAAA,GAAO,IAAIF,KAAKtD,EAAQuD,MAAO,cAC/BE,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAQ,IAAIJ,KAAKtD,EAAQuD,MAAO,GAAI,IAAID,KAAQ,CAC7DK,WAAW,QA/DlB3D,EAAQ4D,KAqEV9C,GACG,gBAAKgB,MAAO,CACV+B,QAAS,OACTC,cAAe,SACf7B,MAAO,cACP8B,WAAY,QAJd,SAMGjD,EAAQkD,KAAI,SAACC,EAAQC,GACpB,OACE,SAAC,KAAD,CAAQ9B,QAAS,kBAAMjC,EAAa8D,EAAnB,EAAwCE,QAAM,EAA/D,SAAiEF,EAAOG,MAAtBF,EAEtD,MAEF,OAGX,EC9HYG,EAAoC,SAAC,GAAwB,IAAvBrE,EAAsB,EAAtBA,QAAsB,EAAbC,QACxD,OACI,gBAAK6B,MAAO,CACRwC,UAAW,SACXC,MAAO,UACPC,SAAU,OACVxC,UAAW,aACXyC,WAAY,sDALhB,SAOKzE,EAAQmD,MADLnD,EAAQ4D,IAIvB,ECwDM,SAASc,IAAc,IAAD,IACrBC,GAAWC,EAAAA,EAAAA,IAAc,SAACC,GAAD,OAAWA,EAAMC,eAAjB,IACzBC,GAAOH,EAAAA,EAAAA,IAAc,SAACI,GAAD,OAAWA,EAAMD,IAAjB,IACrBE,GAAeL,EAAAA,EAAAA,IAAc,SAACI,GAAD,OAAWA,EAAME,aAAjB,IAC7BC,GAAgBP,EAAAA,EAAAA,IAAc,SAACI,GAAD,OAAWA,EAAMG,aAAjB,IAC9BC,GAA2BR,EAAAA,EAAAA,IAAc,SAACI,GAAD,OAAWA,EAAMI,wBAAjB,IAC/C,GAA8BvE,EAAAA,EAAAA,YAA9B,eAAOwE,EAAP,KAAgBC,EAAhB,KACA,GAAkCzE,EAAAA,EAAAA,UAAS,IAA3C,eAAO0E,EAAP,KAAkBC,EAAlB,KACA,GAAsC3E,EAAAA,EAAAA,UAAS,IAA/C,eAAO4E,EAAP,KAAoBC,EAApB,KACA,GAAgC7E,EAAAA,EAAAA,UAM7B,CACD8E,IAAK,GACLvB,KAAM,GACNwB,gBAAiB,GACjBC,eAAgB,GAChBC,UAAW,KAXb,eAAOC,EAAP,KAAiBC,EAAjB,MAyBAhF,EAAAA,EAAAA,YAAU,YACRiF,EAAAA,EAAAA,IAAiBlB,EAAKmB,eAAeC,MAAK,SAACC,GACzCd,EAAWc,EAAO/F,KAAK+F,OACxB,GACF,GAAE,IAEH,IAAMC,EAAa,SAACV,GAClBD,EAAeC,GACfK,EAAYf,EAAaqB,QAAO,SAACC,GAAD,OAAOA,EAAEZ,MAAQA,CAAjB,IAAsB,IACtDf,EAAAA,EAAAA,WAAyB4B,qBAAqBb,GAC9Cf,EAAAA,EAAAA,WAAyB6B,4BAA4Bd,GAErD,IAAMe,EAAmB/B,EAAS2B,QAChC,SAACK,GAAD,OAAeA,EAAKC,UAAYjB,CAAhC,IAGF,IAAKR,GAAiBuB,EAAiBG,QAAU,IAAMH,EAAiBG,OAAS,EAAG,CAClF,IAAMC,EAAgBJ,EAAiB,GAAGK,GAC1CC,EAAAA,GAAAA,oBAAyBrB,EAAKlE,OAAOqF,GAAgB,GACtD,CACF,EAEKG,EAAsB,SAACL,GAC3B,IAAMM,EAAiBvC,EACpB2B,QAAO,SAACK,GAAD,OAAeA,EAAKC,UAAYA,CAAhC,IACPO,OAAO,GACV,OAAIhC,GAAiB+B,EAAeL,QAAU,EACrC,aAGLK,EAAeL,OAAS,EACnBK,EAAe,GAAG/D,KAEpB,iBACR,EAEKiE,EAAoB,SAACR,GACzB,IAAMM,EAAiBvC,EACpB2B,QAAO,SAACK,GAAD,OAAeA,EAAKC,UAAYA,CAAhC,IACPO,OAAO,GACV,OAAID,EAAeL,QAAU,EACpB,IAGLxD,EAAAA,EAAAA,GAAkB,IAAIC,KAAQ,IAAIA,KAAK4D,EAAe,GAAG3D,OAAS,GAC7DC,EAAAA,EAAAA,GAAO,IAAIF,KAAK4D,EAAe,GAAG3D,MAAO,UAEzCE,EAAAA,EAAAA,IACLC,EAAAA,EAAAA,GAAQ,IAAIJ,KAAK4D,EAAe,GAAG3D,MAAO,GAC1C,IAAID,KACJ,CAAEK,WAAW,GAGlB,EAEK0D,EAAc,SAACpD,GACnB,IAAIqD,EAAa,GACjB,OAAIjC,QAAJ,IAAIA,GAAAA,EAASkC,eACXD,EAAU,OAAGjC,QAAH,IAAGA,OAAH,EAAGA,EAASkC,cAGxBP,EAAAA,GAAAA,YACEvB,EACAV,EAAK3E,UACL2E,EAAKxE,SACL+G,EACAvC,EAAKmB,cACa,kBAAXjC,EAAsBA,EAAOuD,MAAQjC,EACxB,kBAAXtB,EAAsBA,EAAOwD,kBAAoB,KAE7D,EA+BD,OAxBAzG,EAAAA,EAAAA,YAAU,WACR,IAAM0G,EAAYC,YAAW,WAC3BX,EAAAA,GAAAA,gBAAqBjC,EAAKmB,cAAeH,EAASJ,IACnD,GAAE,KACH,OAAO,kBAAMiC,aAAaF,EAAnB,CACR,GAAE,CAACnC,KAEJvE,EAAAA,EAAAA,YAAU,WACLoE,GACDiB,EAAWjB,GAGbyC,OAAOC,OAAS,WACdlD,EAAAA,EAAAA,WAAyB6B,4BAA4B,GACtD,EAEDoB,OAAOE,QAAU,WACZtC,IACDb,EAAAA,EAAAA,WAAyB6B,4BAA4BhB,GACrDb,EAAAA,EAAAA,WAAyB4B,qBAAqBf,GAEjD,CACF,GAAE,CAACA,KAGF,SAACuC,EAAA,EAAD,CAAKlG,MAAO,CAAEI,OAAQ,SAAtB,UACE,UAAC,KAAD,CAAe+F,YAAU,EAAzB,WACE,UAAC,KAAD,CAAS/H,SAAS,OAAOgI,YAAY,EAArC,WACE,SAAC,KAAD,CAAQC,YAAY,eACpB,SAAC,KAAD,CAAkBC,QAASjD,EAA3B,SACGF,EAAajB,KAAI,SAACqE,GAAD,OAChB,SAAC,KAAD,CACEC,OAAQD,EAAK1C,MAAQF,EAErB8C,UAAWF,EAAKG,eAChBpG,QAAS,kBAAMiE,EAAWgC,EAAK1C,IAAtB,EACTvB,KAAMiE,EAAKjE,KACXqE,KAAMxB,EAAoBoB,EAAK1C,KAC/B+C,iBAAkBtB,EAAkBiB,EAAK1C,KAP3C,UASE,SAAC,KAAD,CACEpD,IAC2B,SAAzB8F,EAAKzC,gBACDyC,EAAKzC,gBACL,+BAAiCyC,EAAKjE,QAXzCiE,EAAK1C,IAHI,UAsBtB,UAAC,KAAD,aACKI,EAAS3B,OACV,UAAC,KAAD,YACE,SAAC,UAAD,IACCO,EAAS2B,QAAO,SAACK,GAAD,OAAeA,EAAKC,UAAYnB,CAAhC,IACdoB,OAAS,IACV,SAAC,aAAD,CACE8B,SAAU5C,EAAS3B,KACnBqE,KACE,WACAhF,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,GACE,IAAIJ,KACFqB,EACG2B,QAAO,SAACK,GAAD,OAAeA,EAAKC,UAAYnB,CAAhC,IACP0B,OAAO,GAAG,GAAG5D,MAElB,GAEF,IAAID,KACJ,CAAEK,WAAW,OAKrB,SAAC,aAAD,WACE,SAACiF,EAAA,EAAD,UAIN,UAAC,KAAD,CACEC,YAAa1D,EACb2D,cA5KY,WACpB,IAAI3D,EAAJ,CAGE,IAAM2B,EAAgBnC,EAAS2B,QAC7B,SAACK,GAAD,OAAeA,EAAKC,UAAYnB,CAAhC,IACA,GAAGsB,GACLC,EAAAA,GAAAA,oBAAyBvB,EAAahE,OAAOqF,GAAgB,GAC9D,CACF,EAoKSiC,kBACG,UAAC9D,EAAaqB,QAAO,SAACC,GAAD,OAAOA,EAAEZ,MAAQF,CAAjB,IAA8B,UAAnD,QAAC,EACEuD,aACF,SAAC,KAAD,CACEC,QAAO,UACLhE,EAAaqB,QAAO,SAACC,GAAD,OAAOA,EAAEZ,MAAQF,CAAjB,IAA8B,UAD7C,aACL,EACIuD,YATd,UAeGrE,EACE2B,QAAO,SAACK,GAAD,OAAeA,EAAKC,UAAYnB,CAAhC,IACPzB,KAAI,SAAChE,EAASkE,EAAOgF,GACpB,IAC6C,IAWxC,IAZChJ,EAhQF,SAClBgJ,EACAlJ,EACAkE,GACI,IAAD,UAU0B,EATvBiF,EAAW,UAAGD,EAAIhF,EAAQ,UAAf,iBAAG,EAAgB7D,KAAKK,iBAAxB,aAAG,EAAgCgB,MAAM,KAAK,GACzD0H,EAAO,UAAGF,EAAIhF,EAAQ,UAAf,iBAAG,EAAgB7D,KAAKK,iBAAxB,aAAG,EAAgCgB,MAAM,KAAK,GACrD2H,EAAU,UAAGrJ,EAAQK,KAAKK,iBAAhB,aAAG,EAAwBgB,MAAM,KAAK,GAElD0E,EAA2B,CAC7BlG,SAAU,SACV2B,KAAM,UASR,OANGqH,EAAIhF,EAAQ,IAAMlE,IAChBwD,EAAAA,EAAAA,GAAO,IAAIF,KAAJ,UAAS4F,EAAIhF,EAAQ,UAArB,aAAS,EAAgBX,MAAO,SAAUC,EAAAA,EAAAA,GAAO,IAAIF,KAAKtD,EAAQuD,MAAO,QACjF6C,EAAO/E,WAAYmC,EAAAA,EAAAA,GAAO,IAAIF,KAAKtD,EAAQuD,MAAO,uBAIlD4F,IAAgBE,GAAcD,IAAYC,EACrCjD,EAGL+C,IAAgBE,GAAcD,IAAYC,GAC5CjD,EAAOlG,SAAW,QAClBkG,EAAOvE,KAAO,QACPuE,GAGL+C,IAAgBE,GAAcD,IAAYC,GAC5CjD,EAAOlG,SAAW,SAClBkG,EAAOvE,KAAO,SACPuE,GAGL+C,IAAgBE,GAAcD,IAAYC,GAC5CjD,EAAOlG,SAAW,SAClBkG,EAAOvE,KAAO,OACPuE,GAGFA,CACR,CAqNgCkD,CAAYJ,EAAKlJ,EAASkE,GAC3C,MAAoC,UAAjClE,EAAQK,KAAKkJ,iBAEV,SAACxJ,EAAD,CAEIqB,GAAI,UACJlB,SAAUA,EACVF,QAASA,EACTC,QAAO,UAAE+G,EAAAA,GAAAA,cAAF,iBAAE,EAAarB,WAAf,aAAE,EAAkB6D,WAC3BrJ,aAAckH,GALTrH,EAAQ+G,KAUjB,SAAC1C,EAAD,CACIjD,GAAI,UACJpB,QAASA,EACTC,QAAO,UAAE+G,EAAAA,GAAAA,cAAF,iBAAE,EAAarB,WAAf,aAAE,EAAkB6D,YAItC,IACF7E,EAASkC,QAAU,IAChBpB,IACA,SAAC,aAAD,CACE3D,MAAO,CACL+B,QAAS,OACTC,cAAe,SACf2F,eAAgB,SAChBvH,OAAQ,OACRoC,UAAW,SACXE,SAAU,SAPd,SAUIW,EAMA,cALA,2BACIM,GACA,kDAOVN,GACAM,GACAd,EAAS2B,QAAO,SAACK,GAAD,OAAeA,EAAKC,UAAYnB,CAAhC,IACboB,QAAU,IACX,SAAC,aAAD,CACE/E,MAAO,CACL+B,QAAS,OACTC,cAAe,SACf2F,eAAgB,SAChBvH,OAAQ,OACRoC,UAAW,SACXE,SAAU,SAPd,wCAcHuB,EAAS3B,OACV,SAAC,KAAD,CACE+D,YAAY,oBACZuB,SA1KO,SAAClC,GAClBhC,EAAagC,GACbR,EAAAA,GAAAA,YAAiBjC,EAAKmB,cAAeH,EAASJ,IAAKZ,EAAK3E,UAAU,IAAI2E,EAAKxE,SAC5E,EAwKWoJ,OAAQtC,WAOrB,CClWc,SAASuC,IACpB,IAAM7E,GAAOH,EAAAA,EAAAA,IAAc,SAACC,GAAD,OAAWA,EAAME,IAAjB,IACrBJ,GAAWC,EAAAA,EAAAA,IAAc,SAACC,GAAD,OAAWA,EAAMF,QAAjB,IACzBhE,GAAUC,EAAAA,EAAAA,MAOhB,OALAI,EAAAA,EAAAA,YAAU,WACD+D,EAAK3E,WACNO,EAAQ0B,KAAK,IAEpB,GAAE,CAAC0C,EAAK3E,UAAWO,KAEhB,UAACkJ,EAAA,EAAD,CAAWC,SAAS,KAAKhI,MAAO,CAAEI,OAAQ,sBAA1C,WACI,SAAC8F,EAAA,EAAD,oBACA,SAACA,EAAA,EAAD,UAAMrD,EAASkC,UACf,SAACnC,EAAD,MAGX,C","sources":["componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport { Message as KitMessage, MessageModel, Button, MessageSeparator } from \"@chatscope/chat-ui-kit-react\";\r\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\r\nimport { TMessageHistory } from \"../../../store\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nexport interface IMessage {\r\n  message: TMessageHistory;\r\n  userJid: string;\r\n  position: {\r\n    type: string;\r\n    position: MessageModel['position'];\r\n    separator?: string;\r\n  };\r\n  is?: string;\r\n  buttonSender: any\r\n}\r\n\r\nexport interface IButtons {\r\n  name: string;\r\n  notDisplayedValue: string;\r\n  value: string\r\n}\r\n\r\nexport const Message: React.FC<IMessage> = ({\r\n  message,\r\n  userJid,\r\n  position,\r\n  buttonSender\r\n}) => {\r\n  const firstName = message.data.senderFirstName;\r\n  const lastName = message.data.senderLastName;\r\n  const messageJid = message.data.senderJID;\r\n  const history = useHistory();\r\n  const [buttons, setButtons] = useState<IButtons[]>();\r\n\r\n  useEffect(() => {\r\n    if(message.data.quickReplies){\r\n      setButtons(JSON.parse(message.data.quickReplies));\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n  <div is={\"Message\"}>\r\n    {position.separator ?\r\n      <MessageSeparator>\r\n        {position.separator}\r\n      </MessageSeparator> : null\r\n    }\r\n    <KitMessage\r\n      key={message.key}\r\n      model={{\r\n        sender: firstName + \" \" + lastName,\r\n        direction: String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"outgoing\" : \"incoming\",\r\n        position: position.position,\r\n      }}\r\n      avatarPosition={String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"tr\" : \"tl\"}\r\n      avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\r\n    >\r\n      {(position.type === \"first\" || position.type === \"single\") && (\r\n        <img\r\n          style={{\r\n            borderRadius: \"50%\",\r\n            boxSizing: \"border-box\",\r\n            width: \"42px\",\r\n            height: \"42px\",\r\n            cursor: \"pointer\"\r\n          }}\r\n          onClick={() => history.push(\"/profile/\"+message.data.senderWalletAddress)}\r\n          is={\"Avatar\"}\r\n          src={message.data.photoURL}\r\n          onError={({ currentTarget }) => {\r\n            currentTarget.onerror = null;\r\n            currentTarget.src =\r\n              \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\r\n          }}\r\n          alt={firstName}\r\n        />\r\n      )}\r\n\r\n      <KitMessage.CustomContent>\r\n        {(position.type === \"first\" || position.type === \"single\") && (\r\n          <strong style={{cursor: \"pointer\"}} onClick={() => history.push(\"/profile/\" + message.data.senderWalletAddress)}>\r\n            {firstName} {lastName}\r\n            <br />\r\n          </strong>\r\n        )}\r\n\r\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"image\"?\r\n           <KitMessage.ImageContent src={message.data.location} alt={message.data.originalName} width={200} />\r\n            :null\r\n        }\r\n\r\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"video\" ?\r\n            <video controls width=\"200px\">\r\n              <source src={message.data.location} type={message.data.mimetype} title={message.data.originalName}/>\r\n              Sorry, your browser doesn't support videos.\r\n            </video>\r\n            : null\r\n        }\r\n\r\n        {!message.data.isMediafile ?\r\n            message.body\r\n            : null\r\n        }\r\n      </KitMessage.CustomContent>\r\n\r\n      {(position.type === \"last\" || position.type === \"single\") && (\r\n        <KitMessage.Footer\r\n          sentTime={\r\n            differenceInHours(new Date(), new Date(message.date)) > 5\r\n              ? format(new Date(message.date), \"h:mm:ss a\")\r\n              : formatDistance(subDays(new Date(message.date), 0), new Date(), {\r\n                  addSuffix: true,\r\n                })\r\n          }\r\n        />\r\n      )}\r\n    </KitMessage>\r\n        {buttons ?\r\n            <div style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              width: \"max-content\",\r\n              marginLeft: \"45px\"\r\n            }}>\r\n              {buttons.map((button, index) => {\r\n                return (\r\n                  <Button onClick={() => buttonSender(button)} key={index} border>{button.name}</Button>\r\n                );\r\n             })}\r\n            </div>\r\n          : null}\r\n  </div>\r\n  );\r\n};\r\n","import {TMessageHistory} from \"../../../store\";\r\nimport React from \"react\";\r\n\r\nexport interface IMessage {\r\n    message: TMessageHistory;\r\n    userJid: string;\r\n    is?: string;\r\n}\r\n\r\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\r\n    return (\r\n        <div style={{\r\n            textAlign: \"center\",\r\n            color: \"#6ea9d7\",\r\n            fontSize: \".8em\",\r\n            boxSizing: \"border-box\",\r\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\r\n        }} key={message.key}>\r\n            {message.body}\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport xmpp from \"../../xmpp\";\r\nimport { TMessageHistory, useStoreState } from \"../../store\";\r\nimport { getPublicProfile } from \"../../http\";\r\nimport { TProfile } from \"../Profile/types\";\r\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\r\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\r\n\r\nimport {\r\n  MainContainer,\r\n  Avatar,\r\n  ChatContainer,\r\n  MessageList,\r\n  MessageInput,\r\n  Conversation,\r\n  ConversationList,\r\n  Sidebar,\r\n  Search,\r\n  ConversationHeader,\r\n  TypingIndicator,\r\n  MessageModel,\r\n} from \"@chatscope/chat-ui-kit-react\";\r\nimport {Message} from \"../../componets/Chat/Messages/Message\";\r\nimport {SystemMessage} from \"../../componets/Chat/Messages/SystemMessage\";\r\n\r\ntype IMessagePosition = {\r\n  position: MessageModel[\"position\"];\r\n  type: string;\r\n  separator?: string;\r\n};\r\n\r\nconst getPosition = (\r\n  arr: TMessageHistory[],\r\n  message: TMessageHistory,\r\n  index: number\r\n) => {\r\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\r\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\r\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\r\n\r\n  let result: IMessagePosition = {\r\n    position: \"single\",\r\n    type: \"single\",\r\n  };\r\n\r\n  if(arr[index - 1] && message){\r\n    if(format(new Date(arr[index - 1]?.date), \"dd\") !== format(new Date(message.date), \"dd\")){\r\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\r\n    }\r\n  }\r\n\r\n  if (previousJID !== currentJID && nextJID !== currentJID) {\r\n    return result;\r\n  }\r\n\r\n  if (previousJID !== currentJID && nextJID === currentJID) {\r\n    result.position = \"first\";\r\n    result.type = \"first\";\r\n    return result;\r\n  }\r\n\r\n  if (previousJID === currentJID && nextJID === currentJID) {\r\n    result.position = \"normal\";\r\n    result.type = \"normal\";\r\n    return result;\r\n  }\r\n\r\n  if (previousJID === currentJID && nextJID !== currentJID) {\r\n    result.position = \"single\";\r\n    result.type = \"last\";\r\n    return result;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport function ChatInRoom() {\r\n  const messages = useStoreState((state) => state.historyMessages);\r\n  const user = useStoreState((store) => store.user);\r\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\r\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\r\n  const currentUntrackedChatRoom = useStoreState((store) => store.currentUntrackedChatRoom);\r\n  const [profile, setProfile] = useState<TProfile>();\r\n  const [myMessage, setMyMessage] = useState(\"\");\r\n  const [currentRoom, setCurrentRoom] = useState(\"\");\r\n  const [roomData, setRoomData] = useState<{\r\n    jid: string;\r\n    name: string;\r\n    room_background: string;\r\n    room_thumbnail: string;\r\n    users_cnt: string;\r\n  }>({\r\n    jid: \"\",\r\n    name: \"\",\r\n    room_background: \"\",\r\n    room_thumbnail: \"\",\r\n    users_cnt: \"\",\r\n  });\r\n\r\n  const onYReachStart = () => {\r\n    if (loaderArchive) {\r\n      return;\r\n    } else {\r\n      const lastMessageID = messages.filter(\r\n        (item: any) => item.roomJID === currentRoom\r\n      )[0].id;\r\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPublicProfile(user.walletAddress).then((result) => {\r\n      setProfile(result.data.result);\r\n    });\r\n  }, []);\r\n\r\n  const chooseRoom = (jid: string) => {\r\n    setCurrentRoom(jid);\r\n    setRoomData(useChatRooms.filter((e) => e.jid === jid)[0]);\r\n    useStoreState.getState().clearCounterChatRoom(jid);\r\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\r\n\r\n    const filteredMessages = messages.filter(\r\n      (item: any) => item.roomJID === jid\r\n    );\r\n\r\n    if (!loaderArchive && filteredMessages.length <= 10 && filteredMessages.length > 0) {\r\n      const lastMessageID = filteredMessages[0].id;\r\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 10);\r\n    }\r\n  };\r\n\r\n  const getConversationInfo = (roomJID: string) => {\r\n    const messagesInRoom = messages\r\n      .filter((item: any) => item.roomJID === roomJID)\r\n      .slice(-1);\r\n    if (loaderArchive && messagesInRoom.length <= 0) {\r\n      return \"Loading...\";\r\n    }\r\n\r\n    if (messagesInRoom.length > 0) {\r\n      return messagesInRoom[0].body;\r\n    }\r\n    return \"No messages yet\";\r\n  };\r\n\r\n  const getLastActiveTime = (roomJID: string) => {\r\n    const messagesInRoom = messages\r\n      .filter((item: any) => item.roomJID === roomJID)\r\n      .slice(-1);\r\n    if (messagesInRoom.length <= 0) {\r\n      return \"\";\r\n    }\r\n\r\n    if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\r\n      return format(new Date(messagesInRoom[0].date), \"hh:mm\");\r\n    } else {\r\n      return formatDistance(\r\n        subDays(new Date(messagesInRoom[0].date), 0),\r\n        new Date(),\r\n        { addSuffix: true }\r\n      );\r\n    }\r\n  };\r\n\r\n  const sendMessage = (button: any) => {\r\n    let userAvatar = \"\";\r\n    if (profile?.profileImage) {\r\n      userAvatar = profile?.profileImage;\r\n    }\r\n\r\n    xmpp.sendMessage(\r\n      currentRoom,\r\n      user.firstName,\r\n      user.lastName,\r\n      userAvatar,\r\n      user.walletAddress,\r\n      typeof button === 'object' ? button.value : myMessage,\r\n        typeof button === 'object' ? button.notDisplayedValue : null\r\n    );\r\n  };\r\n\r\n  const setMessage = (value) => {\r\n    setMyMessage(value);\r\n    xmpp.isComposing(user.walletAddress, roomData.jid, user.firstName+\" \"+user.lastName);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      xmpp.pausedComposing(user.walletAddress, roomData.jid)\r\n    }, 1000);\r\n    return () => clearTimeout(timeoutId);\r\n  }, [myMessage]);\r\n\r\n  useEffect(() => {\r\n    if(currentUntrackedChatRoom){\r\n      chooseRoom(currentUntrackedChatRoom);\r\n    }\r\n\r\n    window.onblur = () => {\r\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\r\n    }\r\n\r\n    window.onfocus = () => {\r\n      if(currentRoom){\r\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\r\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\r\n      }\r\n    }\r\n  }, [currentRoom])\r\n\r\n  return (\r\n    <Box style={{ height: \"500px\" }}>\r\n      <MainContainer responsive>\r\n        <Sidebar position=\"left\" scrollable={false}>\r\n          <Search placeholder=\"Search...\" />\r\n          <ConversationList loading={loaderArchive}>\r\n            {useChatRooms.map((room) => (\r\n              <Conversation\r\n                active={room.jid === currentRoom}\r\n                key={room.jid}\r\n                unreadCnt={room.unreadMessages}\r\n                onClick={() => chooseRoom(room.jid)}\r\n                name={room.name}\r\n                info={getConversationInfo(room.jid)}\r\n                lastActivityTime={getLastActiveTime(room.jid)}\r\n              >\r\n                <Avatar\r\n                  src={\r\n                    room.room_background !== \"none\"\r\n                      ? room.room_background\r\n                      : \"https://icotar.com/initials/\" + room.name\r\n                  }\r\n                />\r\n              </Conversation>\r\n            ))}\r\n          </ConversationList>\r\n        </Sidebar>\r\n\r\n        <ChatContainer>\r\n          {!!roomData.name && (\r\n            <ConversationHeader>\r\n              <ConversationHeader.Back />\r\n              {messages.filter((item: any) => item.roomJID === currentRoom)\r\n                .length > 0 && (\r\n                <ConversationHeader.Content\r\n                  userName={roomData.name}\r\n                  info={\r\n                    \"Active \" +\r\n                    formatDistance(\r\n                      subDays(\r\n                        new Date(\r\n                          messages\r\n                            .filter((item: any) => item.roomJID === currentRoom)\r\n                            .slice(-1)[0].date\r\n                        ),\r\n                        0\r\n                      ),\r\n                      new Date(),\r\n                      { addSuffix: true }\r\n                    )\r\n                  }\r\n                />\r\n              )}\r\n              <ConversationHeader.Actions>\r\n                <BookmarkRemoveIcon />\r\n              </ConversationHeader.Actions>\r\n            </ConversationHeader>\r\n          )}\r\n          <MessageList\r\n            loadingMore={loaderArchive}\r\n            onYReachStart={onYReachStart}\r\n            typingIndicator={\r\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\r\n                ?.composing && (\r\n                <TypingIndicator\r\n                  content={\r\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\r\n                      ?.composing\r\n                  }\r\n                />\r\n              )\r\n            }\r\n          >\r\n            {messages\r\n              .filter((item: any) => item.roomJID === currentRoom)\r\n              .map((message, index, arr) => {\r\n                const position = getPosition(arr, message, index);\r\n                if(message.data.isSystemMessage === \"false\") {\r\n                  return (\r\n                      <Message\r\n                          key={message.id}\r\n                          is={\"Message\"}\r\n                          position={position}\r\n                          message={message}\r\n                          userJid={xmpp.client?.jid?.toString()}\r\n                          buttonSender={sendMessage}\r\n                      />\r\n                  );\r\n                }else{\r\n                  return (\r\n                      <SystemMessage\r\n                          is={\"Message\"}\r\n                          message={message}\r\n                          userJid={xmpp.client?.jid?.toString()}\r\n                      />\r\n                  );\r\n                }\r\n              })}\r\n            {messages.length <= 0 ||\r\n              (!currentRoom && (\r\n                <MessageList.Content\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"center\",\r\n                    height: \"100%\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"1.2em\",\r\n                  }}\r\n                >\r\n                  {!loaderArchive ? (\r\n                    <span>\r\n                      {!currentRoom &&\r\n                        \"To get started, please select a chat room.\"}\r\n                    </span>\r\n                  ) : (\r\n                    \"Loading...\"\r\n                  )}\r\n                </MessageList.Content>\r\n              ))}\r\n            {!loaderArchive &&\r\n              currentRoom &&\r\n              messages.filter((item: any) => item.roomJID === currentRoom)\r\n                .length <= 0 && (\r\n                <MessageList.Content\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"center\",\r\n                    height: \"100%\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"1.2em\",\r\n                  }}\r\n                >\r\n                  Message list is empty\r\n                </MessageList.Content>\r\n              )}\r\n          </MessageList>\r\n          {!!roomData.name && (\r\n            <MessageInput\r\n              placeholder=\"Type message here\"\r\n              onChange={setMessage}\r\n              onSend={sendMessage}\r\n            />\r\n          )}\r\n        </ChatContainer>\r\n      </MainContainer>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useStoreState } from \"../../store\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatInRoom } from \"./Chat\";\r\n\r\nexport default function Chat() {\r\n    const user = useStoreState((state) => state.user);\r\n    const messages = useStoreState((state) => state.messages);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!user.firstName) {\r\n            history.push(\"/\");\r\n        }\r\n    }, [user.firstName, history]);\r\n    return (\r\n        <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\r\n            <Box>Chat</Box>\r\n            <Box>{messages.length}</Box>\r\n            <ChatInRoom />\r\n        </Container>\r\n    );\r\n}\r\n"],"names":["Message","message","userJid","position","buttonSender","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","isMediafile","mimetype","location","originalName","controls","title","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","key","display","flexDirection","marginLeft","map","button","index","border","name","SystemMessage","textAlign","color","fontSize","fontFamily","ChatInRoom","messages","useStoreState","state","historyMessages","user","store","useChatRooms","userChatRooms","loaderArchive","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","jid","room_background","room_thumbnail","users_cnt","roomData","setRoomData","getPublicProfile","walletAddress","then","result","chooseRoom","filter","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","roomJID","length","lastMessageID","id","xmpp","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","userAvatar","profileImage","value","notDisplayedValue","timeoutId","setTimeout","clearTimeout","window","onblur","onfocus","Box","responsive","scrollable","placeholder","loading","room","active","unreadCnt","unreadMessages","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","typingIndicator","composing","content","arr","previousJID","nextJID","currentJID","getPosition","isSystemMessage","toString","justifyContent","onChange","onSend","Chat","Container","maxWidth"],"sourceRoot":""}