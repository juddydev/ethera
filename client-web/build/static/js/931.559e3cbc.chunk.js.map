{"version":3,"file":"static/js/931.559e3cbc.chunk.js","mappings":"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","sources":["componets/NoDataImage.tsx","pages/Owner/NewUserModal.tsx","componets/EditAcl.tsx","pages/Owner/Users.tsx"],"sourcesContent":["import * as React from 'react'\nimport './NoDataImage.scss'\n\nexport default function NoDataImage() {\n  return <div className='noDataImg'></div>\n}","import React, { useState } from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useFormik } from \"formik\";\nimport TextField from \"@mui/material/TextField\";\nimport { useStoreState } from \"../../store\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport * as http from \"../../http\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport Button from \"@mui/material/Button\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport { NativeSelect } from \"@mui/material\";\n\ntype TProps = {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function NewUserModal({ open, setOpen }: TProps) {\n  const apps = useStoreState((state) => state.apps);\n  const addAppUsers = useStoreState((state) => state.addAppUsers)\n  const [loading, setLoading] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      password: \"\",\n      appId: apps[0]?._id\n    },\n    validate: (values) => {\n      const errors: Record<string, string> = {};\n\n      if (!values.firstName) {\n        errors.firstName = \"Required\";\n      }\n\n      if (!values.lastName) {\n        errors.lastName = \"Required\";\n      }\n\n      if (!values.username) {\n        errors.username = \"Required\";\n      }\n\n      if (!values.password) {\n        errors.password = \"Required\";\n      }\n\n      return errors;\n    },\n    onSubmit: ({username, firstName, lastName, password, appId}) => {\n      setLoading(true);\n      const app = apps.find((el) => el._id === appId)\n      http.registerUsername(username, password, firstName, lastName, app?.appToken)\n        .then((result) => {\n          addAppUsers([result.data.user])\n          setOpen(false)\n        })\n    },\n  });\n\n  if (apps.length === 0) {\n    return (\n      <Dialog\n        open={open}\n        onClose={() => {}}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">There is no apps</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            You should create app first please!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={loading}\n            variant=\"contained\"\n            autoFocus\n            onClick={() => setOpen(false)}\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog onClose={() => {}} open={open}>\n      <Box style={{width: '400px'}}>\n        <DialogTitle\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          New User\n          <IconButton disabled={loading} onClick={() => setOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <Box sx={{ width: \"100%\", typography: \"body1\", padding: 1 }}>\n          <form onSubmit={formik.handleSubmit}>\n            <Box>\n              <FormControl fullWidth>\n                <InputLabel variant=\"standard\" htmlFor=\"uncontrolled-native\">\n                  App\n                </InputLabel>\n                <NativeSelect\n                  inputProps={{\n                    name: \"appName\",\n                    id: \"uncontrolled-native\",\n                  }}\n                  onChange={(e) => {\n                    formik.setFieldValue(\"appId\", e.target.value);\n                  }}\n                >\n                  {apps.map((app) => {\n                    return (\n                      <option key={app._id} value={app._id}>\n                        {app.appName}\n                      </option>\n                    );\n                  })}\n                </NativeSelect>\n              </FormControl>\n            </Box>\n            <Box>\n              <TextField\n                fullWidth\n                error={\n                  formik.touched.firstName && formik.errors.firstName ? true : false\n                }\n                helperText={\n                  formik.touched.firstName && formik.errors.firstName\n                    ? formik.errors.firstName\n                    : \"\"\n                }\n                margin=\"dense\"\n                label=\"First Name\"\n                name=\"firstName\"\n                variant=\"standard\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.firstName}\n              />\n              <TextField\n                fullWidth\n                error={\n                  formik.touched.lastName && formik.errors.lastName ? true : false\n                }\n                helperText={\n                  formik.touched.lastName && formik.errors.lastName\n                    ? formik.errors.lastName\n                    : \"\"\n                }\n                margin=\"dense\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                variant=\"standard\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.lastName}\n              />\n              <TextField\n                fullWidth\n                error={\n                  formik.touched.lastName && formik.errors.username ? true : false\n                }\n                helperText={\n                  formik.touched.username && formik.errors.username\n                    ? formik.errors.username\n                    : \"\"\n                }\n                margin=\"dense\"\n                label=\"Username\"\n                name=\"username\"\n                variant=\"standard\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.username}\n              />\n              <TextField\n                fullWidth\n                error={\n                  formik.touched.password && formik.errors.password ? true : false\n                }\n                helperText={\n                  formik.touched.password && formik.errors.password\n                    ? formik.errors.password\n                    : \"\"\n                }\n                margin=\"dense\"\n                label=\"Password\"\n                name=\"password\"\n                variant=\"standard\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.password}\n              />\n            </Box>\n            <Box style={{ display: \"inline-flex\", margin: \"0 auto\", flexDirection: \"column\" }}>\n              <LoadingButton\n                loading={loading}\n                variant=\"contained\"\n                style={{ marginTop: \"15px\" }}\n                type=\"submit\"\n                disabled={loading}\n              >\n                Create New User\n              </LoadingButton>\n            </Box>\n          </form>\n        </Box>\n      </Box>\n    </Dialog>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { Button, Checkbox, Typography } from \"@mui/material\";\nimport {\n  getUserAcl,\n  IAclBody,\n  IUserAcl,\n  TPermission,\n  updateUserAcl,\n} from \"../http\";\nimport { Box } from \"@mui/system\";\nimport { FullPageSpinner } from \"./FullPageSpinner\";\nimport { useStoreState } from \"../store\";\n\nexport interface IEditAcl {\n  userId: string;\n  updateData?(user: IUserAcl): void;\n}\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\ntype TKeys =\n  | \"appCreate\"\n  | \"appPush\"\n  | \"appSettings\"\n  | \"appStats\"\n  | \"appTokens\"\n  | \"appUsers\";\n\nconst checkDisabled = (arr: Array<string> | undefined, property: string) => {\n  if (!arr) return false;\n  return !!arr.find((item) => item === property);\n};\nconst checkAdminEnabled = (acl: TPermission) => {\n  if (!acl) return false;\n  return !!Object.entries(acl).find((item) => item[0] === \"admin\" && !!item[1]);\n};\nconst Row = ({\n  name,\n  row,\n  onChange,\n  disableAllRow,\n}: {\n  name: TKeys;\n  row: TPermission;\n  disableAllRow: boolean;\n  onChange: (\n    e: React.ChangeEvent<HTMLInputElement>,\n    keyToChange: TKeys\n  ) => void;\n}) => {\n  const isOwner = useStoreState((state) => state.user?.ACL.ownerAccess);\n  return (\n    <TableRow\n      sx={{\n        \"&:last-child td, &:last-child th\": { border: 0 },\n      }}\n    >\n      <TableCell component=\"th\" scope=\"row\">\n        {name}\n      </TableCell>\n      <TableCell\n        style={{\n          backgroundColor: !checkDisabled(row?.disabled, \"create\")\n            ? \"white\"\n            : \"lightgrey\",\n        }}\n        align=\"left\"\n      >\n        <Checkbox\n          checked={row?.create}\n          name={\"create\"}\n          disabled={\n            (checkDisabled(row?.disabled, \"create\") || disableAllRow) &&\n            !isOwner\n          }\n          onChange={(e) => onChange(e, name)}\n          {...label}\n        />\n      </TableCell>\n      <TableCell\n        style={{\n          backgroundColor: !checkDisabled(row?.disabled, \"read\")\n            ? \"white\"\n            : \"lightgrey\",\n        }}\n        align=\"left\"\n      >\n        <Checkbox\n          name={\"read\"}\n          onChange={(e) => onChange(e, name)}\n          disabled={checkDisabled(row?.disabled, \"read\") || disableAllRow}\n          checked={row?.read}\n          {...label}\n        />\n      </TableCell>\n      <TableCell\n        style={{\n          backgroundColor: !checkDisabled(row?.disabled, \"update\")\n            ? \"white\"\n            : \"lightgrey\",\n        }}\n        align=\"left\"\n      >\n        <Checkbox\n          name={\"update\"}\n          onChange={(e) => onChange(e, name)}\n          disabled={checkDisabled(row?.disabled, \"update\") || disableAllRow}\n          checked={row?.update}\n          {...label}\n        />\n      </TableCell>\n      <TableCell\n        style={{\n          backgroundColor: !checkDisabled(row?.disabled, \"delete\")\n            ? \"white\"\n            : \"lightgrey\",\n        }}\n        align=\"left\"\n      >\n        <Checkbox\n          name={\"delete\"}\n          onChange={(e) => onChange(e, name)}\n          disabled={checkDisabled(row?.disabled, \"delete\") || disableAllRow}\n          checked={row?.delete}\n          {...label}\n        />\n      </TableCell>\n      <TableCell\n        style={{\n          backgroundColor: !checkDisabled(row?.disabled, \"admin\")\n            ? \"white\"\n            : \"lightgrey\",\n        }}\n        align=\"left\"\n      >\n        <Checkbox\n          name={\"admin\"}\n          onChange={(e) => onChange(e, name)}\n          disabled={checkDisabled(row?.disabled, \"admin\") || disableAllRow}\n          checked={row?.admin}\n          {...label}\n        />\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport const EditAcl: React.FC<IEditAcl> = ({ userId, updateData }) => {\n  const [userAcl, setUserAcl] = useState<IUserAcl>();\n  const [userAclApplicationKeys, setUserAclApplicationKeys] = useState<\n    Array<TKeys>\n  >([]);\n  const [userAclNetworkKeys, setUserAclNetworkKeys] = useState<Array<TKeys>>(\n    []\n  );\n  const myAcl = useStoreState((state) => state.ACL);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    console.log(\"userAclApplicationKeys \", userAclApplicationKeys);\n  }, [userAclApplicationKeys]);\n\n  const getAcl = async () => {\n    setLoading(true);\n    try {\n      const { data } = await getUserAcl(userId);\n      console.log(\"getAcl \", data);\n      setUserAcl(data);\n      const appKeys = Object.keys(data.result.application) as TKeys[];\n      const networkKeys = Object.keys(data.result.network) as TKeys[];\n\n      setUserAclApplicationKeys(appKeys);\n      setUserAclNetworkKeys(networkKeys);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const onApplicationAclChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    keyToChange: TKeys\n  ) => {\n    setUserAcl((prev) => ({\n      result: {\n        ...prev!.result,\n        application: {\n          ...prev!.result!.application,\n          [keyToChange]: {\n            ...prev!.result!.application[keyToChange],\n            [e.target.name]: e.target.checked,\n          },\n        },\n      },\n    }));\n  };\n  const onNetworkAclChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    keyToChange: TKeys\n  ) => {\n    setUserAcl((prev) => ({\n      result: {\n        ...prev!.result,\n        network: {\n          ...prev!.result!.network,\n          netStats: {\n            ...prev!.result!.network.netStats,\n            [e.target.name]: e.target.checked,\n          },\n        },\n      },\n    }));\n  };\n\n  const updateAcl = async () => {\n    setLoading(true);\n    try {\n      const filteredApplication = Object.fromEntries(\n        Object.entries(userAcl!.result!.application).map((item) => {\n          delete item[1].disabled;\n          return item;\n        })\n      );\n      const filteredNetwork = Object.fromEntries(\n        Object.entries(userAcl!.result!.network).map((item) => {\n          delete item[1].disabled;\n          return item;\n        })\n      );\n\n      const body = {\n        application: filteredApplication,\n        network: filteredNetwork,\n      } as IAclBody;\n\n      const aclRes = await updateUserAcl(userId, body);\n      const updatedUserAcl = aclRes.data as IUserAcl;\n      if (updateData) {\n        updateData(updatedUserAcl);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n  useEffect(() => {\n    getAcl();\n  }, []);\n\n  if (loading) {\n    return <FullPageSpinner />;\n  }\n\n  return (\n    <>\n      <Typography marginBottom={\"10px\"} fontWeight={\"bold\"}>\n        Applications\n      </Typography>\n\n      <TableContainer component={Paper}>\n        <Table size={\"small\"} sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Create</TableCell>\n              <TableCell align=\"left\">Read</TableCell>\n              <TableCell align=\"left\">Update</TableCell>\n              <TableCell align=\"left\">Delete</TableCell>\n              <TableCell align=\"left\">Admin</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {myAcl.result &&\n              userAclApplicationKeys.map((row) => {\n                const application = userAcl!.result.application[row];\n                const myApplicationAcl = myAcl!.result.application[row];\n\n                return (\n                  <Row\n                    disableAllRow={!checkAdminEnabled(myApplicationAcl)}\n                    // disableAllRow={false}\n                    onChange={onApplicationAclChange}\n                    name={row}\n                    row={application}\n                    key={row}\n                  />\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Typography marginBottom={\"10px\"} marginTop={\"10px\"} fontWeight={\"bold\"}>\n        Networks\n      </Typography>\n\n      <TableContainer component={Paper}>\n        <Table size={\"small\"} sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n\n              <TableCell>Create</TableCell>\n              <TableCell align=\"left\">Read</TableCell>\n              <TableCell align=\"left\">Update</TableCell>\n              <TableCell align=\"left\">Delete</TableCell>\n              <TableCell align=\"left\">Admin</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {/* {userAclNetworkKeys.map((row) => {\n              const network = userAcl!.result.network.netStats;\n              const myNetworkAcl = myAcl!.result.network.netStats;\n\n              return (\n                <Row\n                  disableAllRow={!checkAdminEnabled(myNetworkAcl)}\n                  // disableAllRow={false}\n                  onChange={onNetworkAclChange}\n                  name={row}\n                  row={network}\n                  key={row}\n                />\n              );\n            })} */}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Box\n        sx={{\n          display: \"flex\",\n          width: \"100%\",\n          justifyContent: \"flex-end\",\n          marginTop: \"20px\",\n        }}\n      >\n        <Button variant=\"contained\" onClick={updateAcl}>\n          Update Acl\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport { Button, IconButton, Modal, Typography } from \"@mui/material\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { useStoreState } from \"../../store\";\nimport NoDataImage from \"../../componets/NoDataImage\";\nimport NewUserModal from \"./NewUserModal\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Pagination from \"@mui/material/Pagination\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport * as http from \"../../http\";\nimport { EditAcl } from \"../../componets/EditAcl\";\n\nconst boxStyle = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: \"70vw\",\n  bgcolor: \"background.paper\",\n  boxShadow: 24,\n  borderRadius: \"10px\",\n  p: 4,\n};\n\nexport default function UsersTable() {\n  const apps = useStoreState((state) => state.apps);\n  const ownerAccess = useStoreState((state) => state.user.ACL.ownerAccess);\n  const user = useStoreState((state) => state.user);\n  const [showNewUser, setShowNewUser] = React.useState(false);\n  const [users, setUsers] = React.useState<[] | http.IUser[]>([]);\n  const [currentApp, setCurrentApp] = React.useState<string>();\n  const [aclEditData, setAclEditData] = React.useState({\n    modalOpen: false,\n    userId: \"\",\n  });\n\n  const [pagination, setPagination] = React.useState<{\n    total: number;\n    limit: number;\n    offset: number;\n  }>();\n  const getUsers = async (\n    appId: string | null,\n    limit: number = 10,\n    offset: number = 0\n  ) => {\n    try {\n      if (appId) {\n        const getUsersResp = await http.getAppUsers(appId, limit, offset);\n        const { data } = getUsersResp;\n        setPagination({\n          limit: data.limit,\n          offset: data.offset,\n          total: data.total,\n        });\n        return data.items;\n      }\n    } catch (e) {}\n    return [];\n  };\n\n  React.useEffect(() => {\n    if (ownerAccess) {\n      if (apps.length) {\n        setCurrentApp(apps[0]._id);\n        getUsers(apps[0]._id).then((users) => {\n          setUsers(users);\n        });\n      }\n    }\n  }, [apps]);\n\n  React.useEffect(() => {\n    if (!ownerAccess) {\n      setCurrentApp(user.appId);\n      getUsers(currentApp).then((users) => {\n        console.log(\"users \", users);\n        setUsers(users);\n      });\n    }\n  }, []);\n\n  const onAppSelectChange = (e: SelectChangeEvent) => {\n    setCurrentApp(e.target.value);\n    getUsers(e.target.value).then((users) => {\n      setUsers(users);\n    });\n  };\n\n  const onPagination = (event: React.ChangeEvent<unknown>, page: number) => {\n    // page = 1 => offset 0\n    // page = 2 => offset 10\n    // page = 3 => offset 20\n    let offset = 0;\n    if (page - 1 > 0) {\n      offset = (page - 1) * (pagination?.limit || 10);\n    }\n\n    getUsers(currentApp || null, pagination?.limit || 10, offset).then(\n      (users) => setUsers(users)\n    );\n  };\n  const handleAclEditOpen = (userId: string) =>\n    setAclEditData({ modalOpen: true, userId: userId });\n  const handleAclEditClose = () =>\n    setAclEditData({ modalOpen: false, userId: \"\" });\n\n  const updateUserDataAfterAclChange = (user: http.IUserAcl) => {\n    const oldUsers = users;\n    const indexToUpdate = oldUsers.findIndex(\n      (item) => item._id === aclEditData.userId\n    );\n    if (indexToUpdate !== -1) {\n    }\n    oldUsers[indexToUpdate]._id = user.result.userId;\n    setUsers(oldUsers);\n  };\n  return (\n    <TableContainer component={Paper} style={{ margin: \"0 auto\" }}>\n      <Box style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Typography variant=\"h6\" style={{ margin: \"16px\" }}>\n          Users\n        </Typography>\n        {currentApp ? (\n          <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\n            <InputLabel id=\"demo-simple-select-label\">App</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              label=\"App\"\n              value={currentApp}\n              onChange={onAppSelectChange}\n            >\n              {apps.map((app) => {\n                return (\n                  <MenuItem key={app._id} value={app._id}>\n                    {app.appName}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        ) : null}\n\n        <IconButton onClick={() => setShowNewUser(true)} size=\"large\">\n          <AddCircleIcon fontSize=\"large\"></AddCircleIcon>\n        </IconButton>\n      </Box>\n      {users.length === 0 && (\n        <Box\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <NoDataImage></NoDataImage>\n          <Typography style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\n            Users not found.\n          </Typography>\n        </Box>\n      )}\n\n      {users.length > 0 && (\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell width={200}>appId</TableCell>\n              <TableCell align=\"right\">firstName</TableCell>\n              <TableCell align=\"right\">lastName</TableCell>\n              <TableCell align=\"right\">username</TableCell>\n              <TableCell align=\"right\">email</TableCell>\n              <TableCell align=\"right\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {users.map((user) => (\n              <TableRow\n                key={user._id}\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n              >\n                <TableCell component=\"th\" scope=\"row\">\n                  {user.appId}\n                </TableCell>\n                <TableCell align=\"right\">{user.firstName}</TableCell>\n                <TableCell align=\"right\">{user.lastName}</TableCell>\n                <TableCell align=\"right\">\n                  {user.username ? user.username : \"-\"}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {user.email ? user.email : \"-\"}\n                </TableCell>\n                <TableCell align=\"right\">\n                  <Box sx={{ width: \"200px\" }}>\n                    <Typography>Edit</Typography>\n                    <Typography\n                      style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\n                      onClick={() => handleAclEditOpen(user._id)}\n                    >\n                      Edit ACL\n                    </Typography>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n            {pagination?.total && (\n              <TableRow>\n                <TableCell colSpan={6}>\n                  <Pagination\n                    onChange={onPagination}\n                    count={Math.ceil(pagination.total / pagination.limit)}\n                  />\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      )}\n      <NewUserModal open={showNewUser} setOpen={setShowNewUser} />\n      <Modal\n        open={aclEditData.modalOpen}\n        onClose={handleAclEditClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={boxStyle}>\n          <EditAcl\n            updateData={updateUserDataAfterAclChange}\n            userId={aclEditData.userId}\n          />\n          <IconButton\n            onClick={handleAclEditClose}\n            sx={{ position: \"absolute\", top: 0, right: 0, color: \"black\" }}\n          >\n            <CloseIcon fontSize={\"large\"} />\n          </IconButton>\n        </Box>\n      </Modal>\n    </TableContainer>\n  );\n}\n"],"names":["NoDataImage","className","NewUserModal","open","setOpen","apps","useStoreState","state","addAppUsers","useState","loading","setLoading","formik","useFormik","initialValues","firstName","lastName","username","password","appId","_id","validate","values","errors","onSubmit","app","find","el","http","appToken","then","result","data","user","length","Dialog","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","disabled","variant","autoFocus","onClick","Box","style","width","display","justifyContent","IconButton","Close","sx","typography","padding","handleSubmit","FormControl","fullWidth","InputLabel","htmlFor","NativeSelect","inputProps","name","onChange","e","setFieldValue","target","value","map","appName","TextField","error","touched","helperText","margin","label","handleChange","onBlur","handleBlur","flexDirection","LoadingButton","marginTop","type","checkDisabled","arr","property","item","Row","row","disableAllRow","isOwner","ACL","ownerAccess","TableRow","border","TableCell","component","scope","backgroundColor","align","Checkbox","checked","create","read","update","delete","admin","EditAcl","userId","updateData","userAcl","setUserAcl","userAclApplicationKeys","setUserAclApplicationKeys","setUserAclNetworkKeys","myAcl","useEffect","console","log","getAcl","getUserAcl","appKeys","Object","keys","application","networkKeys","network","onApplicationAclChange","keyToChange","prev","updateAcl","filteredApplication","fromEntries","entries","filteredNetwork","body","updateUserAcl","aclRes","updatedUserAcl","FullPageSpinner","Typography","marginBottom","fontWeight","TableContainer","Paper","Table","size","minWidth","TableHead","TableBody","acl","myApplicationAcl","boxStyle","position","top","left","transform","bgcolor","boxShadow","borderRadius","p","UsersTable","React","showNewUser","setShowNewUser","users","setUsers","currentApp","setCurrentApp","modalOpen","aclEditData","setAclEditData","pagination","setPagination","getUsers","limit","offset","getUsersResp","total","items","handleAclEditClose","alignItems","m","Select","labelId","MenuItem","AddCircle","fontSize","email","cursor","textDecoration","colSpan","Pagination","event","page","count","Math","ceil","Modal","oldUsers","indexToUpdate","findIndex","right","color"],"sourceRoot":""}