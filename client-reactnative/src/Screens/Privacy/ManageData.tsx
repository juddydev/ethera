import {AlertDialog, Center, VStack, Button as NativeButton} from 'native-base';
import React, {useState} from 'react';
import {StyleSheet, Text, View} from 'react-native';
import {textStyles} from '../../../docs/config';
import {Button} from '../../components/Button';
import {showError, showSuccess} from '../../components/Toast/toast';
import {httpDelete} from '../../config/apiService';
import {changeUserData} from '../../config/routesConstants';
import {useStores} from '../../stores/context';

const DeleteDialog = ({
  open,
  onClose,
  onDeletePress,
  loading,
}: {
  open: boolean;
  onClose: () => void;
  onDeletePress: () => void;
  loading: boolean;
}) => {
  const cancelRef = React.useRef(null);
  return (
    <Center>
      <AlertDialog
        leastDestructiveRef={cancelRef}
        isOpen={open}
        onClose={onClose}>
        <AlertDialog.Content>
          <AlertDialog.CloseButton />
          <AlertDialog.Header>Delete Account</AlertDialog.Header>
          <AlertDialog.Body>
          This will result in a complete deletion of your account and assets. Are you sure you want to proceed?
          </AlertDialog.Body>
          <AlertDialog.Footer>
            <NativeButton.Group space={2}>
              <NativeButton
                variant="unstyled"
                colorScheme="coolGray"
                onPress={onClose}
                ref={cancelRef}>
                Cancel
              </NativeButton>
              <Button
                title={'Delete Account'}
                style={{backgroundColor: 'red'}}
                loading={loading}
                onPress={onDeletePress}
              />
            </NativeButton.Group>
          </AlertDialog.Footer>
        </AlertDialog.Content>
      </AlertDialog>
    </Center>
  );
};

export interface IManageData {}

export const ManageData: React.FC<IManageData> = ({}) => {
  const {loginStore, apiStore} = useStores();
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [loading, setLoading] = useState(false);

  const deleteAccount = async () => {
    setLoading(true);
    try {
      await httpDelete(
        apiStore.defaultUrl + changeUserData,
        loginStore.userToken,
      );
      showSuccess('Success', 'Account deleted successfully');
      loginStore.logOut();
    } catch (error) {
      console.log(error);
      showError('Error', 'Something went wrong');
    }
    setLoading(false);

    setDeleteDialogOpen(false);
  };
  return (
    <VStack paddingX={5} marginTop={5}>
      <VStack>
        <View>
          <Text style={styles.title}>Download your data</Text>

          <Text style={styles.description}>
            You own your data. Tap the button below to download a copy of your
            data
          </Text>
        </View>
        <View style={{alignItems: 'center', marginTop: 10}}>
          <Button
            style={{width: '60%'}}
            title="Download my data"
            onPress={() => {}}
          />
        </View>
        <VStack marginTop={5}>
          <View>
            <Text style={styles.title}>Delete your account</Text>
            <Text style={styles.description}>
              Use this only if you want to permanently delete your account &
              data from our system.
            </Text>
            <Text style={[styles.note]}>
              Note: due to the immutable nature of distributed ledger
              technology, network nodes operated by the community may still
              retain historical transactions generated by your account, however
              your personally identifiable information such as your name,
              e-mail, your key-value storage etc will be removed.
            </Text>
            <Text style={[styles.note]}>
              Any of your digital assets will be lost.
            </Text>
          </View>
          <View style={{alignItems: 'center', marginTop: 10}}>
            <Button
              style={{backgroundColor: 'red', width: '60%'}}
              title="Delete my account"
              onPress={() => setDeleteDialogOpen(true)}
            />
          </View>
        </VStack>
      </VStack>
      <DeleteDialog
        loading={loading}
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        onDeletePress={deleteAccount}
      />
    </VStack>
  );
};

const styles = StyleSheet.create({
  title: {
    fontFamily: textStyles.semiBoldFont,
    color: 'black',
    fontSize: 16,
    marginVertical: 5,
  },
  description: {
    fontFamily: textStyles.regularFont,
    color: 'black',
  },
  note: {
    color: 'black',
    marginTop: 5,
    fontStyle: 'italic',
    fontSize: 12,
  },
});
