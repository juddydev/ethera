{"version":3,"file":"static/js/657.422a8adb.chunk.js","mappings":"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","sources":["helpers/chat/createPrivateChat.ts","componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    CONFERENCEDOMAIN: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n    xmpp.setOwner(combinedWalletAddress.toLowerCase());\n    xmpp.roomConfig(\n        combinedWalletAddress.toLowerCase(),\n        {roomName: combinedUsersName},\n    );\n    xmpp.subsribe(roomJid);\n    xmpp.presenceInRoom(roomJid);\n\n    setTimeout(() => {\n        xmpp.sendInvite(\n            underscoreManipulation(myWalletAddress),\n            roomJid.toLowerCase(),\n            underscoreManipulation(otherUserWalletAddress),\n        );\n    }, 1000);\n    return {roomJid, roomName: combinedUsersName};\n};\n","import React, {useEffect, useState} from \"react\";\nimport { Message as KitMessage, MessageModel, Button, MessageSeparator } from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport {TMessageHistory, useStoreState} from \"../../../store\";\nimport {useHistory} from \"react-router\";\nimport {\n  Card, CardActionArea, CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  IconButton, Menu, MenuItem, TextField,\n} from \"@mui/material\";\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {transferCoin} from \"../../../http\";\nimport xmpp from \"../../../xmpp\";\nimport {createPrivateChat} from \"../../../helpers/chat/createPrivateChat\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel['position'];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any;\n  chooseDirectRoom: any;\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string\n}\n\ntype IDialog = \"transfer\" | \"image\" | \"ban\" | \"error\";\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender,\n  chooseDirectRoom\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [dialogMenuType, setDialogMenuType] = useState<IDialog>(\"transfer\");\n  const [dialogText, setDialogText] = useState(\"\");\n  const openMenu = Boolean(anchorEl);\n  const handleClickMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const [coinAmount, setCoinAmount] = useState(\"\");\n  const balance = useStoreState((store) => store.balance);\n  const coinData = balance.filter(el => !el.tokenType && el.contractAddress.length > 10)\n  const user = useStoreState((store) => store.user);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n\n  const openDialogMenu = (type: IDialog) => {\n    setAnchorEl(null)\n    setOpenDialog(true);\n    setDialogMenuType(type);\n  }\n\n  const sendCoins = () => {\n    // @ts-ignore\n    transferCoin(coinData[0].tokenSymbol, coinData[0].tokenName, Number(coinAmount), message.data.senderWalletAddress).then(() => {\n      const textMessage = user.firstName + \" \" + user.lastName + \" -> \" + coinAmount + \" \" + coinData[0].tokenName + \" -> \" + message.data.senderFirstName + \" \" + message.data.senderLastName;\n\n      xmpp.sendSystemMessage(\n          message.roomJID,\n          user.firstName,\n          user.lastName,\n          user.walletAddress,\n          textMessage,\n          null,\n          message.id\n      );\n\n      setOpenDialog(false);\n    }).catch(error => {\n      console.log(error);\n      setDialogText(\"An error occurred during the coin transfer.\");\n      setDialogMenuType(\"error\");\n    })\n  }\n\n  const openPrivateRoom = () => {\n    createPrivateChat(\n        user.walletAddress,\n        message.data.senderWalletAddress,\n        user.firstName,\n        message.data.senderFirstName,\n        '@conference.dev.dxmpp.com',\n        message.data.senderJID\n    ).then(result => {\n          xmpp.getRooms();\n          if(!loaderArchive){\n            chooseDirectRoom(result.roomJid)\n          }\n    }).catch(error => {\n      console.log(\"openPrivateRoom Error: \", error);\n    })\n  }\n\n  const fullViewImage = () => {\n    setOpenDialog(true);\n    setDialogMenuType(\"image\");\n  }\n\n  useEffect(() => {\n    if(message.data.quickReplies){\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n  }, [])\n\n  return (\n  <div is={\"Message\"}>\n    {position.separator ?\n      <MessageSeparator>\n        {position.separator}\n      </MessageSeparator> : null\n    }\n    <KitMessage\n      key={message.key}\n      model={{\n        sender: firstName + \" \" + lastName,\n        direction: String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"outgoing\" : \"incoming\",\n        position: position.position,\n      }}\n      avatarPosition={String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"tr\" : \"tl\"}\n      avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n    >\n      {(position.type === \"first\" || position.type === \"single\") && (\n        <img\n          style={{\n            borderRadius: \"50%\",\n            boxSizing: \"border-box\",\n            width: \"42px\",\n            height: \"42px\",\n            cursor: \"pointer\"\n          }}\n          onClick={() => history.push(\"/profile/\"+message.data.senderWalletAddress)}\n          is={\"Avatar\"}\n          src={message.data.photoURL}\n          onError={({ currentTarget }) => {\n            currentTarget.onerror = null;\n            currentTarget.src =\n              \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\n          }}\n          alt={firstName}\n        />\n      )}\n\n      <KitMessage.CustomContent>\n        {(position.type === \"first\" || position.type === \"single\") && (\n            <span style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n              <strong style={{cursor: \"pointer\"}} onClick={() => history.push(\"/profile/\" + message.data.senderWalletAddress)}>\n                {firstName} {lastName}\n                <br />\n              </strong>\n              {String(userJid).split(\"/\")[0] !== String(messageJid).split(\"/\")[0] ?\n                  <IconButton\n                      aria-label=\"more\"\n                      id=\"long-button\"\n                      aria-controls={openMenu ? 'long-menu' : undefined}\n                      aria-expanded={openMenu ? 'true' : undefined}\n                      aria-haspopup=\"true\"\n                      onClick={handleClickMenu}\n                  >\n                    <MoreVertIcon />\n                  </IconButton>\n              :null\n              }\n            </span>\n        )}\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"image\"?\n            <Card sx={{ maxWidth: 200 }}>\n              <CardActionArea onClick={fullViewImage}>\n                <CardMedia\n                    style={{height: 150, objectFit: \"cover\", objectPosition: \"left\"}}\n                    component=\"img\"\n                    height=\"150\"\n                    image={message.data.location}\n                    alt={message.data.originalName}\n                />\n              </CardActionArea>\n            </Card>\n            :null\n        }\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"application\"?\n            <a target=\"_blank\" href={message.data.location}>\n              <KitMessage.ImageContent src={message.data.locationPreview} alt={message.data.originalName} width={150} />\n              {message.data.mimetype.split(\"/\")[1]}\n            </a>\n            :null\n        }\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"video\" ?\n            <video controls width=\"200px\">\n              <source src={message.data.location} type={message.data.mimetype} title={message.data.originalName}/>\n              Sorry, your browser doesn't support videos.\n            </video>\n            : null\n        }\n\n        {!message.data.isMediafile ?\n            message.body\n            : null\n        }\n      </KitMessage.CustomContent>\n\n      {(position.type === \"last\" || position.type === \"single\") && (\n        <KitMessage.Footer\n          sentTime={\n            differenceInHours(new Date(), new Date(message.date)) > 5\n              ? format(new Date(message.date), \"h:mm:ss a\")\n              : formatDistance(subDays(new Date(message.date), 0), new Date(), {\n                  addSuffix: true,\n                })\n          }\n        />\n      )}\n    </KitMessage>\n        {buttons ?\n            <div style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"max-content\",\n              marginLeft: \"45px\"\n            }}>\n              {buttons.map((button, index) => {\n                return (\n                  <Button onClick={() => buttonSender(button)} key={index} border>{button.name}</Button>\n                );\n             })}\n            </div>\n          : null}\n    <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={openMenu}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n    >\n      <MenuItem onClick={() => openDialogMenu(\"transfer\")}>Transfer coins</MenuItem>\n      <MenuItem onClick={openPrivateRoom}>Direct message</MenuItem>\n      <MenuItem onClick={() => setAnchorEl(null)}>Ban this user</MenuItem>\n    </Menu>\n\n    <Dialog\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        maxWidth={\"xl\"}\n        aria-labelledby=\"responsive-dialog-title\"\n    >\n      <DialogContent>\n        {dialogMenuType === \"error\" ?\n            <div>\n              {dialogText}\n            </div>\n            :null\n        }\n\n        {dialogMenuType === \"transfer\" ?\n            <div style={{display: \"flex\", flexDirection: \"column\"}}>\n              Rewards <strong>{coinData[0].tokenName}</strong> with coins\n              <TextField id=\"outlined-basic\" label=\"Outlined\" type={\"number\"} variant=\"outlined\" value={coinAmount} onChange={event => setCoinAmount(event.target.value)} />\n              <Button onClick={sendCoins}>Send</Button>\n            </div>\n        :null\n        }\n\n        {dialogMenuType === \"image\" ?\n            <div>\n              <img src={message.data.location} alt={message.data.originalName} style={{maxWidth: \"100%\"}} />\n            </div>\n        :null\n        }\n\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setOpenDialog(false)} autoFocus>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport { getPublicProfile, uploadFile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Message } from \"../../componets/Chat/Messages/Message\";\nimport { SystemMessage } from \"../../componets/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  useMediaQuery,\n  useTheme,\n} from \"@mui/material\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if (arr[index - 1] && message) {\n    if (\n      format(new Date(arr[index - 1]?.date), \"dd\") !==\n      format(new Date(message.date), \"dd\")\n    ) {\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID !== currentJID) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showDialogTxt, setShowDialogTxt] = useState(false);\n  const [dialogTxt, setDialogTxt] = useState<{\n    headline: string;\n    description: string;\n  }>({ headline: \"\", description: \"\" });\n  // @ts-ignore\n  const { roomJID } = useParams();\n  const history = useHistory();\n\n  const onYReachStart = () => {\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n      )[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const chooseRoom = (jid: string) => {\n    history.push(\"/chat/\" + jid.split(\"@\")[0]);\n    setCurrentRoom(jid);\n    setRoomData(useChatRooms.filter((e) => e.jid === jid)[0]);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length <= 10 &&\n      filteredMessages.length > 0\n    ) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 10);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\n      return format(new Date(messagesInRoom[0].date), \"hh:mm\");\n    } else {\n      return formatDistance(\n        subDays(new Date(messagesInRoom[0].date), 0),\n        new Date(),\n        { addSuffix: true }\n      );\n    }\n  };\n\n  const sendMessage = (button: any) => {\n    let userAvatar = \"\";\n    if (profile?.profileImage) {\n      userAvatar = profile?.profileImage;\n    }\n\n    xmpp.sendMessage(\n      currentRoom,\n      user.firstName,\n      user.lastName,\n      userAvatar,\n      user.walletAddress,\n      typeof button === \"object\" ? button.value : myMessage,\n      typeof button === \"object\" ? button.notDisplayedValue : null\n    );\n  };\n\n  const sendFile = (file: File) => {\n    setDialogTxt({\n      headline: \"File is loading, please wait...\",\n      description: \"\",\n    });\n    setOpenDialog(true);\n\n    const formData = new FormData();\n    formData.append(\"files\", file);\n\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n          setOpenDialog(false);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        setDialogTxt({\n          headline: \"Error\",\n          description: \"An error occurred while uploading the file\",\n        });\n        setShowDialogTxt(true);\n      });\n    fileRef.current.value = \"\";\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n\n  const handlePaste = event => {\n    // @ts-ignore\n    let item = Array.from(event.clipboardData.items).find(x => /^image\\//.test(x.type));\n    if(item){\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob)\n    }\n  };\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if (currentUntrackedChatRoom) {\n      if (\n        !roomJID ||\n        roomJID === \"none\" ||\n        currentUntrackedChatRoom.split(\"@\")[0] === roomJID\n      ) {\n        chooseRoom(currentUntrackedChatRoom);\n      }\n    }\n\n    if (\n      currentUntrackedChatRoom.split(\"@\")[0] !== roomJID &&\n      roomJID !== \"none\"\n    ) {\n      const conferenceRoomJID = roomJID + \"@conference.dev.dxmpp.com\";\n      useStoreState.getState().setCurrentUntrackedChatRoom(conferenceRoomJID);\n      chooseRoom(conferenceRoomJID);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    };\n\n    window.onfocus = () => {\n      if (currentRoom) {\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    };\n  }, [currentRoom]);\n\n  return (\n    <Box style={{ height: \"500px\" }}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {useChatRooms.map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_background !== \"none\"\n                      ? room.room_background\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <ChatContainer>\n          {!!roomData.name && (\n            <ConversationHeader>\n              <ConversationHeader.Back />\n              {messages.filter((item: any) => item.roomJID === currentRoom)\n                .length > 0 && (\n                <ConversationHeader.Content\n                  userName={roomData.name}\n                  info={\n                    \"Active \" +\n                    formatDistance(\n                      subDays(\n                        new Date(\n                          messages\n                            .filter((item: any) => item.roomJID === currentRoom)\n                            .slice(-1)[0].date\n                        ),\n                        0\n                      ),\n                      new Date(),\n                      { addSuffix: true }\n                    )\n                  }\n                />\n              )}\n              <ConversationHeader.Actions>\n                <BookmarkRemoveIcon />\n              </ConversationHeader.Actions>\n            </ConversationHeader>\n          )}\n          <MessageList\n            loadingMore={loaderArchive}\n            onYReachStart={onYReachStart}\n            typingIndicator={\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                ?.composing && (\n                <TypingIndicator\n                  content={\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                      ?.composing\n                  }\n                />\n              )\n            }\n          >\n            {messages\n              .filter((item: any) => item.roomJID === currentRoom)\n              .map((message, index, arr) => {\n                const position = getPosition(arr, message, index);\n                if (message.data.isSystemMessage === \"false\") {\n                  return (\n                    <Message\n                      key={message.id}\n                      is={\"Message\"}\n                      position={position}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                      buttonSender={sendMessage}\n                      chooseDirectRoom={chooseRoom}\n                    />\n                  );\n                } else {\n                  return (\n                    <SystemMessage\n                      key={message.id}\n                      is={\"Message\"}\n                      message={message}\n                      userJid={xmpp.client?.jid?.toString()}\n                    />\n                  );\n                }\n              })}\n            {messages.length <= 0 ||\n              (!currentRoom && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  {!loaderArchive ? (\n                    <span>\n                      {!currentRoom &&\n                        \"To get started, please select a chat room.\"}\n                    </span>\n                  ) : (\n                    \"Loading...\"\n                  )}\n                </MessageList.Content>\n              ))}\n            {!loaderArchive &&\n              currentRoom &&\n              messages.filter((item: any) => item.roomJID === currentRoom)\n                .length <= 0 && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  Message list is empty\n                </MessageList.Content>\n              )}\n          </MessageList>\n          {!!roomData.name && (\n            <div is={\"MessageInput\"}>\n              <MessageInput\n                onPaste={handlePaste}\n                placeholder=\"Type message here\"\n                onChange={setMessage}\n                onSend={sendMessage}\n                onAttachClick={() => fileRef.current.click()}\n              />\n              <input\n                type=\"file\"\n                name=\"file\"\n                id=\"file\"\n                onChange={(event) => sendFile(event.target.files[0])}\n                ref={fileRef}\n                style={{ display: \"none\" }}\n              />\n            </div>\n          )}\n        </ChatContainer>\n      </MainContainer>\n\n      <Dialog\n        fullScreen={fullScreen}\n        open={openDialog}\n        onClose={() => setOpenDialog(true)}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {dialogTxt.headline}\n        </DialogTitle>\n        <DialogContent>\n          {showDialogTxt && dialogTxt.description.length > 0 ? (\n            <DialogContentText>{dialogTxt.description}</DialogContentText>\n          ) : (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <CircularProgress />\n            </Box>\n          )}\n        </DialogContent>\n        {showDialogTxt ? (\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)} autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        ) : null}\n      </Dialog>\n    </Box>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport { useStoreState } from \"../../store\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n  const messages = useStoreState((state) => state.messages);\n\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n      <Box>Chat</Box>\n      <Box>{messages.length}</Box>\n      <ChatInRoom />\n    </Container>\n  );\n}\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","CONFERENCEDOMAIN","userJID","combinedWalletAddress","sort","join","roomJid","combinedUsersName","xmpp","roomName","setTimeout","Message","message","userJid","position","buttonSender","chooseDirectRoom","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","openDialog","setOpenDialog","React","anchorEl","setAnchorEl","dialogMenuType","setDialogMenuType","dialogText","setDialogText","openMenu","Boolean","coinAmount","setCoinAmount","coinData","useStoreState","store","balance","filter","el","tokenType","contractAddress","length","user","loaderArchive","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","display","justifyContent","alignItems","IconButton","id","undefined","event","MoreVert","isMediafile","mimetype","Card","sx","maxWidth","CardActionArea","CardMedia","objectFit","objectPosition","component","image","location","originalName","target","href","locationPreview","controls","title","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","key","flexDirection","marginLeft","map","button","index","border","name","Menu","open","onClose","MenuListProps","anchorOrigin","vertical","horizontal","MenuItem","walletAddress","then","result","catch","error","console","log","Dialog","DialogContent","tokenName","TextField","label","variant","value","onChange","transferCoin","tokenSymbol","Number","textMessage","roomJID","DialogActions","autoFocus","SystemMessage","textAlign","color","fontSize","fontFamily","ChatInRoom","messages","state","historyMessages","useChatRooms","userChatRooms","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","jid","room_background","room_thumbnail","users_cnt","roomData","setRoomData","fileRef","useRef","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","showDialogTxt","setShowDialogTxt","headline","description","dialogTxt","setDialogTxt","useParams","getPublicProfile","chooseRoom","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","lastMessageID","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","userAvatar","profileImage","notDisplayedValue","sendFile","file","formData","FormData","append","uploadFile","results","chatName","createdAt","expiresAt","fileName","filename","isVisible","originalname","ownerKey","size","duration","updatedAt","userId","waveForm","attachmentId","_id","wrappable","current","timeoutId","clearTimeout","conferenceRoomJID","window","onblur","onfocus","Box","responsive","scrollable","placeholder","loading","room","active","unreadCnt","unreadMessages","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","typingIndicator","composing","content","arr","previousJID","nextJID","currentJID","getPosition","isSystemMessage","toString","onPaste","Array","from","clipboardData","items","find","x","test","blob","getAsFile","onSend","onAttachClick","click","files","ref","DialogTitle","DialogContentText","CircularProgress","Button","Chat","Container"],"sourceRoot":""}