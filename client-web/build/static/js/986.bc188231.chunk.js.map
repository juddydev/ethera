{"version":3,"file":"static/js/986.bc188231.chunk.js","mappings":"mMAIaA,EAAyB,SAACC,GACnC,OAAGA,EACQA,EAAIC,QAAQ,WAAY,OAAOC,cAE/B,uBAEf,EAEaC,EAAiB,yCAAG,WAC7BC,EACAC,EACAC,EACAC,EACAC,GAAgB,oFA8Bf,OA5BKC,EAAwB,CAACL,EAAiBC,GAC3CK,OACAC,KAAK,KAEJC,EAAUH,EAAsBP,cAAgBW,EAAAA,GAChDC,EAAoB,CAACR,EAAaC,GAAgBG,OAAOC,KAAK,SAE9DI,EAAmBC,EAAAA,EAAAA,WAAyBC,cAE9CC,GAAY,EACkD,IAA/DH,EAAiBI,QAAO,SAACC,GAAE,OAAKA,EAAGC,MAAQT,CAAO,IAAEU,SACnDJ,GAAY,EACZK,EAAAA,GAAAA,cAAmBd,EAAsBP,eACzCqB,EAAAA,GAAAA,SAAcd,EAAsBP,eACpCqB,EAAAA,GAAAA,WACId,EAAsBP,cACtB,CAACsB,SAAUV,IAEfS,EAAAA,GAAAA,SAAcX,GACdW,EAAAA,GAAAA,eAAoBX,GAEpBa,YAAW,WACPF,EAAAA,GAAAA,WACIxB,EAAuBK,GACvBQ,EAAQV,cACRH,EAAuBM,GAE/B,GAAG,MACN,kBAEM,CAACO,QAAAA,EAASY,SAAUV,EAAmBI,UAAAA,IAAU,2CAC3D,gBAtC6B,6C,8XCqCjBQ,EAA8B,SAAH,GAQjC,IAPLC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAoB,EAApBA,qBACAC,EAAoB,EAApBA,qBACAC,EAAmB,EAAnBA,oBACAC,EAAa,EAAbA,cACAC,EAAQ,EAARA,SAEMC,EAAYP,EAAQQ,KAAKC,gBACzBC,EAAWV,EAAQQ,KAAKG,eACxBC,EAAaZ,EAAQQ,KAAKK,UAAUC,MAAM,KAAK,GAE/CC,GADUC,EAAAA,EAAAA,UAAQ,0BAAiB,QAAjB,EAAMpB,EAAAA,GAAAA,cAAW,OAAK,QAAL,EAAX,EAAaF,WAAG,WAAL,EAAX,EAAkBuB,WAAWH,MAAM,KAAK,EAAE,GAAE,MAC3CF,EACzBM,GAAUC,EAAAA,EAAAA,MAChB,GAA8BC,EAAAA,EAAAA,YAAsB,eAA7CC,EAAO,KAAEC,EAAU,KAE1B,EAAgCC,EAAAA,SAAmC,MAAK,eAAjEC,EAAQ,KAAEC,EAAW,KACtBC,EAAWC,QAAQH,GAEzB,GACEJ,EAAAA,EAAAA,UAAqB,YAAW,eAD3BQ,EAAgB,KAAEC,EAAmB,KAGtCC,EAAiB,WACrBL,EAAY,MACZtB,GAAqB,EAAMH,EAC7B,EAMM+B,EAAgB,WACpB3B,GAAoB,EAAMJ,EAC5B,EAUMgC,EAAiB,WACrB,OACE,UAACC,EAAA,EAAM,CACLC,QAAQ,OACRC,MAAO,CACLC,cAAe,MACfC,QAAS,OACTC,cAAe,OACfC,UAAW,QACX,WAEF,SAACC,EAAA,EAAO,CACNL,MAAO,CACLM,YAAa,MACbC,aAAc,MACdC,YAAa,OAEfT,QAAQ,SACRU,YAAY,WACZC,UAAQ,KAGV,4BACE,oBAAQV,MAAO,CAAEW,OAAQ,WAAY,UAClC9C,EAAQQ,KAAKuC,oBACV/C,EAAQQ,KAAKuC,oBACb,OACJ,qBAED/C,EAAQQ,KAAKwC,0BACqC,UAAnDhD,EAAQQ,KAAKyC,oBAAoBnC,MAAM,KAAK,IAC1C,SAACoC,EAAA,EAAI,CAACC,GAAI,CAAEC,SAAU,KAAM,UAC1B,SAACC,EAAA,EAAc,CAACC,QAASvB,EAAc,UACrC,SAACwB,EAAA,EAAS,CACRpB,MAAO,CACLqB,OAAQ,IACRC,UAAW,QACXC,eAAgB,QAElBC,UAAU,MACVH,OAAO,MACPI,MAAO5D,EAAQQ,KAAKwC,yBACpBa,IAAK7D,EAAQQ,KAAKsD,8BAItB,KAEH9D,EAAQQ,KAAKwC,0BACqC,gBAAnDhD,EAAQQ,KAAKyC,oBAAoBnC,MAAM,KAAK,IAC1C,eAAGiD,OAAO,SAASC,KAAMhE,EAAQQ,KAAKyD,SAAS,WAC7C,SAAC,kBAAuB,CACtBC,IAAKlE,EAAQQ,KAAKwC,yBAClBa,IAAK7D,EAAQQ,KAAKsD,wBAClBK,MAAO,MAERnE,EAAQQ,KAAKyC,oBAAoBnC,MAAM,KAAK,MAE7C,KAEHd,EAAQQ,KAAKwC,0BACqC,UAAnDhD,EAAQQ,KAAKyC,oBAAoBnC,MAAM,KAAK,IAC1C,mBAAOsD,UAAQ,EAACD,MAAM,QAAO,WAC3B,mBACED,IAAKlE,EAAQQ,KAAKwC,yBAClBqB,KAAMrE,EAAQQ,KAAKyC,oBACnBqB,MAAOtE,EAAQQ,KAAKsD,0BACpB,iDAGF,KAEH9D,EAAQQ,KAAKwC,0BACqC,UAAnDhD,EAAQQ,KAAKyC,oBAAoBnC,MAAM,KAAK,IAC1C,mBAAOsD,UAAQ,aACb,mBACEF,IAAKlE,EAAQQ,KAAKwC,yBAClBqB,KAAMrE,EAAQQ,KAAKyC,sBACnB,sDAGF,MAEJ,iBACEsB,wBAAyB,CACvBC,OAAQxE,EAAQQ,KAAKiE,gBAAgBnG,QACnC,wBACA,+BAOd,EASA,OAPAoG,EAAAA,EAAAA,YAAU,WACJ1E,EAAQQ,KAAKmE,cACfrD,EAAWsD,KAAKC,MAAM7E,EAAQQ,KAAKmE,eAErC9C,EAAoBd,EAAa,WAAa,WAChD,GAAG,KAGD,iBAAK+D,GAAI,UAAU,YACd7E,EAAS8E,YACV,SAAC,KAAgB,UAAE9E,EAAS8E,aAE9B,UAAC,KAAU,CACTC,eAAgBhF,EAAQQ,KAAKyE,UAAY3E,GArH5B,SAAC4E,GAIlBA,EAAMC,iBACNrD,GACF,EAgHMK,MAAO,CACLiD,aACoB,SAAlBnF,EAASoE,MAAqC,WAAlBpE,EAASoE,KAAoB,GAAK,MAElEgB,MAAO,CACLC,OAAQ/E,EAAY,IAAMG,EAC1B6E,UAAW3D,EACX3B,SAAUA,EAASA,UAErBuF,eAAgBzE,EAAa,KAAO,KACpC0E,aAAgC,UAAlBxF,EAASoE,MAAsC,WAAlBpE,EAASoE,KAAkB,WAElD,UAAlBpE,EAASoE,MAAsC,WAAlBpE,EAASoE,QACtC,gBACElC,MAAO,CACLO,aAAc,MACdgD,UAAW,aACXvB,MAAO,OACPX,OAAQ,OACRV,OAAQ,WAEVQ,QAAS,kBACPpC,EAAQyE,KAAK,YAAc3F,EAAQQ,KAAKoF,oBAAoB,EAE9Dd,GAAI,SACJZ,IACElE,EAAQQ,KAAKqF,SACT7F,EAAQQ,KAAKqF,UACZtF,EAAY,IAAMG,EAEzBoF,QAAS,YAAwB,IAArBC,EAAa,EAAbA,cACVA,EAAcC,QAAU,KACxBD,EAAc7B,IA9MH,+BA8M4B3D,EAAY,IAAMG,CAC3D,EACAmD,IAAKtD,KAIT,UAAC,mBAAwB,WAEtBP,EAAQQ,KAAKyE,UAAY3E,IAAY,SAAC0B,EAAc,KACjC,UAAlB/B,EAASoE,MAAsC,WAAlBpE,EAASoE,QACtC,kBACElC,MAAO,CACLE,QAAS,OACT4D,eAAgB,gBAChBC,WAAY,UACZ,WAEF,oBACE/D,MAAO,CAAEW,OAAQ,WACjBQ,QAAS,kBACPpC,EAAQyE,KAAK,YAAc3F,EAAQQ,KAAKoF,oBAAoB,EAC7D,UAEArF,EAAS,IAAGG,GACb,sBAEAJ,IAAaN,EAAQQ,KAAKyE,UAC1B,SAACkB,EAAA,EAAU,CACT,aAAW,OACXC,GAAG,cACH,gBAAe1E,EAAW,iBAAc2E,EACxC,gBAAe3E,EAAW,YAAS2E,EACnC,gBAAc,OACd/C,QAASxB,EAAe,UAExB,SAACwE,EAAA,EAAY,SAMpBtG,EAAQQ,KAAK+F,eACVC,EAAAA,GAAexG,EAAQQ,KAAKiG,YAC5B,SAACvD,EAAA,EAAI,CAACC,GAAI,CAAEC,SAAU,KAAM,UAC1B,SAACC,EAAA,EAAc,CAACC,QAASvB,EAAc,UACrC,SAACwB,EAAA,EAAS,CACRpB,MAAO,CACLqB,OAAQ,IACRC,UAAW,QACXC,eAAgB,QAElBC,UAAU,MACVH,OAAO,MACPI,MAAO5D,EAAQQ,KAAKyD,SACpBJ,IAAK7D,EAAQQ,KAAKkG,mBAM3B1G,EAAQQ,KAAK+F,eACVI,EAAAA,GAAe3G,EAAQQ,KAAKiG,YAC5B,mBAAOrC,UAAQ,EAACD,MAAM,QAAO,WAC3B,mBACED,IAAKlE,EAAQQ,KAAKyD,SAClBI,KAAMrE,EAAQQ,KAAKiG,SACnBnC,MAAOtE,EAAQQ,KAAKkG,eACpB,iDAKP1G,EAAQQ,KAAK+F,eACVK,EAAAA,GAAe5G,EAAQQ,KAAKiG,YAC5B,mBAAOrC,UAAQ,aACb,mBACEF,IAAKlE,EAAQQ,KAAKyD,SAClBI,KAAMrE,EAAQQ,KAAKiG,WACnB,uDAKNzG,EAAQQ,KAAK+F,cACb,4BACE,iBACEhC,wBAAyB,CACvBC,OAAQxE,EAAQ6G,KAAKvI,QACnB,wBACA,2BAKN,iBACE6D,MAAO,CACLE,QAAS,OACT4D,eAAgB,gBAChBC,WAAY,SACZY,UAAW,EACXC,SAAU,IACVC,MACuB,aAArBpF,EACI,qBACA,UACNQ,cACuB,aAArBR,EAAkC,MAAQ,eAC5C,WAEF,gBACEO,MAAO,CACL8E,SAAU,IACV,UAEDC,EAAAA,EAAAA,GAAkB,IAAIC,KAAQ,IAAIA,KAAKnH,EAAQoH,OAAS,GACrDC,EAAAA,EAAAA,GAAO,IAAIF,KAAKnH,EAAQoH,MAAO,WAC/BE,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,GAAQ,IAAIJ,KAAKnH,EAAQoH,MAAO,GAChC,IAAID,KACJ,CACEK,WAAW,MAIpBxH,EAAQyH,eAAiB,IACxB,iBAAKtF,MAAO,CAAEE,QAAS,OAAQ6D,WAAY,UAAW,WACpD,gBAAK/D,MAAO,CAAE8E,SAAU,IAAK,SACnB,OAAPjH,QAAO,IAAPA,OAAO,EAAPA,EAASyH,kBAEZ,gBACEvD,IAAKwD,EACLvF,MAAO,CAAEgC,MAAO,GAAIX,OAAQ,IAC5BK,IAAK,YAIV7D,EAAQQ,KAAKmH,WACd,gBAAKxF,MAAO,CAAEE,QAAS,OAAQ6D,WAAY,WAAY0B,WAAW,EAAGjF,YAAY,GAAI,UACnF,SAACkF,EAAA,EAAU,CAACZ,SAAU,GAAG,gCAyBnC,SAAC,YAAiB,UACfjH,EAAQ8H,gBAAkB,GACJ,aAArBlG,IACCtB,IACC,SAAC2B,EAAA,EAAM,CAACqB,QAAS,WApU3BjD,GAoUiD,EAAE6B,QAAQ,OAAM,UACrD,UAAC2F,EAAA,EAAU,CAACZ,SAAU,OAAQ3E,cAAe,OAAO,UACjDtC,EAAQ8H,gBAAiB,IACG,IAA5B9H,EAAQ8H,gBAAwB,QAAU,UAAS,+BAO7DzG,IACD,SAAC0G,EAAA,EAAG,CAAC5E,GAAI,CAAE,WAAY,CAAE6E,EAAG,KAAQ,UAClC,gBACE7F,MAAO,CACLE,QAAS,OACTD,cAAe,SACf+B,MAAO,cACPyD,WAAY,QACZ,SAEDvG,EAAQ4G,KAAI,SAACC,EAAQC,GACpB,OACE,SAAClG,EAAA,EAAM,CACLC,QAAQ,WACRkG,KAAK,QACL9E,QAAS,kBAAMpD,EAAqBgI,EAAO,EAAC,SAG3CA,EAAOG,MAFHF,EAKX,UAMZ,EC9aaG,EAAoC,SAAH,GAA4B,IAAvBtI,EAAO,EAAPA,QAAgB,EAAPuI,QACxD,OACI,gBAAKpG,MAAO,CACRI,UAAW,SACXyE,MAAO,UACPC,SAAU,OACVvB,UAAW,aACX8C,WAAY,sDACd,SACGxI,EAAQ6G,MADL7G,EAAQyI,IAIxB,E,6IChBMC,EAAO,SAEAC,EAAc,SAAH,GAUjB,IATLC,EAAI,EAAJA,KACAP,EAAI,EAAJA,KACAQ,EAAM,EAANA,OACAC,EAAY,EAAZA,aAOM5H,GAAUC,EAAAA,EAAAA,MAChB,OAAKyH,GAoBH,SAAC,IAAG,CACF3C,eAAgB,SAChBC,WAAY,SACZ/D,MAAO,CAAE4G,QAAS,SAAU3F,SAAU,KAAM,UAE5C,SAACnB,EAAA,EAAM,CACLqB,QAAS,WACPwF,IACA5H,EAAQyE,KAAK+C,EAAOE,EAAK3J,QAAUC,EAAAA,GACrC,EAAE,SAEDmJ,OA7BH,SAAC,IAAG,CACFpC,eAAgB,SAChBC,WAAY,SACZ/D,MAAO,CAAE4G,QAAS,UAAW,UAE7B,SAAC9G,EAAA,EAAM,CACL+G,UAAWH,EACXvF,QAAS,WACPwF,IACA5H,EAAQyE,KAAK+C,EAAO,OACtB,EAAE,SAED,WAqBX,E,WClDaO,EAAa,SAAH,GAQhB,IAPLL,EAAI,EAAJA,KACArD,EAAS,EAATA,UACA2D,EAAY,EAAZA,aAMMhI,GAAUC,EAAAA,EAAAA,MAOhB,OAAS,OAAJyH,QAAI,IAAJA,GAAAA,EAAMP,MA0BT,UAAC,IAAG,CACFlF,GAAI,CACFd,QAAS,OACT4D,eAAgB,SAChBC,WAAY,SACZ9D,cAAe,UACf,WAEF,SAACyF,EAAA,EAAU,CAAC1E,GAAI,CAAEgG,WAAY,OAAQlC,SAAU,IAAK,SAClD2B,EAAKP,QAER,SAACR,EAAA,EAAU,UAAEe,EAAKQ,kBAnClB,UAAC,IAAG,CACFjG,GAAI,CAAEd,QAAS,OAAQD,cAAe,SAAU8D,WAAY,UAAW,WAEvE,UAAC,IAAG,CAAC/C,GAAI,CAAE+C,WAAY,SAAU7D,QAAS,QAAS,WACjD,UAACwF,EAAA,EAAU,uEACiD,KAC1D,oCAEF,gBAAK3D,IAAKwD,EAAMvF,MAAO,CAAEgC,MAAO,GAAIX,OAAQ,IAAMK,IAAK,aAWzD,SAAC5B,EAAA,EAAM,CAACqB,QA3BQ,WACpBpC,EAAQyE,KAAK,WAAY,CACvB0D,cAAe9D,EACf+D,SAAUJ,GAEd,EAsBqC,gCAmBvC,E,WCPMK,EACG,QADHA,EAEE,OAFFA,GAGG,QAHHA,GAIE,OAEFC,GAA2C,CAC/CC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,KAAM,KAGFC,IAA0C,eAC7CN,EAAkBA,KAAe,SACjCA,GAAkBA,IAAe,SACjCA,GAAmBA,IAAgB,SACnCA,EAAmBA,IAAgB,GAkBhCO,GAAgB,CACpBzB,KAAM,GACNe,YAAa,GACbW,cAAe,CAAEL,KAAM,KAAME,KAAM,KAAMH,MAAO,KAAME,MAAO,MAC7DK,QAAS,GACTC,gBAAiB,GACjBC,UAAW,IAAI/C,KACfgD,IAAK,GACLlL,QAAS,GACTmL,UAAW,IAAIjD,KACfkD,aAAc,CAAEX,KAAM,KAAME,KAAM,KAAMH,MAAO,KAAME,MAAO,OAGxDxH,GAAQ,CACZlC,SAAU,WACVqK,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,EAAG,EACHC,QAAS,QAGEC,GAA4C,SAAH,GAI/C,IAHL9B,EAAM,EAANA,OACA+B,EAAI,EAAJA,KACAC,EAAO,EAAPA,QAEA,GAAkDzJ,EAAAA,EAAAA,UAAS,IAAG,eAAvD0J,EAAiB,KAAEC,EAAoB,KAC9C,GAA8B3J,EAAAA,EAAAA,WAAS,GAAM,eAAtC4J,EAAO,KAAEC,EAAU,KAE1B,GAAwC7J,EAAAA,EAAAA,YAAoC,eAArE8H,EAAY,KAAEgC,EAAe,KACpC,GACE9J,EAAAA,EAAAA,UAAuB0I,IAAc,eADhCqB,EAAe,KAAEC,EAAkB,KAEpCC,GAAOhM,EAAAA,EAAAA,IAAc,SAACiM,GAAK,OAAKA,EAAMD,IAAI,IAE1CE,GAAQC,EAAAA,EAAAA,KAERC,EAAc,yCAAG,yFACJ,OAAjBR,GAAW,GAAM,mBAEGS,EAAAA,EAAAA,MAAeC,IAAIC,iBAA0B/C,GAAQ,KAAD,EAAhEgD,EAAG,OACTT,EAAmBS,EAAIrL,KAAKsL,QAAQ,gDAEpCV,EAAmBtB,IACnBiC,QAAQC,IAAI,EAAD,IAAQ,QAErBf,GAAW,GAAO,yDACnB,kBAVmB,oCAYpBvG,EAAAA,EAAAA,YAAU,WACHmE,GACHuC,EAAmBtB,IAEjBjB,GACF4C,GAEJ,GAAG,CAAC5C,IACJ,IAaMoD,EAAc,SAACC,EAAkBxM,EAAayM,IACjBC,EAAAA,EAAAA,IAAiBf,EAAKgB,eAAvD,IACMC,EACJjB,EAAK9K,UAAY,IAAM8K,EAAK3K,SAA5B2K,iBACIkB,EACJlB,EAAK9K,UAAY,IAAM8K,EAAK3K,SAA5B2K,eACI7K,EAAO,CACXC,gBAAiB4K,EAAK9K,UACtBI,eAAgB0K,EAAK3K,SACrBkF,oBAAqByF,EAAKgB,cAC1BG,iBAAiB,EACjBC,YAAa,EACbC,kBAAmB,GACnBC,QAAST,EACTrG,SAAUwF,EAAKuB,aACf3N,QAASS,EACTuF,SAAS,EACTR,gBAAiB,GACjBoI,cAAe,GACf9J,oBAAqB,IAEvBnD,EAAAA,GAAAA,kBACEF,EACAyM,EAAaI,EAAYD,EACzB9L,EAEJ,EACMsM,EAAY,yCAAG,mHAECpB,EAAAA,EAAAA,MAAeqB,KAAKnB,cAAuB/C,EAAQ,CAAC,GAAG,KAAD,EAAlEgD,EAAG,OACTE,QAAQC,IAAIH,EAAIrL,MAAM,gDAEtBuL,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,kBAPiB,mCA4BlB,IApBAtH,EAAAA,EAAAA,YAAU,WACQ,OAAZwE,QAAY,IAAZA,GAAAA,EAAcb,MAChB4D,EACE/C,EAAab,KACba,EAAajK,QAAUC,EAAAA,IACvB,EAGN,GAAG,CAACgK,KACJxE,EAAAA,EAAAA,YAAU,WACJyG,EAAgB9C,OAClB4D,EACEd,EAAgB9C,KAChB8C,EAAgBlM,QAAUC,EAAAA,IAC1B,GAEF4N,IAEJ,GAAG,CAAC3B,KAECA,EAAgBlM,UAAY6L,EAC/B,OAAO,KAGT,IAAMkC,EAAmB,SAACzH,GAAuB,IAAD,QACxC0H,EAjJkB,SAAC1H,GAC3B,OAAOsE,GAAmBtE,EAC5B,CA+IsC2H,CAAoBpC,GACtD,OA1E2B,WAAO,IAAD,gBACjC,QACkB,OAAfK,QAAe,IAAfA,GAA8B,QAAf,EAAfA,EAAiBpB,qBAAa,OAA9B,EAAgCJ,UACjB,OAAfwB,QAAe,IAAfA,GAA8B,QAAf,EAAfA,EAAiBpB,qBAAa,OAA9B,EAAgCH,SACjB,OAAfuB,QAAe,IAAfA,GAA8B,QAAf,EAAfA,EAAiBpB,qBAAa,OAA9B,EAAgCL,SACjB,OAAfyB,QAAe,IAAfA,GAA8B,QAAf,EAAfA,EAAiBpB,qBAAa,OAA9B,EAAgCN,UACjB,OAAf0B,QAAe,IAAfA,GAA6B,QAAd,EAAfA,EAAiBd,oBAAY,OAA7B,EAA+BV,UAChB,OAAfwB,QAAe,IAAfA,GAA6B,QAAd,EAAfA,EAAiBd,oBAAY,OAA7B,EAA+BT,SAChB,OAAfuB,QAAe,IAAfA,GAA6B,QAAd,EAAfA,EAAiBd,oBAAY,OAA7B,EAA+BX,SAChB,OAAfyB,QAAe,IAAfA,GAA6B,QAAd,EAAfA,EAAiBd,oBAAY,OAA7B,EAA+BZ,MAEpC,CA+DM0D,IAA0B5H,IAAc0H,GAExC,SAACtE,EAAW,CACVN,KAAM4E,EAA4B,KAAkB,OAAZ/D,QAAY,IAAZA,OAAY,EAAZA,EAAcb,MACtDQ,OAAQA,EACRD,KAAMM,EACNJ,aAAc,WACZiC,EAAqBkC,GACrB/B,EAAgBhC,EAClB,KAKJ,SAACP,EAAW,CACVN,KACEmB,GAAiBjE,GACjB,MACyC,QAAxC,EAAA4F,EAAgBpB,cAAcxE,UAAU,aAAxC,EAA0C8C,QACF,QADM,EAC7C8C,EAAgBd,aAAa9E,UAAU,aAAvC,EAAyC8C,OAE7CQ,OAAQA,EACRD,MACiB,OAAfuC,QAAe,IAAfA,GAA8B,QAAf,EAAfA,EAAiBpB,qBAAa,WAAf,EAAf,EAAiCxE,MAClB,OAAf4F,QAAe,IAAfA,GAA6B,QAAd,EAAfA,EAAiBd,oBAAY,WAAd,EAAf,EAAgC9E,IAElCuD,aAAc,WACZiC,EAAqBxF,GACrB2F,EAAgBC,EAClB,GAGN,EACA,OACE,SAACiC,EAAA,EAAK,CAACxC,KAAMA,EAAMC,QAASA,EAAQ,UAClC,SAAC,IAAG,CAAC1H,GAAIhB,GAAM,SACZ6I,GACC,SAACqC,EAAA,EAAgB,CAACjF,KAAM,MAExB,UAAC,IAAG,YACF,SAAC,IAAG,CACFjF,GAAI,CAAEmK,QAAS,QAASC,GAAI,OAAQ7K,aAAc,OAAQ+H,EAAG,GAAI,UAEjE,SAACxB,EAAU,CACTL,KAAMuC,EACN5F,UAAWuF,EACX5B,aAAcA,OAGlB,UAAC,IAAG,CACF/F,GAAI,CACFd,QAAS,OACTD,cAAe,SACf6D,eAAgB,SAChBC,WAAY,SACZoH,QAAS,QACT5K,aAAc,OACd+H,EAAG,GACH,UAEDuC,EAAiBzD,IAClB,UAAC,IAAG,CACFpG,GAAI,CACFd,QAAS,OACTmL,oBAAqB,iBACrBtH,WAAY,SACZD,eAAgB,UAChB,WAEF,SAAC,IAAG,CAAC9C,GAAI,CAAEd,QAAS,QAAS,SAC1B2K,EAAiBzD,MAEpB,SAAC,IAAG,CACFpG,GAAI,CACFd,QAAS,OACT4D,eAAgB,SAChBC,WAAY,UACZ,UAEF,SAACC,EAAA,EAAU,CAAChD,GAAI,CAAE6D,MAAOuE,EAAMkC,QAAQC,QAAQC,MAAO,UACpD,SAACC,EAAA,EAAW,CAAC3G,SAAS,eAG1B,SAAC,IAAG,CAAC9D,GAAI,CAAEd,QAAS,QAAS,SAC1B2K,EAAiBzD,SAGrByD,EAAiBzD,aAOhC,E,4DC5QA,GAjC2B,SAACsE,GAExB,IACIC,EAKAD,EALAC,QACAC,EAIAF,EAJAE,YACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,OACAC,EACAL,EADAK,SAGEC,EAAU5M,EAAAA,OAAa,MAE7B,OACI,4BACI,SAAC,KAAY,CACbuM,QAASA,EACTC,YAAaA,EACbC,SAAUA,EACVC,OAAQA,EACRG,cAAe,kBAAMD,EAAQE,QAAQC,OAAO,KAE5C,kBACAjK,KAAK,OACLgE,KAAK,OACLjC,GAAG,OACH4H,SAAU,SAAC9I,GAAK,OAAKgJ,EAAShJ,EAAMnB,OAAOwK,MAAM,IAAI,EAAK,EAC1DC,IAAKL,EACLhM,MAAO,CAAEE,QAAS,YAI9B,E,YCkRA,GAlRwD,SAAH,GAa9C,IAAD,IAZJoM,EAAQ,EAARA,SACAC,EAAmB,EAAnBA,oBACAC,EAAY,EAAZA,aACAC,EAAO,EAAPA,QACAC,EAAiB,EAAjBA,kBACAC,EAAW,EAAXA,YAEAZ,GADa,EAAba,cACQ,EAARb,UACAc,EAAgB,EAAhBA,iBACA7O,EAAoB,EAApBA,qBACA8O,EAAmB,EAAnBA,oBACAC,EAAa,EAAbA,cAEMC,GAA2B9P,EAAAA,EAAAA,IAC/B,SAAC+P,GAAK,OAAKA,EAAMD,wBAAwB,IAE3C,GAA8C/N,EAAAA,EAAAA,UAAS,IAAG,eAAnDiO,EAAe,KAAEC,EAAkB,KAEpCjE,GAAOhM,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAM/D,IAAI,IAC1C/L,GAAgBD,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAM9P,aAAa,IAC5DiQ,GAAWlQ,EAAAA,EAAAA,IAAc,SAACiM,GAAK,OAAKA,EAAMkE,eAAe,IAEvDC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAuBJ,EAAS/P,QACpC,SAACoQ,GAAqB,OACpBA,EAAKH,QAAQI,SAASJ,IACtBG,EAAKpP,KAAKyE,SACV2K,EAAKpP,KAAKqM,gBAAkBsC,EAAyB/I,EAAE,IAErD0J,GAA2BzQ,EAAAA,EAAAA,IAC/B,SAAC+P,GAAK,OAAKA,EAAMU,wBAAwB,IAErCC,GAAgB1Q,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAMW,aAAa,IAC5D7O,GAAUC,EAAAA,EAAAA,MAuBV6O,EAAoB,SAAC9H,GACzB,GAAImH,EAAgBY,OAAOtQ,OAAS,EAAG,CAE1B,OAAPiP,QAAO,IAAPA,GAAAA,EAAShC,eACS,OAAPgC,QAAO,IAAPA,OAAO,EAAPA,EAAShC,cAExB,IAAMsD,EAAuBC,EAAAA,SAAmBd,GAC1Ce,GAAkBC,EAAAA,GAAAA,IAAUH,GAElC,GAAIE,EAAgBH,OAAOtQ,OAAS,EAAG,CACrC,IAAMa,EAAO,CACXC,gBAAiB4K,EAAK9K,UACtBI,eAAgB0K,EAAK3K,SACrBkF,oBAAqByF,EAAKgB,cAC1BG,iBAAiB,EACjBC,YAAa,EACbC,kBAAmByC,EAAyB3O,KAAKkM,kBACjDC,QAAS8B,EAASpG,KAClBxC,SAAUwF,EAAKuB,aACf3N,QAASwP,EAAS/O,IAClBuF,SAAS,EACTR,gBAAiB0K,EAAyBtI,KAC1CgG,cAAesC,EAAyB/I,GACxCrD,oBACEoM,EAAyB3O,KAAKC,gBAC9B,IACA0O,EAAyB3O,KAAKG,eAChC2P,qBAAsBnB,EAAyB/H,KAC/CmJ,oBAAqBpB,EAAyB3O,KAAKkG,aACnD1D,yBAA0BmM,EAAyB3O,KAAKyD,SACxDuM,wBACErB,EAAyB3O,KAAKiQ,gBAChCxN,oBAAqBkM,EAAyB3O,KAAKiG,SACnD3C,wBAAyBqL,EAAyB3O,KAAKkG,aACvDgK,gBAAiB,MACjBC,oBAAqB,MACrBC,oBAAqB,MACrBC,wBAAyB,MACzBC,qBAAsB,MACtBC,iBAAkB,MAClBC,yBAA0B,MAC1BC,2BAA4B,MAC5BC,mBAAoB/B,EAAyB3O,KAAKvB,QAClDiQ,cAAeA,EACfvJ,MAAM,GAGR/F,EAAAA,GAAAA,kBAAuBkP,EAAasB,EAAiB5P,EACvD,CACF,CACF,EAEA,OACE,UAAC,KAAa,CACZ2B,MAAO,CACLgP,gBAAiB,OACjB,YAEC1C,IACD,iBAAK3J,GAAG,qBAAoB,WAC1B,UAAC,KAAkB,CACjB3C,MAAO,CACLqB,OAAQ,QACR,WAEF,SAAC,aAA0B,CACzB4N,SAAS,MACTC,UACE,4BACE,SAACxJ,EAAA,EAAU,CAACsB,WAAY,OAAO,qBAC/B,SAACtB,EAAA,EAAU,UAAE4G,EAASpG,UAG1B/E,QAvFkB,WAC5BpC,EAAQyE,KAAK,gBAAkBmK,EACjC,KAuFU,SAAC,aAA0B,WACzB,SAAC3J,EAAA,EAAU,CACThD,GAAI,CAAE6D,MAAO,SACb1D,QAAS,kBAAMoL,GAAoB,EAAM,EAAC,UAE1C,SAAC4C,GAAA,EAAS,YAKhB,SAAC,IAAG,CAACnN,MAAO,OAAQ4E,QAAS,EAAE,UAC7B,2BACE,0BACE,SAAChJ,EAAO,CACNK,oBAAqB4O,EACrB7O,qBAAsBA,EACtBG,SAAUqO,EAEV7J,GAAI,UACJ7E,SAAU,CAAEA,SAAU,SAAUoE,KAAM,UACtCrE,QAASmP,EACTjP,qBAAsB8P,GAJjBb,EAAyB/I,WAStC,SAAC5D,EAAA,EAAO,UAAE2M,EAAyBrH,sBAIvC,UAAC,KAAW,CACV3F,MAAO,CACLoP,gBAAkC,OAAjB1C,QAAiB,IAAjBA,GAAAA,EAAmB2C,gBAAe,cACxC3C,EAAkB2C,gBAAe,KACxC,QACJC,iBAAkB,YAClBC,eAAgB,aAElBC,6BAA6B,EAC7BC,kBACyD,QAAtD,EAACtS,EAAcE,QAAO,SAACqS,GAAC,OAAKA,EAAEnS,MAAQoP,CAAW,IAAE,UAAE,QAArD,EACEgD,aACF,SAAC,KAAe,CACd3P,MAAO,CAAE4P,QAAS,MAClBC,QACuD,QADhD,EACL1S,EAAcE,QAAO,SAACqS,GAAC,OAAKA,EAAEnS,MAAQoP,CAAW,IAAE,UAAE,aAArD,EAAuDgD,YAI9D,UAEAnC,EAAqB1H,KAAI,SAACjI,EAASmI,EAAO8J,GAAG,cACX,UAAjCjS,EAAQQ,KAAKgM,iBACX,SAACzM,EAAO,CACNK,oBAAqB4O,EACrB7O,qBAAsBA,EACtBG,UAAU,EAEVwE,GAAI,UACJ7E,UAAUiS,EAAAA,GAAAA,IAAYD,EAAKjS,EAASmI,GACpCnI,QAASA,EACTE,qBAAsB8P,GAJjBhQ,EAAQoG,KAOf,SAACkC,EAAa,CAEZxD,GAAI,UACJ9E,QAASA,EACTuI,QAAoB,QAAb,EAAE3I,EAAAA,GAAAA,cAAW,OAAK,QAAL,EAAX,EAAaF,WAAG,WAAL,EAAX,EAAkBuB,YAHtBjB,EAAQoG,GAKhB,IAEFuJ,EAAqBhQ,QAAU,IAC5BmP,IACA,SAAC,aAAmB,CAClB3M,MAAO,CACLE,QAAS,OACTD,cAAe,SACf6D,eAAgB,SAChBzC,OAAQ,OACRjB,UAAW,SACX0E,SAAU,SACV,SAEA8I,EAKA,cAJA,2BACIjB,GAAe,kDAOzBiB,GAAiBjB,GAAea,EAAqBhQ,QAAU,IAC/D,SAAC,aAAmB,CAClBwC,MAAO,CACLE,QAAS,OACTD,cAAe,SACf6D,eAAgB,SAChBzC,OAAQ,OACRjB,UAAW,SACX0E,SAAU,SACV,wCAOG,OAARwH,QAAQ,IAARA,IAAAA,EAAUpG,QACX,iBAAKvD,GAAI,eAAe,WACtB,SAACtC,EAAA,EAAO,KACR,UAAC,IAAG,CACF2P,YAAa,UACb3O,OAAO,OACP0C,WAAY,SACZ9D,cAAe,MACfC,QAAQ,OACR8B,MAAO,OAAO,WAEd,SAACiO,GAAA,EAAQ,CACPC,QAASnD,EACTlB,SAAUiB,EACVqD,WAAY,CAAE,aAAc,iBAE9B,SAACzK,EAAA,EAAU,oCAGb,SAAC,GAAkB,CACjBmG,SAlOe,SAACuE,GACxBjD,EAAmBiD,GACnB3S,EAAAA,GAAAA,YACEyL,EAAKgB,cACLoC,EAAS/O,IACT2L,EAAK9K,UAAY,IAAM8K,EAAK3K,SAEhC,EA4NUoN,QAvNU,SAAC5I,GACnB,IAAI0K,EAAO4C,MAAMC,KAAKvN,EAAMwN,cAAcC,OAAOC,MAAK,SAACC,GAAM,MAC3D,WAAWC,KAAKD,EAAExO,KAAK,IAEzB,GAAIuL,EAAM,CAER,IAAImD,EAAOnD,EAAKoD,YAChB9E,EAAS6E,GAAM,EACjB,CACF,EA+MU9E,OAAQ+B,EACRjC,YAAY,oBACZG,SAAUA,SAMtB,E,oFCnSM+E,GAAc,CAAC,EAAG,EAAG,EAAG,KAYxBC,GACI,SADJA,GAGW,gBAHXA,GAIM,WAGL,SAASC,GAAmB,GAQvB,IAAD,EAPTvI,EAAI,EAAJA,KACAC,EAAO,EAAPA,QAEA7K,GADO,EAAPgL,QACO,EAAPhL,SACAoT,EAAkB,EAAlBA,mBACA/S,EAAa,EAAbA,cACAgT,EAAW,EAAXA,YAEMhI,GAAOhM,EAAAA,EAAAA,IAAc,SAACiM,GAAK,OAAKA,EAAMD,IAAI,IAEhD,GAAoCjK,EAAAA,EAAAA,UAAS,GAAE,eAAxCkS,EAAU,KAAEC,EAAa,KAChC,GAAoCnS,EAAAA,EAAAA,UAAkB8R,IAAmB,eAAlEM,EAAU,KAAEC,EAAa,KAE1BC,GAAUrU,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAMsE,OAAO,IAChDC,GAAqBtU,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAMuE,kBAAkB,IACpEC,GAAiBC,EAAAA,GAAAA,KAAjBD,aAEFhT,EAAoB,OAAPZ,QAAO,IAAPA,GAAa,QAAN,EAAPA,EAASQ,YAAI,WAAN,EAAP,EAAeK,UAAUC,MAAM,KAAK,GAEjDC,GADUC,EAAAA,EAAAA,UAAQ,0BAAiB,QAAjB,EAAMpB,EAAAA,GAAAA,cAAW,OAAK,QAAL,EAAX,EAAaF,WAAG,WAAL,EAAX,EAAkBuB,WAAWH,MAAM,KAAK,EAAE,GAAE,MAC3CF,EAEzBkT,EAAWJ,EAAQlU,QACvB,SAACC,GAAE,OAAMA,EAAGsU,WAAatU,EAAGwK,gBAAgBtK,OAAS,EAAE,IAGnDqU,EAAiB,WACrB3T,IACAwK,GACF,EAEMoJ,EAAe,WACnBZ,GAAY,EAAMrT,GAClB6K,GACF,EAEMqJ,EAAkB,SAACC,GACV,YAATA,GAKS,UAATA,IACFvU,EAAAA,GAAAA,cAAmBI,EAAQQ,KAAKK,WAChCjB,EAAAA,GAAAA,eACAP,EAAAA,EAAAA,WAEG+U,0BAA0BpU,EAAQQ,KAAKK,YAE5CgK,KAXE4I,EAAcP,GAYlB,EAEMmB,EAAS,yCAAG,WAAOC,GAAe,wFACgC,OAAhEC,EAA6BC,OAATF,GAAiChB,GAAY,EAAD,iBAElDmB,EAAAA,EAAAA,IAChB,MACAX,EAAS,GAAGY,UACZH,EACAvU,EAAQQ,KAAKoF,qBACb,KAAD,EALKiG,EAAG,OAMH8I,EACJb,EAAS,GAAGY,YAAcE,GAAAA,GACtBC,GAAAA,GACAf,EAAS,GAAGY,UACZpP,EAAS+F,EAAK9K,UAAY,IAAM8K,EAAK3K,SACrCoU,EACJ9U,EAAQQ,KAAKC,gBAAkB,IAAMT,EAAQQ,KAAKG,eAC9CoU,EAAW,UAAMzP,EAAM,eAAOgO,EAAU,YAAIqB,EAAQ,eAAOG,GAC3DE,EAAgBnJ,EAAIrL,KAAKyU,YAAY9K,IAC3CvK,EAAAA,GAAAA,kBACEI,EAAQyP,QACRpE,EAAK9K,UACL8K,EAAK3K,SACL2K,EAAKgB,cACL0I,EACAR,EACAvU,EAAQoG,GACR4O,GAGFnK,IAAU,kDAEVkB,QAAQC,IAAI,EAAD,IACX4H,EAAa,QAAS,+CACtB/I,IAAU,0DAEb,gBAnCc,sCAqCTqK,EAAkB,YACtB1W,EAAAA,GAAAA,GACE6M,EAAKgB,cACLrM,EAAQQ,KAAKoF,oBACbyF,EAAK9K,UACLP,EAAQQ,KAAKC,gBACbT,EAAQQ,KAAKK,WAEZsU,MAAK,SAACrJ,GACL,GAAIA,EAAOvM,UAAW,CACpB,IAAM6V,EAAoB,CACxB1V,IAAKoM,EAAO7M,QACZoJ,KAAMyD,EAAOjM,SACb2R,gBAAiB,OACjB6D,eAAgB,OAChBC,UAAW,IACXC,eAAgB,EAChBzD,UAAW,GACX0D,UAAU,EACVpM,YAAa,IAEfuK,EAAmByB,GACnBhC,EAAmBtH,EAAO7M,QAC5B,MACEmU,EAAmBtH,EAAO7M,QAE9B,IACCwW,OAAM,SAACC,GACN3J,QAAQC,IAAI,0BAA2B0J,EACzC,IACF7K,GACF,EAoLA,OACE,SAAC8K,EAAA,EAAM,CAAC/K,KAAMA,EAAMC,QAASA,EAASzH,SAAU,KAAK,UACnD,SAACwS,EAAA,EAAa,UApLU,WAC1B,IAAK5V,EAAS,OAAO,KACrB,OAAQwT,GACN,KAAKN,GACH,OACE,iBACE/Q,MAAO,CACLE,QAAS,OACTD,cAAe,UACf,UAED,4CACD,SAACH,EAAA,EAAM,CACLqB,QAAS,kBAAM4Q,EAAgB,QAAQ,EACvChS,QAAQ,WACRkG,KAAK,QAAO,8BAMpB,KAAK8K,GACH,OACE,iBACE/Q,MAAO,CACLE,QAAS,OACTD,cAAe,UACf,WAEArB,IAAY,oCACL,KACP,4BACGf,EAAQQ,KAAKC,gBACZ,IACAT,EAAQQ,KAAKG,iBACP,IAAG,iBAIbI,IAAY,gBACZoB,MAAO,CACLE,QAAS,OACT4D,eAAgB,gBAChBC,WAAY,SACZ2P,OAAQ,qBACR,SAED5C,GAAYhL,KAAI,SAAC2H,GAAI,OACpB,iBAEEzN,MAAO,CACLI,UAAW,SACXO,OAAQ,WAEVQ,QAAS,WACS,kBAATsM,EACHyE,EAAUzE,GACV6D,EAAcP,GACpB,EAAE,WAEF,gBACEhP,IAAKwD,EACLvF,MAAO,CACLgC,MAAO,GACPX,OAAQ,IAEVK,IAAK,UAEP,SAACgE,EAAA,EAAU,CACT1E,GAAI,CACFgG,WAAY,QACZ,SAEDyG,MAxBEA,EA0BD,OAGR7O,IAAY,SAACyB,EAAA,EAAO,CACpBL,MAAO,CACL0T,OAAQ,WAGV9U,IAAY,SAACkB,EAAA,EAAM,CACnBqB,QAAS4R,EACThT,QAAQ,WACR4T,WAAW,SAACC,GAAA,EAAQ,IAAI,6BAI1B,SAAC9T,EAAA,EAAM,CACLE,MAAO,CACL0T,OAAQ,oBAEVvS,QAAS0Q,EACT9R,QAAQ,WACR4T,WAAW,SAACE,GAAA,EAAS,IAAI,mBAK1BjV,IACC,SAACkB,EAAA,EAAM,CACLE,MAAO,CACL0T,OAAQ,oBAEVvS,QAAS2Q,EACT/R,QAAQ,WACR4T,WAAW,SAACG,GAAA,EAAQ,IAAI,mBAMxBlV,IAAY,SAACyB,EAAA,EAAO,CACtBL,MAAO,CACL0T,OAAQ,WAGV9U,IAAY,iBACdoB,MAAO,CACLE,QAAQ,OACR6D,WAAW,SACX9D,cAAc,UACd,WAEA,SAACH,EAAA,EAAM,CACLqB,QAAS,kBAAM4Q,EAAgB,UAAU,EACzChS,QAAQ,YACR4T,WAAW,SAACI,GAAA,EAAS,IAAI,8BAI3B,SAACrO,EAAA,EAAU,CACT1F,MAAO,CACLI,UAAW,UAEbL,QAAQ,UACRG,QAAQ,QACR8T,cAAY,4CAOtB,KAAKjD,GACH,OACE,iBACE/Q,MAAO,CACLE,QAAS,OACTD,cAAe,UACf,WAEF,SAACgU,GAAA,EAAS,CACRhQ,GAAG,iBACH/B,KAAM,SACNgS,MAAM,wBACNnU,QAAQ,WACR8L,SAAU,SAAC9I,GAAK,OAAKqO,EAAciB,OAAOtP,EAAMnB,OAAOwO,OAAO,KAEhE,SAACtQ,EAAA,EAAM,CACLE,MAAO,CACL2E,UAAW,IAEbxD,QAAS,kBAAM+Q,GAAW,EAC1BnS,QAAQ,WACRkG,KAAK,QAAO,2BAOpB,QACE,OAAO,KAEb,CAGoBkO,MAGtB,CCpVA,IAAMnU,GAAQ,CACZlC,SAAU,WACVqK,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX8C,QAAS,mBACTiJ,UAAW,GACX9L,EAAG,EACH/H,aAAc,QAUH8T,GAA4C,SAAH,GAK/C,IAJL5L,EAAI,EAAJA,KACAC,EAAO,EAAPA,QACApE,EAAQ,EAARA,SACAgQ,EAAG,EAAHA,IAaA,OACE,SAACrJ,EAAA,EAAK,CACJxC,KAAMA,EACNC,QAASA,EACT,kBAAgB,oBAChB,mBAAiB,0BAAyB,UAE1C,UAAC,IAAG,CAAC1H,GAAIhB,GAAM,WACb,SAACgE,EAAA,EAAU,CAAC7C,QAASuH,EAAS1H,GAAI,CAAClD,SAAU,WAAYqK,IAAK,EAAGoM,MAAO,EAAG1P,MAAO,SAAS,UACzF,SAACsK,GAAA,EAAS,MApBS,WACzB,OAAQ7K,GACN,IAAK,aACL,IAAK,YACL,IAAK,YACH,OAAO,gBAAKvC,IAAKuS,EAAK5S,IAAK,SAAU1B,MAAO,CAAEiB,SAAU,OAAQuT,UAAW,UAE7E,QACE,OAAO,KAEb,CAYOC,OAIT,E,YC3CO,SAASC,GAAuB,GAI3B,IAHVjI,EAAO,EAAPA,QACAE,EAAW,EAAXA,YACAL,EAAQ,EAARA,SAEMpD,GAAOhM,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAM/D,IAAI,IAChD,GAA8BjK,EAAAA,EAAAA,WAAS,GAAM,eAAtC4J,EAAO,KAAEC,EAAU,KACpB6L,GAAmBC,EAAAA,GAAAA,KACjBnD,GAAiBC,EAAAA,GAAAA,KAAjBD,aA+CR,OACE,UAAC,IAAG,YACF,SAAC,IAAG,CAACzR,MAAO,CAAEE,QAAS2I,EAAU,OAAS,SAAU,UAClD,SAAC,KAAa,CACZ8L,iBAAkBA,EAClBE,oBAnDgB,SAACjE,GACvB9H,GAAW,GACX,IAAIgM,EAAW,IAAIC,SACnBD,EAASE,OAAO,QAASpE,IACzBqE,EAAAA,EAAAA,IAAWH,GACR9B,MAAK,SAACrJ,GACL,IAAIuL,EAAa,GACN,OAAPzI,QAAO,IAAPA,GAAAA,EAAShC,eACXyK,EAAoB,OAAPzI,QAAO,IAAPA,OAAO,EAAPA,EAAShC,cAGxBd,EAAOtL,KAAK8W,QAAQrP,IAAG,yCAAC,WAAO2H,GAAS,4EAChCpP,EAAO,CACXD,UAAW8K,EAAK9K,UAChBG,SAAU2K,EAAK3K,SACf2L,cAAehB,EAAKgB,cACpBH,SAAUuC,EAASpG,KACnBgP,WAAYA,EACZnN,UAAW0F,EAAK1F,UAChBqN,UAAW3H,EAAK2H,UAChBC,SAAU5H,EAAK6H,SACfC,UAAW9H,EAAK8H,UAChBzT,SAAU2L,EAAK3L,SACfwM,gBAAiBb,EAAKa,gBACtBhK,SAAUmJ,EAAKnJ,SACfC,aAAckJ,EAAK+H,aACnBC,SAAUhI,EAAKgI,SACfxP,KAAMwH,EAAKxH,KACXyP,SAAc,OAAJjI,QAAI,IAAJA,OAAI,EAAJA,EAAMiI,SAChBzN,UAAWwF,EAAKxF,UAChB0N,OAAQlI,EAAKkI,OACbC,SAAU,GACVC,aAAcpI,EAAKzF,IACnB8N,WAAW,GAEbrY,EAAAA,GAAAA,uBAA4BkP,EAAatO,GAAM,2CAChD,mDAzBsB,GA0BzB,IACCiV,OAAM,SAACC,GACN3J,QAAQC,IAAI0J,GACZ9B,EAAa,QAAS,8CACxB,IACF3I,GAAW,EAEb,MAUKD,IAAW,SAACqC,EAAA,EAAgB,CAACrG,MAAO,YAAaoB,KAAM,WAG9D,CCFA,IAAM8P,GAAiB,OAAShZ,EAAAA,GAoBzB,SAASiZ,KAAc,IAAD,YACrB5I,GAAWlQ,EAAAA,EAAAA,IAAc,SAACiM,GAAK,OAAKA,EAAMkE,eAAe,IACzDnE,GAAOhM,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAM/D,IAAI,IAC1C/L,GAAgBD,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAM9P,aAAa,IAC5D6P,GAA2B9P,EAAAA,EAAAA,IAC/B,SAAC+P,GAAK,OAAKA,EAAMD,wBAAwB,IAErCiJ,GAA8B/Y,EAAAA,EAAAA,IAClC,SAAC+P,GAAK,OAAKA,EAAMgJ,2BAA2B,IAExCrI,GAAgB1Q,EAAAA,EAAAA,IAAc,SAAC+P,GAAK,OAAKA,EAAMW,aAAa,IAC5DD,GAA2BzQ,EAAAA,EAAAA,IAC/B,SAAC+P,GAAK,OAAKA,EAAMU,wBAAwB,IAEnCL,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BrO,EAAAA,EAAAA,YAAoB,eAA3CwN,EAAO,KAAEyJ,EAAU,KAC1B,GAAkCjX,EAAAA,EAAAA,UAAS,IAAG,eAAvCkX,GAAS,KAAEC,GAAY,KAE9B,IAAoDnX,EAAAA,EAAAA,WAAS,GAAK,iBAA3DoX,GAAkB,MAAEC,GAAqB,MAChD,IAAsCrX,EAAAA,EAAAA,WAAS,GAAM,iBAA9CuN,GAAY,MAAE+J,GAAa,MAClC,GAA0CnX,EAAAA,UAAe,GAAM,iBAAxD2N,GAAa,MAAEyJ,GAAgB,MACtC,GAAkCpX,EAAAA,UAAe,GAAM,iBAAhDqX,GAAS,MAAEC,GAAY,MAC9B,GAAoDtX,EAAAA,WAAiC,iBAA9EuX,GAAkB,MAAEC,GAAqB,MAG1CC,GAAoC,SAACC,GAA8B,OACvEb,EAA4Ba,EAAe,EAM7C,IAAsC7X,EAAAA,EAAAA,UAAS,IAAG,iBAA3C0N,GAAW,MAAEoK,GAAc,MAC5BrK,IAAoB7N,EAAAA,EAAAA,UAAQ,WAChC,OAAO1B,EAAcsT,MAAK,SAAChD,GAAI,OAAKA,EAAKlQ,MAAQoP,EAAW,GAC9D,GAAG,CAACxP,EAAewP,KAEbqK,GAAqB5J,EAAS/P,QAAO,SAACoQ,GAC1C,GAAIA,EAAKH,UAAYX,GACnB,OAAIc,EAAKpP,KAAKyE,UACR2K,EAAKpP,KAAK0O,eACLU,EAKFA,CAGb,IAEA,IAAoDxO,EAAAA,EAAAA,WAAS,GAAM,iBAEnE,IAFyB,MAAuB,OAEhBA,EAAAA,EAAAA,UAM7B,CACD1B,IAAK,GACL2I,KAAM,GACNmJ,gBAAiB,GACjB6D,eAAgB,GAChBC,UAAW,MACX,iBAZK7G,GAAQ,MAAE2K,GAAW,MAc5B,IAAoDhY,EAAAA,EAAAA,UAGjD,CAAEwJ,MAAM,EAAO5K,QAAS,OAAO,iBAH3BqZ,GAAkB,MAAEC,GAAqB,MAKhD,IAA8ClY,EAAAA,EAAAA,UAG3C,CAAEwJ,MAAM,EAAO5K,QAAS,OAAO,iBAH3BuZ,GAAe,MAAEC,GAAkB,MAK1C,IAA8CpY,EAAAA,EAAAA,WAAS,GAAM,iBAAtDqY,GAAgB,MAAEC,GAAiB,MAE1C,IAAwDtY,EAAAA,EAAAA,UAIrD,CAAEuY,SAAU,GAAIvQ,YAAa,GAAIwB,MAAM,IAAQ,iBAJ3CgP,GAAoB,MAAEC,GAAuB,MAMpD,IAAkDzY,EAAAA,EAAAA,WAAS,GAAK,iBAAzD0Y,GAAiB,MAAEC,GAAoB,MACxCC,IAAmB3a,EAAAA,EAAAA,IAAc,SAACiM,GAAK,OAAKA,EAAM0O,gBAAgB,IAClEC,IAAsB5a,EAAAA,EAAAA,IAC1B,SAACiM,GAAK,OAAKA,EAAM2O,mBAAmB,IAEhCC,GAAmBF,KAAqBG,GAAAA,GAAAA,KAIxCjZ,IAAUC,EAAAA,EAAAA,MACVgN,IAAUiM,EAAAA,EAAAA,QAAO,MACjB7O,IAAQC,EAAAA,EAAAA,KACR6O,IAAaC,EAAAA,EAAAA,GAAc/O,GAAMgP,YAAYC,KAAK,OAClDC,IAASC,EAAAA,EAAAA,cACb,SAACC,GACCzM,GAASyM,EAAc,IAAI,EAC7B,GACA,CAAClM,KAEKmM,IAAiBC,EAAAA,EAAAA,IAAY,CACnCJ,OAAAA,GACAK,SAAS,EACTC,SAAU,IAHJH,aAKF7L,GAAgB,WACpB,IAAMiM,EAAmBzL,EAAS/P,QAChC,SAACoQ,GAAqB,OAAKA,EAAKH,UAAYX,EAAW,IAGzD,IAAIiB,EAAJ,CAGE,IAAMkL,EAAgBD,EAAiB,GAAG5U,GAC1CxG,EAAAA,GAAAA,oBAAyBkP,GAAaoM,OAAOD,GAAgB,GAC/D,CACF,GAEAvW,EAAAA,EAAAA,YAAU,WACJ+K,IACF0L,GAAa1L,GACbgJ,IAAsB,GAE1B,GAAG,CAAChJ,KAEJ/K,EAAAA,EAAAA,YAAU,YACR0W,EAAAA,EAAAA,IAAiB/P,EAAKgB,eAAe8I,MAAK,SAACrJ,GACzCuM,EAAWvM,EAAOtL,KAAKsL,OACzB,GACF,GAAG,IAEH,IAAM3L,GAAuB,SAC3BoS,GAEI,IADJvS,EAAwB,uDAAG,KAE3BsZ,GAAsB,CAAE1O,KAAM2H,EAAOvS,QAAAA,GACvC,EACMgP,GAAmB,SACvBuD,GAEI,IADJvS,EAAwB,uDAAG,KAE3BwZ,GAAmB,CAAE5O,KAAM2H,EAAOvS,QAAAA,GACpC,EAEMqb,GAAa,SAAC3b,GAClBwB,GAAQyE,KAAK,SAAWjG,EAAIoB,MAAM,KAAK,IACvCqa,GAAazb,EACf,EACMyb,GAAe,SAACzb,GACpBwZ,GAAexZ,GACf,IAAM4b,EAAkBhc,EAAcE,QAAO,SAACqS,GAAC,OAAKA,EAAEnS,MAAQA,CAAG,IAAE,GACnE0Z,GAAYkC,GACZjc,EAAAA,EAAAA,WAAyBkc,qBAAqB7b,GAC9CL,EAAAA,EAAAA,WAAyBmc,4BAA4B9b,GAErD,IAAMsb,EAAmBzL,EAAS/P,QAChC,SAACoQ,GAAqB,OAAKA,EAAKH,UAAY/P,CAAG,IAIjD,GAFAqa,IAAqB,IAGlBhK,GACDiL,EAAiBrb,QAAU,IAC3Bqb,EAAiBrb,OAAS,EAC1B,CACA,IAAMsb,EAAgBD,EAAiB,GAAG5U,GAC1CxG,EAAAA,GAAAA,oBAAyBF,EAAKwb,OAAOD,GAAgB,GACvD,CACF,EAEMQ,GAAsB,SAAChM,GAC3B,IAAMiM,EAAiBnM,EACpB/P,QAAO,SAACoQ,GAAqB,OAAKA,EAAKH,UAAYA,CAAO,IAC1DkM,OAAO,GACV,OAAI5L,GAAiB2L,EAAe/b,QAAU,EACrC,aAGL+b,EAAe/b,OAAS,EACnB+b,EAAe,GAAG7U,KAEpB,iBACT,EAEM+U,GAAoB,SAACnM,GACzB,IAAMiM,EAAiBnM,EACpB/P,QAAO,SAACoQ,GAAqB,OAAKA,EAAKH,UAAYA,CAAO,IAC1DkM,OAAO,GACV,OAAID,EAAe/b,QAAU,EACpB,IAGF0H,EAAAA,EAAAA,GAAO,IAAIF,KAAKuU,EAAe,GAAGtU,MAAO,OAClD,EAEM6E,GAAc,SAAC/D,GACnB,GAAIoQ,GAAUrI,OAAOtQ,OAAS,EAAG,CAC/B,IAAI0X,EAAa,GACN,OAAPzI,QAAO,IAAPA,GAAAA,EAAShC,eACXyK,EAAoB,OAAPzI,QAAO,IAAPA,OAAO,EAAPA,EAAShC,cAExB,IAAMsD,EAAuBC,EAAAA,SAAmBmI,IAC1ClI,GAAkBC,EAAAA,GAAAA,IAAUH,GAElC,GAAIE,EAAgBH,OAAOtQ,OAAS,EAClC,GAAGiZ,GAAU,CACX,IAAMpY,EAAO,CACXC,gBAAiB4K,EAAK9K,UACtBI,eAAgB0K,EAAK3K,SACrBkF,oBAAqByF,EAAKgB,cAC1BG,iBAAiB,EACjBC,YAAa,EACbC,kBAAmBoM,GAAmBtY,KAAKkM,kBAC3CC,QAAS8B,GAASpG,KAClBxC,SAAUwR,EACVpY,QAASwQ,EACTxK,SAAS,EACTR,gBAAiB,GACjBoI,cAAe,GACf9J,oBAAqB,GACrB4C,MAAM,GAERoG,QAAQC,IAAIxL,GACZZ,EAAAA,GAAAA,yBACEkQ,EACAM,EACA0I,GAAmB1S,GAAGnF,WACtBT,GAEFqY,IAAa,EACf,MACEjZ,EAAAA,GAAAA,YACEkP,GACAzD,EAAK9K,UACL8K,EAAK3K,SACL2W,EACAhM,EAAKgB,cACa,kBAAXnE,EAAsBA,EAAOqK,MAAQnC,EAC1B,kBAAXlI,EAAsBA,EAAO2T,kBAAoB,KAIhE,CACF,EAEM3N,GAAW,SAAC4N,EAAY7W,GAC5B4U,GAAwB,CACtBF,SAAU,kCACVvQ,YAAa,GACbwB,MAAM,IAGR,IAAMqM,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAAS2E,IAEzB1E,EAAAA,EAAAA,IAAWH,GACR9B,MAAK,SAACrJ,GACL,IAAIuL,EAAa,GACN,OAAPzI,QAAO,IAAPA,GAAAA,EAAShC,eACXyK,EAAoB,OAAPzI,QAAO,IAAPA,OAAO,EAAPA,EAAShC,cAGxBd,EAAOtL,KAAK8W,QAAQrP,IAAG,yCAAC,WAAO2H,GAAS,8EAClCpP,EAAO,CACTD,UAAW8K,EAAK9K,UAChBG,SAAU2K,EAAK3K,SACf2L,cAAehB,EAAKgB,cACpBH,SAAUuC,GAASpG,KACnBgP,WAAYA,EACZnN,UAAW0F,EAAK1F,UAChBqN,UAAW3H,EAAK2H,UAChBC,SAAU5H,EAAK6H,SACfC,UAAW9H,EAAK8H,UAChBzT,SAAU2L,EAAK3L,SACfwM,gBAAiBb,EAAKa,gBACtBhK,SAAUmJ,EAAKnJ,SACfC,aAAckJ,EAAK+H,aACnBC,SAAUhI,EAAKgI,SACfxP,KAAMwH,EAAKxH,KACXyP,SAAc,OAAJjI,QAAI,IAAJA,OAAI,EAAJA,EAAMiI,SAChBzN,UAAWwF,EAAKxF,UAChB0N,OAAQlI,EAAKkI,OACbC,SAAU,GACVC,aAAcpI,EAAKzF,IACnB8N,WAAW,GAGP8D,EAA0B,CAC9B9W,QAASA,EACTR,gBAAiB0K,EAAyBtI,KAC1CgG,cAAesC,EAAyB/I,GACxCrD,oBACEoM,EAAyB3O,KAAKC,gBAC9B,IACA0O,EAAyB3O,KAAKG,eAChC2P,qBAAsBnB,EAAyB/H,KAC/CmJ,oBAAqBpB,EAAyB3O,KAAKkG,aACnD1D,yBAA0BmM,EAAyB3O,KAAKyD,SACxDuM,wBACErB,EAAyB3O,KAAKiQ,gBAChCxN,oBAAqBkM,EAAyB3O,KAAKiG,SACnD3C,wBAAyBqL,EAAyB3O,KAAKkG,aACvDgK,gBAAiB,MACjBC,oBAAqB,KACrBC,oBAAqB,MACrBC,wBAAyB,MACzBC,qBAAsB,MACtBC,iBAAkB,MAClBC,yBAA0B,MAC1BC,2BAA4B,MAC5BC,mBAAoB/B,EAAyBM,QAC7CP,cAAeA,IAGjB1O,GAAI,kBAAQA,GAASub,GACrBnc,EAAAA,GAAAA,uBAA4BkP,GAAatO,GACzCqZ,GAAwB,CACtBjP,MAAM,EACNxB,YAAa,GACbuQ,SAAU,KACT,2CACJ,mDA3DsB,GA4DzB,IACClE,OAAM,SAACC,GACN3J,QAAQC,IAAI0J,GACZmE,GAAwB,CACtBF,SAAU,QACVvQ,YAAa,6CACbwB,MAAM,GAEV,IACEuD,GAAQE,UACVF,GAAQE,QAAQkE,MAAQ,GAE5B,GAsBA7N,EAAAA,EAAAA,YAAU,WACR,IAAMsX,EAAYlc,YAAW,WAC3BF,EAAAA,GAAAA,gBAAqByL,EAAKgB,cAAeoC,GAAS/O,IACpD,GAAG,KACH,OAAO,kBAAMuc,aAAaD,EAAW,CACvC,GAAG,CAAC1D,MAEJ5T,EAAAA,EAAAA,YAAU,WACR,IAAMsW,EAAmBzL,EAAS/P,QAChC,SAACoQ,GAAqB,OAAKA,EAAKH,UAAYX,EAAW,IAErDgB,IAECL,GACW,SAAZA,GACY,KAAZA,GACAK,EAAyBhP,MAAM,KAAK,KAAO2O,IAEvCK,EAAyBhP,MAAM,KAAK,GACtCua,GAAWvL,GAEXuL,GAAWvL,EAA2B5Q,EAAAA,MAM1C4Q,EAAyBhP,MAAM,KAAK,KAAO2O,GAC/B,SAAZA,GACY,KAAZA,IAEApQ,EAAAA,EAAAA,WAAyBmc,4BAA4B/L,GACrD4L,GAAW5L,IAGbyM,OAAOC,OAAS,WACd9c,EAAAA,EAAAA,WAAyBmc,4BAA4B,GACvD,EAEAU,OAAOE,QAAU,WACXtN,KACFzP,EAAAA,EAAAA,WAAyBmc,4BAA4B1M,IACrDzP,EAAAA,EAAAA,WAAyBkc,qBAAqBzM,IAElD,EACGkM,EAAiBrb,QAAQ,GAAKma,IAE/Bla,EAAAA,GAAAA,qBACEkP,GACA,GAGN,GAAG,CAACA,MAEJpK,EAAAA,EAAAA,YAAU,WACR,IAAMsW,EAAmBzL,EAAS/P,QAChC,SAACoQ,GAAqB,OAAKA,EAAKH,UAAYX,EAAW,IAEzD,IACGiB,GACDiL,EAAiBrb,OAAS,GAC1Bqb,EAAiBrb,QAAU,IAC3BmP,IACAgL,GACA,CACA,IAAMuC,EAAwBrB,EAAiB,GAG7CA,EAAiBrb,QAAU,IAC3Bqb,EAAiBrb,OAAS,IAC1B0c,EAAsB7b,KAAKgM,iBAE3BuN,IAAqB,GACrBna,EAAAA,GAAAA,oBACEkP,GACAoM,OAAOmB,EAAsBjW,IAC7B,IAEmC,IAA5B4U,EAAiBrb,SAC1Boa,IAAqB,GACrBna,EAAAA,GAAAA,oBACEkP,GACAoM,OAAOmB,EAAsBjW,IAC7B,IAGN,CACF,GAAG,CAACmJ,IAEJ,IApdA+M,GACA9c,GA4dM+c,GAAkB,SAAChK,EAAevS,GACtC6Y,GAAatG,GA7akB,SAACvS,GAA4B+Y,GAAsB/Y,EAAS,CA8a3Fwc,CAAyBxc,EAC3B,EASA,OACE,UAAC,IAAG,CAACmC,MAAO,CAAEsa,aAAc,OAAQjZ,OAAQ,QAAS,WACnD,UAAC,KAAa,CAACkZ,YAAU,aACvB,UAAC,KAAO,CAACzc,SAAS,OAAO0c,YAAY,EAAM,WACzC,SAAC,KAAM,CAAC5O,YAAY,eACpB,SAAC,KAAgB,CAAC/C,QAAS+E,EAAc,UA9ejDuM,GA+e2Bhd,EA9e3BE,GA8e0Cwa,GA5etCxa,KAAW2a,GAAAA,GAAAA,UAA0B3a,KAAW2a,GAAAA,GAAAA,UAC3CmC,GAAM9c,QACX,SAACoQ,GAAI,OACHA,EAAKgN,QAAUzC,GAAAA,GAAAA,UACfvK,EAAKgN,QAAUzC,GAAAA,GAAAA,SAAuB,IAIrCmC,GAAM9c,QACX,SAACoQ,GAAI,OACHA,EAAKgN,QAAUzC,GAAAA,GAAAA,UACfvK,EAAKgN,QAAUzC,GAAAA,GAAAA,SAAuB,KAiekBlS,KAAI,SAACW,GAAI,OACzD,SAAC,KAAY,CACXiU,OAAQjU,EAAKlJ,MAAQoP,GAErBgO,UAAWlU,EAAK2M,eAChBjS,QAAS,WACP+X,GAAWzS,EAAKlJ,KAChBgZ,IAAc,EAChB,EACArQ,KAAMO,EAAKP,KACX0U,KAAMtB,GAAoB7S,EAAKlJ,KAC/Bsd,iBAAkBpB,GAAkBhT,EAAKlJ,KAAK,UAE9C,SAAC,KAAM,CACLwE,IAC0B,SAAxB0E,EAAKyM,eACDzM,EAAKyM,eACL,+BAAiCzM,EAAKP,QAdzCO,EAAKlJ,IAiBG,UAKrB,mCACMkb,MAAc,IAClBzY,MAAO,CACLgC,MAAO,OACPX,OAAQ,OACRpB,cAAe,MACfC,QAAS,QACT,WAEF,UAAC,KAAa,aACToM,KACD,UAAC,KAAkB,CACjBtM,MAAO,CACLqB,OAAQ,QACR,WAEF,SAAC,UAAuB,IACvB2V,GAAmBxZ,OAAS,IAC3B,SAAC,aAA0B,CACzB0R,SAAU5C,GAASpG,KACnB/E,QAxEY,WAC5BpC,GAAQyE,KAAK,gBAAkBmK,EACjC,EAuEkBiN,KACExN,EAAS/P,QACP,SAACoQ,GAAqB,OAAKA,EAAKH,UAAYX,EAAW,IACvDnP,OAAS,GACX,WACE2H,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,GACE,IAAIJ,KAAKgS,GAAmBwC,OAAO,GAAG,GAAGvU,MACzC,GAEF,IAAID,KACJ,CAAEK,WAAW,OAKvB,UAAC,aAA0B,YACzB,SAACqP,GAAsB,CACrBjI,QAASA,EACTE,YAAaA,GACbL,SAAUA,MAEZ,SAACtI,EAAA,EAAU,CACThD,GAAI,CAAE6D,MAAO,SACb1D,QAAS,kBAAMoW,IAAkB,EAAK,EAAC,UAEvC,SAACuD,GAAA,EAAU,aAKnB,UAAC,KAAW,CACV9a,MAAO,CACLoP,gBAAkC,OAAjB1C,SAAiB,IAAjBA,IAAAA,GAAmB2C,gBAAe,cACxC3C,GAAkB2C,gBAAe,KACxC,QACJC,iBAAkB,YAClBC,eAAgB,aAElBwL,YAAanN,EACbhB,cAAeA,GACf4C,6BAA6B,EAC7BC,kBACyD,QAAtD,EAACtS,EAAcE,QAAO,SAACqS,GAAC,OAAKA,EAAEnS,MAAQoP,EAAW,IAAE,UAAE,QAArD,EACEgD,aACF,SAAC,KAAe,CACd3P,MAAO,CAAE4P,QAAS,MAClBC,QACuD,QADhD,EACL1S,EAAcE,QAAO,SAACqS,GAAC,OAAKA,EAAEnS,MAAQoP,EAAW,IAAE,UAAE,aAArD,EACIgD,YAIX,UAEAqH,GAAmBlR,KAAI,SAACjI,EAASmI,EAAO8J,GAAS,IAAD,IACzChS,GAAWiS,EAAAA,GAAAA,IAAYD,EAAKjS,EAASmI,GAC3C,MAAwC,UAAjCnI,EAAQQ,KAAKgM,iBAClB,SAACzM,EAAO,CACNM,cAAe,kBAtHJ,SAACL,GAC5B0Y,IAAc,GACdM,GAAkChZ,EACpC,CAmHuCmd,CAAqBnd,EAAQ,EAElD8E,GAAI,UACJ7E,SAAUA,EACVD,QAASA,EACTE,qBAAsB+L,GACtB9L,qBAAsBA,GACtBC,oBAAqB4O,IANhBhP,EAAQoG,KASf,SAACkC,EAAa,CAEZxD,GAAI,UACJ9E,QAASA,EACTuI,QAAoB,QAAb,EAAE3I,EAAAA,GAAAA,cAAW,OAAK,QAAL,EAAX,EAAaF,WAAG,WAAL,EAAX,EAAkBuB,YAHtBjB,EAAQoG,GAMnB,IACC+S,GAAmBxZ,QAAU,IAC3BmP,IACAA,KAAgBoJ,KACf,SAAC,aAAmB,CAClB/V,MAAO,CACLE,QAAS,OACTD,cAAe,SACf6D,eAAgB,SAChBzC,OAAQ,OACRjB,UAAW,SACX0E,SAAU,SACV,SAEA8I,EAOA,cANA,0BACIjB,IAAeA,KAAgBoJ,GAE7B,KADA,iEAQZnI,GACAjB,IACAA,KAAgBoJ,IAChBiB,GAAmBxZ,QAAU,IAC3B,SAAC,aAAmB,CAClBwC,MAAO,CACLE,QAAS,OACTD,cAAe,SACf6D,eAAgB,SAChBzC,OAAQ,OACRjB,UAAW,SACX0E,SAAU,SACV,wCAMC,OAARwH,SAAQ,IAARA,KAAAA,GAAUpG,QACX,iBAAKvD,GAAI,eAAe,UAErB8T,KAAW,SAACpW,EAAA,EAAO,KACpB,SAAC4a,EAAA,EAAK,CACN7X,UAAU,KACV8X,GAAIzE,GACJ0E,cAAY,EACZC,eAAa,YAEX,UAACC,EAAA,EAAK,CAACnb,QAAS,OAAQmB,OAAQ,OAAQW,MAAO,OAAQoB,UAAW,MAAM,WACtE,gBAAKpD,MAAO,CACVE,QAAQ,OACRob,KAAK,OACLxX,eAAe,SACfC,WAAW,UACX,UACA,SAAC+P,GAAA,EAAQ,CAACjP,MAAM,YAElB,iBAAK7E,MAAO,CACVE,QAAQ,OACRob,KAAK,OACLrb,cAAc,UACd,WACF,SAACyF,EAAA,EAAU,CACXb,MAAO,UACPmC,WAAY,OAAO,2BAInB,SAACtB,EAAA,EAAU,UACU,OAAlBiR,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBjS,WAGvB,gBAAK1E,MAAO,CACVE,QAAQ,OACRob,KAAK,OACLxX,eAAe,SACfC,WAAW,UACX,UACA,SAACC,EAAA,EAAU,CACX7C,QAAS,kBAAIiZ,IAAgB,OAAMlW,EAAU,EAC7C,aAAW,QAAO,UAChB,SAACiL,GAAA,EAAS,cAMlB,SAAC,KAAY,CACXxD,QAtVI,SAAC5I,GACnB,IAAI0K,EAAO4C,MAAMC,KAAKvN,EAAMwN,cAAcC,OAAOC,MAAK,SAACC,GAAM,MAC3D,WAAWC,KAAKD,EAAExO,KAAK,IAEzB,GAAIuL,EAAM,CAER,IAAImD,EAAOnD,EAAKoD,YAChB9E,GAAS6E,GAAM,EACjB,CACF,EA8UgBhF,YAAY,oBACZC,SAjWG,SAACuE,GAClBgG,GAAahG,GACb3S,EAAAA,GAAAA,YACEyL,EAAKgB,cACLoC,GAAS/O,IACT2L,EAAK9K,UAAY,IAAM8K,EAAK3K,SAEhC,EA2VgBuN,OAAQhC,GACRmC,cAAe,kBAAMD,GAAQE,QAAQC,OAAO,KAE9C,kBACEjK,KAAK,OACLgE,KAAK,OACLjC,GAAG,OACH4H,SAAU,SAAC9I,GAAK,OAAKgJ,GAAShJ,EAAMnB,OAAOwK,MAAM,IAAI,EAAM,EAC3DC,IAAKL,GACLhM,MAAO,CAAEE,QAAS,gBAKzBsM,KACC,SAAC,GAAe,CACd0M,WAAYA,GACZxM,kBAAmBA,GACnBC,YAAaA,GACbJ,oBAjrBgB,SAAC6D,GAAc,OAAKmG,GAAcnG,EAAO,EAkrBzDtD,oBA/qBgB,SAAC/J,GAA0C,OACrEyT,GAAiBzT,EAAMnB,OAAOsO,QAAS,EA+qB7B1D,aAAcA,GACdI,cAAeA,GACfH,QAASA,EACTH,SAAUA,GACVP,SAAUA,GACVgB,cAAeA,GACfF,iBAAkBA,GAClB7O,qBAAsBA,aAM9B,SAACgT,GAAkB,CACjBvI,KAAMyO,GAAmBzO,KACzBC,QAAS,kBAAM1K,IAAqB,EAAM,EAC1C6K,SAAS,EACToI,mBAAoBiI,GACpBrb,QAASqZ,GAAmBrZ,QAC5BK,cAzRoB,WACxBqY,IAAc,GACdM,GAAkCK,GAAmBrZ,QACvD,EAuRMqT,YAAakJ,MAEf,SAAC/F,GAAc,CACb5L,KAAM2O,GAAgB3O,KACtBC,QAAS,kBAAMmE,IAAiB,EAAM,EACtCvI,SAAiC,QAAzB,EAAE8S,GAAgBvZ,eAAO,OAAM,QAAN,EAAvB,EAAyBQ,YAAI,WAAN,EAAvB,EAA+BiG,SACzCgQ,IAA4B,QAAzB,EAAE8C,GAAgBvZ,eAAO,OAAM,QAAN,EAAvB,EAAyBQ,YAAI,WAAN,EAAvB,EAA+ByD,YAGtC,UAAC0R,EAAA,EAAM,CACL0E,WAAYA,GACZzP,KAAMgP,GAAqBhP,KAC3BC,QAAS,kBACPgP,GAAwB,CACtBjP,MAAM,EACNxB,YAAa,GACbuQ,SAAU,IACV,EAEJ,kBAAgB,0BAAyB,WAEzC,SAAC+D,EAAA,EAAW,CAACtX,GAAG,0BAAyB,SACtCwT,GAAqBD,YAExB,SAAC/D,EAAA,EAAa,UACTgE,GAAqBxQ,aACtB,SAACuU,EAAA,EAAiB,UACf/D,GAAqBxQ,eAGxB,SAAC,IAAG,CAACjG,GAAI,CAAEd,QAAS,OAAQ4D,eAAgB,UAAW,UACrD,SAACoH,EAAA,EAAgB,SAIvB,SAACuQ,EAAA,EAAa,WACZ,SAAC3b,EAAA,EAAM,CACLqB,QAAS,kBACPuW,GAAwB,CACtBjP,MAAM,EACNxB,YAAa,GACbuQ,SAAU,IACV,EAEJkE,WAAS,2BAMf,SAACC,GAAA,EAAO,CACNlT,KAAM6O,GACNsE,MAAMC,EAAAA,GAAAA,IAAiB,CAAEC,YAA8B,OAAjBpP,SAAiB,IAAjBA,QAAiB,EAAjBA,GAAmBnP,MACzDmL,QAzrBe,WACnB6O,IAAkB,EACpB,EAwrBMpV,MAAO,oBAET,SAACqG,GAAc,CACbC,KAAM4N,IAAsB0B,GAC5BrR,OAAQiG,GAAYhO,MAAM,KAAK,GAC/B+J,QAAS,WACP4N,IAAsB,GAEtByB,IAAoBD,GAAoB,GAC1C,MAIR,CCl4Be,SAASiE,KACtB,OACE,SAACC,EAAA,EAAS,CAAC/a,SAAS,KAAKjB,MAAO,CAAEqB,OAAQ,sBAAuB,UAC/D,SAAC2U,GAAU,KAGjB,C,wKCIa2F,EAA8B,SAAH,GAAwC,IAAlCxZ,EAAK,EAALA,MAAOsG,EAAI,EAAJA,KAAMmT,EAAI,EAAJA,KAAMlT,EAAO,EAAPA,QAC/D,OACE,UAAC,IAAM,CAACzH,UAAU,EAAOwH,KAAMA,EAAMC,QAASA,EAAQ,YACjDvG,IACD,SAAC,IAAW,CAACnB,GAAI,CAAE4F,QAAS,SAAUqV,WAAY,QAAS,SACxD9Z,KAGL,UAAC,IAAG,CAACnB,GAAI,CAAE4F,QAAS,QAAS,WAC3B,SAAC,IAAM,CACLX,KAAM,IACNjG,MAAO,CAAEqB,OAAQ,OAAQJ,SAAU,OAAQe,MAAO,QAClDoO,MAAOwL,EACPM,QAAO,iBAET,UAAC,IAAG,CACFlb,GAAI,CACFoT,UAAW,qCACX7T,aAAc,OACdL,QAAS,OACT4D,eAAgB,gBAChBC,WAAY,SACZoY,GAAI,OACJC,GAAI,QACJ,WAEF,2BAAOC,EAAAA,EAAAA,IAAeT,EAAM,OAC5B,SAAC,IAAM,CACL7b,QAAQ,YACRiB,GAAI,CAAET,aAAc,OAAQkF,WAAY,OACxCtE,QAAS,kBAAMmb,UAAUC,UAAUC,UAAUZ,EAAK,EAAC,sBAKvD,SAAC,IAAU,CACTza,QAASuH,EACT1H,GAAI,CACF6D,MAAO,QACP/G,SAAU,WACVqK,IAAK,GACLoM,MAAO,GACPzP,SAAU,QACV,UAEF,SAAC,IAAS,CAACA,SAAS,mBAK9B,C","sources":["helpers/chat/createPrivateChat.ts","components/Chat/Messages/Message.tsx","components/Chat/Messages/SystemMessage.tsx","components/MetaNavigation/CompassItem.tsx","components/MetaNavigation/MetaHeader.tsx","components/MetaNavigation/MetaNavigation.tsx","components/Chat/Threads/CustomMessageInput.tsx","components/Chat/Threads/ThreadContainer.tsx","components/Chat/ChatTransferDialog.tsx","components/Chat/ChatMediaModal.tsx","components/Chat/ChatAudioRecorder.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx","pages/Profile/QrModal.tsx"],"sourcesContent":["import xmpp from \"../../xmpp\";\nimport {useStoreState} from \"../../store\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\n\nexport const underscoreManipulation = (str:string) => {\n    if(str){\n        return str.replace(/([A-Z])/g, '_$1').toLowerCase()\n    }else{\n        return 'invalid string passed'\n    }\n};\n\nexport const createPrivateChat = async (\n    myWalletAddress: string,\n    otherUserWalletAddress: string,\n    myFirstName: string,\n    otherFirstName: string,\n    userJID?: string\n) => {\n    const combinedWalletAddress = [myWalletAddress, otherUserWalletAddress]\n        .sort()\n        .join('.');\n\n    const roomJid = combinedWalletAddress.toLowerCase() + CONFERENCEDOMAIN;\n    const combinedUsersName = [myFirstName, otherFirstName].sort().join(' and ');\n\n    const currentChatRooms = useStoreState.getState().userChatRooms;\n\n    let isNewRoom = false;\n    if(currentChatRooms.filter((el) => el.jid === roomJid).length === 0){\n        isNewRoom = true;\n        xmpp.createNewRoom(combinedWalletAddress.toLowerCase());\n        xmpp.setOwner(combinedWalletAddress.toLowerCase());\n        xmpp.roomConfig(\n            combinedWalletAddress.toLowerCase(),\n            {roomName: combinedUsersName},\n        );\n        xmpp.subsribe(roomJid);\n        xmpp.presenceInRoom(roomJid);\n\n        setTimeout(() => {\n            xmpp.sendInvite(\n                underscoreManipulation(myWalletAddress),\n                roomJid.toLowerCase(),\n                underscoreManipulation(otherUserWalletAddress),\n            );\n        }, 1000);\n    }\n\n    return {roomJid, roomName: combinedUsersName, isNewRoom};\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Message as KitMessage,\n  MessageModel,\n  MessageSeparator,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport { TMessageHistory } from \"../../../store\";\nimport { useHistory } from \"react-router\";\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  Button,\n  IconButton,\n  Typography,\n  Divider,\n} from \"@mui/material\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport coin from \"../../../assets/images/coin.png\";\nimport { Box } from \"@mui/system\";\nimport {\n  audioMimetypes,\n  imageMimetypes,\n  videoMimetypes,\n} from \"../../../constants\";\nimport xmpp from \"../../../xmpp\";\nimport { IButtons } from \"../../../pages/ChatInRoom/Chat\";\n\nconst avatarPreviewUrl = \"https://icotar.com/initials/\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  position: {\n    type: string;\n    position: MessageModel[\"position\"];\n    separator?: string;\n  };\n  is?: string;\n  onMessageButtonClick: (button: IButtons) => void;\n  toggleTransferDialog: (value: boolean, message: TMessageHistory) => void;\n  onMediaMessageClick: (value: boolean, message: TMessageHistory) => void;\n\n  onThreadClick?: () => void;\n  isThread?: boolean;\n}\n\ntype IDirection = \"outgoing\" | \"incoming\";\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  position,\n  onMessageButtonClick,\n  toggleTransferDialog,\n  onMediaMessageClick,\n  onThreadClick,\n  isThread,\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID.split('/')[0];\n  const userJid = useMemo(() => xmpp.client?.jid?.toString().split('/')[0], []);\n  const isSameUser = userJid === messageJid;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const openMenu = Boolean(anchorEl);\n\n  const [messageDirection, setMessageDirection] =\n    useState<IDirection>(\"incoming\");\n\n  const openDialogMenu = () => {\n    setAnchorEl(null);\n    toggleTransferDialog(true, message);\n  };\n\n  const openThreadView = () => {\n    onThreadClick();\n  };\n\n  const fullViewImage = () => {\n    onMediaMessageClick(true, message);\n  };\n\n  const rightClick = (event: React.SyntheticEvent<HTMLElement>) => {\n    // if (messageDirection !== \"incoming\") {\n    //   return;\n    // \n    event.preventDefault();\n    openDialogMenu();\n  };\n\n  const ReplyComponent = () => {\n    return (\n      <Button\n        variant=\"text\"\n        style={{\n          flexDirection: \"row\",\n          display: \"flex\",\n          textTransform: \"none\",\n          textAlign: \"left\",\n        }}\n      >\n        <Divider\n          style={{\n            borderWidth: \"3px\",\n            borderRadius: \"5px\",\n            marginRight: \"5px\",\n          }}\n          variant=\"middle\"\n          orientation=\"vertical\"\n          flexItem\n        />\n\n        <div>\n          <strong style={{ cursor: \"pointer\" }}>\n            {message.data.mainMessageUserName\n              ? message.data.mainMessageUserName\n              : \"N/A\"}\n            <br />\n          </strong>\n          {message.data.mainMessageImageLocation &&\n          message.data.mainMessageMimeType.split(\"/\")[0] === \"image\" ? (\n            <Card sx={{ maxWidth: 200 }}>\n              <CardActionArea onClick={fullViewImage}>\n                <CardMedia\n                  style={{\n                    height: 150,\n                    objectFit: \"cover\",\n                    objectPosition: \"left\",\n                  }}\n                  component=\"img\"\n                  height=\"150\"\n                  image={message.data.mainMessageImageLocation}\n                  alt={message.data.mainMessageOriginalName}\n                />\n              </CardActionArea>\n            </Card>\n          ) : null}\n\n          {message.data.mainMessageImageLocation &&\n          message.data.mainMessageMimeType.split(\"/\")[0] === \"application\" ? (\n            <a target=\"_blank\" href={message.data.location}>\n              <KitMessage.ImageContent\n                src={message.data.mainMessageImageLocation}\n                alt={message.data.mainMessageOriginalName}\n                width={150}\n              />\n              {message.data.mainMessageMimeType.split(\"/\")[1]}\n            </a>\n          ) : null}\n\n          {message.data.mainMessageImageLocation &&\n          message.data.mainMessageMimeType.split(\"/\")[0] === \"video\" ? (\n            <video controls width=\"200px\">\n              <source\n                src={message.data.mainMessageImageLocation}\n                type={message.data.mainMessageMimeType}\n                title={message.data.mainMessageOriginalName}\n              />\n              Sorry, your browser doesn't support videos.\n            </video>\n          ) : null}\n\n          {message.data.mainMessageImageLocation &&\n          message.data.mainMessageMimeType.split(\"/\")[0] === \"audio\" ? (\n            <audio controls>\n              <source\n                src={message.data.mainMessageImageLocation}\n                type={message.data.mainMessageMimeType}\n              />\n              Your browser does not support the audio element.\n            </audio>\n          ) : null}\n\n          <span\n            dangerouslySetInnerHTML={{\n              __html: message.data.mainMessageText.replace(\n                /\\b(https?\\:\\/\\/\\S+)/gm,\n                '<a href=\"$1\">$1</a>'\n              ),\n            }}\n          ></span>\n        </div>\n      </Button>\n    );\n  };\n\n  useEffect(() => {\n    if (message.data.quickReplies) {\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n    setMessageDirection(isSameUser ? \"outgoing\" : \"incoming\");\n  }, []);\n\n  return (\n    <div is={\"Message\"}>\n      {!!position.separator && (\n        <MessageSeparator>{position.separator}</MessageSeparator>\n      )}\n      <KitMessage\n        onContextMenu={!message.data.isReply && !isThread && rightClick}\n        style={{\n          marginBottom:\n            position.type === \"last\" || position.type === \"single\" ? 15 : null,\n        }}\n        model={{\n          sender: firstName + \" \" + lastName,\n          direction: messageDirection,\n          position: position.position,\n        }}\n        avatarPosition={isSameUser ? \"tr\" : \"tl\"}\n        avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n      >\n        {(position.type === \"first\" || position.type === \"single\") && (\n          <img\n            style={{\n              borderRadius: \"50%\",\n              boxSizing: \"border-box\",\n              width: \"42px\",\n              height: \"42px\",\n              cursor: \"pointer\",\n            }}\n            onClick={() =>\n              history.push(\"/profile/\" + message.data.senderWalletAddress)\n            }\n            is={\"Avatar\"}\n            src={\n              message.data.photoURL\n                ? message.data.photoURL\n                : +firstName + \" \" + lastName\n            }\n            onError={({ currentTarget }) => {\n              currentTarget.onerror = null;\n              currentTarget.src = avatarPreviewUrl + firstName + \" \" + lastName;\n            }}\n            alt={firstName}\n          />\n        )}\n\n        <KitMessage.CustomContent>\n          {/* Main Message */}\n          {message.data.isReply && !isThread && <ReplyComponent />}\n          {(position.type === \"first\" || position.type === \"single\") && (\n            <span\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n              }}\n            >\n              <strong\n                style={{ cursor: \"pointer\" }}\n                onClick={() =>\n                  history.push(\"/profile/\" + message.data.senderWalletAddress)\n                }\n              >\n                {firstName} {lastName}\n                <br />\n              </strong>\n              {!isThread && !message.data.isReply && (\n                <IconButton\n                  aria-label=\"more\"\n                  id=\"long-button\"\n                  aria-controls={openMenu ? \"long-menu\" : undefined}\n                  aria-expanded={openMenu ? \"true\" : undefined}\n                  aria-haspopup=\"true\"\n                  onClick={openDialogMenu}\n                >\n                  <MoreVertIcon />\n                </IconButton>\n              )}\n            </span>\n          )}\n\n          {message.data.isMediafile &&\n            !!imageMimetypes[message.data.mimetype] && (\n              <Card sx={{ maxWidth: 200 }}>\n                <CardActionArea onClick={fullViewImage}>\n                  <CardMedia\n                    style={{\n                      height: 150,\n                      objectFit: \"cover\",\n                      objectPosition: \"left\",\n                    }}\n                    component=\"img\"\n                    height=\"150\"\n                    image={message.data.location}\n                    alt={message.data.originalName}\n                  />\n                </CardActionArea>\n              </Card>\n            )}\n\n          {message.data.isMediafile &&\n            !!videoMimetypes[message.data.mimetype] && (\n              <video controls width=\"200px\">\n                <source\n                  src={message.data.location}\n                  type={message.data.mimetype}\n                  title={message.data.originalName}\n                />\n                Sorry, your browser doesn't support videos.\n              </video>\n            )}\n\n          {message.data.isMediafile &&\n            !!audioMimetypes[message.data.mimetype] && (\n              <audio controls>\n                <source\n                  src={message.data.location}\n                  type={message.data.mimetype}\n                />\n                Your browser does not support the audio element.\n              </audio>\n            )}\n\n          {!message.data.isMediafile && (\n            <div>\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: message.body.replace(\n                    /\\b(https?\\:\\/\\/\\S+)/gm,\n                    '<a href=\"$1\">$1</a>'\n                  ),\n                }}\n              />\n              {/*FOOTER */}\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  marginTop: 5,\n                  minWidth: 200,\n                  color:\n                    messageDirection === \"incoming\"\n                      ? \"rgb(110, 169, 215)\"\n                      : \"#c6e3fa\",\n                  flexDirection:\n                    messageDirection === \"incoming\" ? \"row\" : \"row-reverse\",\n                }}\n              >\n                <div\n                  style={{\n                    fontSize: 12,\n                  }}\n                >\n                  {differenceInHours(new Date(), new Date(message.date)) > 5\n                    ? format(new Date(message.date), \"h:mm a\")\n                    : formatDistance(\n                        subDays(new Date(message.date), 0),\n                        new Date(),\n                        {\n                          addSuffix: true,\n                        }\n                      )}\n                </div>\n                {message.coinsInMessage > 0 && (\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <div style={{ fontSize: 12 }}>\n                      {message?.coinsInMessage}\n                    </div>\n                    <img\n                      src={coin}\n                      style={{ width: 25, height: 25 }}\n                      alt={\"coin\"}\n                    />\n                  </div>\n                )}\n                {message.data.isEdited&&\n                <div style={{ display: \"flex\", alignItems: \"flex-end\", marginLeft:3, marginRight:3 }}>\n                  <Typography fontSize={12}>\n                    edited\n                  </Typography>\n                </div>\n                }\n              </div>\n            </div>\n          )}\n        </KitMessage.CustomContent>\n\n        {/*{(position.type === \"last\" || position.type === \"single\") && (*/}\n        {/*  <KitMessage.Footer*/}\n        {/*    sentTime={*/}\n        {/*      differenceInHours(new Date(), new Date(message.date)) > 5*/}\n        {/*        ? format(new Date(message.date), \"h:mm a\")*/}\n        {/*        : formatDistance(*/}\n        {/*            subDays(new Date(message.date), 0),*/}\n        {/*            new Date(),*/}\n        {/*            {*/}\n        {/*              addSuffix: true,*/}\n        {/*            }*/}\n        {/*          )*/}\n        {/*    }*/}\n        {/*  />*/}\n        {/*)}*/}\n        <KitMessage.Footer>\n          {message.numberOfReplies > 0 &&\n            messageDirection === \"incoming\" &&\n            !isThread && (\n              <Button onClick={() => openThreadView()} variant=\"text\">\n                <Typography fontSize={\"12px\"} textTransform={\"none\"}>\n                  {message.numberOfReplies}{\" \"}\n                  {message.numberOfReplies === 1 ? \"Reply\" : \"Replies\"} (tap to\n                  review)\n                </Typography>\n              </Button>\n            )}\n        </KitMessage.Footer>\n      </KitMessage>\n      {!!buttons && (\n        <Box sx={{ \"& button\": { m: 0.5 } }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"max-content\",\n              marginLeft: \"45px\",\n            }}\n          >\n            {buttons.map((button, index) => {\n              return (\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => onMessageButtonClick(button)}\n                  key={index}\n                >\n                  {button.name}\n                </Button>\n              );\n            })}\n          </div>\n        </Box>\n      )}\n    </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import { Box, Button } from \"@mui/material\";\nimport { useHistory } from \"react-router\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\nimport { IApiMetaRoom } from \"./MetaNavigation\";\n\nconst CHAT = \"/chat/\";\n\nexport const CompassItem = ({\n  room,\n  name,\n  chatId,\n  setDirection,\n}: {\n  room: IApiMetaRoom | undefined;\n  name: string;\n  chatId: string;\n  setDirection: () => void;\n}) => {\n  const history = useHistory();\n  if (!room) {\n    return (\n      <Box\n        justifyContent={\"center\"}\n        alignItems={\"center\"}\n        style={{ padding: \"10px 0\" }}\n      >\n        <Button\n          disabled={!chatId}\n          onClick={() => {\n            setDirection();\n            history.push(CHAT + 'none');\n          }}\n        >\n          {\"Empty\"}\n        </Button>\n      </Box>\n    );\n  }\n  return (\n    <Box\n      justifyContent={\"center\"}\n      alignItems={\"center\"}\n      style={{ padding: \"10px 0\", maxWidth: 170 }}\n    >\n      <Button\n        onClick={() => {\n          setDirection();\n          history.push(CHAT + room.roomJid + CONFERENCEDOMAIN);\n        }}\n      >\n        {name}\n      </Button>\n    </Box>\n  );\n};\n","import { Box, Button, Typography } from \"@mui/material\";\nimport { IApiMetaRoom } from \"./MetaNavigation\";\nimport coin from \"../../assets/images/coin.png\";\nimport { useHistory } from \"react-router\";\nexport const MetaHeader = ({\n  room,\n  direction,\n  previousRoom,\n}: {\n  room: IApiMetaRoom | undefined;\n  direction: string;\n  previousRoom: IApiMetaRoom | undefined;\n}) => {\n  const history = useHistory();\n  const onCreateClick = () => {\n    history.push(\"/newchat\", {\n      metaDirection: direction,\n      metaRoom: previousRoom,\n    });\n  };\n  if (!room?.name) {\n    return (\n      <Box\n        sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n      >\n        <Box sx={{ alignItems: \"center\", display: \"flex\" }}>\n          <Typography>\n            This space is empty. You can build your own room here for{\" \"}\n            <b>120 </b>\n          </Typography>\n          <img src={coin} style={{ width: 20, height: 20 }} alt={\"coin\"} />\n\n          {/* <CreateNewChatButton\n            onPress={() =>\n              navigation.navigate(ROUTES.NEWCHAT, {\n                metaDirection: direction,\n                metaRoom: previousRoom,\n              })\n            }\n          /> */}\n        </Box>\n        <Button onClick={onCreateClick}>Create Meta Room</Button>\n      </Box>\n    );\n  }\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Typography sx={{ fontWeight: \"bold\", fontSize: 18 }}>\n        {room.name}\n      </Typography>\n      <Typography>{room.description}</Typography>\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { CompassItem } from \"./CompassItem\";\nimport {\n  Box,\n  CircularProgress,\n  IconButton,\n  Modal,\n  useTheme,\n} from \"@mui/material\";\nimport { MetaHeader } from \"./MetaHeader\";\nimport xmpp, { walletToUsername } from \"../../xmpp\";\nimport { httpWithAuth } from \"../../http\";\nimport { CONFERENCEDOMAIN, DOMAIN } from \"../../constants\";\nimport { useStoreState } from \"../../store\";\nimport ExploreIcon from \"@mui/icons-material/Explore\";\ntype IRoom = {\n  _id: string;\n  contractAddress: string;\n  createdAt: string;\n  description: string;\n  name: string;\n  ownerId: string;\n};\n\nexport interface IApiMetaRoom {\n  _id: string;\n  contractAddress: string;\n  createdAt: Date;\n  description: string;\n  name: string;\n  ownerId: string;\n  ownerNavLinks: {\n    east: IRoom | null;\n    north: IRoom | null;\n    south: IRoom | null;\n    west: IRoom | null;\n  };\n  roomJid: string;\n  updatedAt: Date;\n  userNavLinks: {\n    east: IRoom | null;\n    north: IRoom | null;\n    south: IRoom | null;\n    west: IRoom | null;\n  };\n}\n\nexport interface IMetaNavigation {\n  chatId: string;\n  open: boolean;\n  onClose: () => void;\n}\nconst DIRECTIONS = {\n  NORTH: \"north\",\n  WEST: \"west\",\n  SOUTH: \"south\",\n  EAST: \"east\",\n};\nconst SHORT_DIRECTIONS: Record<string, string> = {\n  north: \"n\",\n  west: \"w\",\n  south: \"s\",\n  east: \"e\",\n};\n\nconst OPOSITE_DIRECTIONS: Record<string, string> = {\n  [DIRECTIONS.WEST]: DIRECTIONS.EAST,\n  [DIRECTIONS.EAST]: DIRECTIONS.WEST,\n  [DIRECTIONS.SOUTH]: DIRECTIONS.NORTH,\n  [DIRECTIONS.NORTH]: DIRECTIONS.SOUTH,\n};\n\nconst getOpositeDirection = (direction: string) => {\n  return OPOSITE_DIRECTIONS[direction];\n};\n\n// const findRoom = (id: string | undefined, arr: IApiMetaRoom[]) => {\n//   if (!id) {\n//     return null;\n//   }\n//   const room = arr.find((item) => item.idAddress === id);\n//   if (!room) {\n//     return null;\n//   }\n//   return room;\n// };\n\nconst emptyMetaRoom = {\n  name: \"\",\n  description: \"\",\n  ownerNavLinks: { west: null, east: null, north: null, south: null },\n  ownerId: \"\",\n  contractAddress: \"\",\n  createdAt: new Date(),\n  _id: \"\",\n  roomJid: \"\",\n  updatedAt: new Date(),\n  userNavLinks: { west: null, east: null, north: null, south: null },\n};\n\nconst style = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  p: 2,\n  outline: 'none'\n};\nconst roomRoute = \"/room\";\nexport const MetaNavigation: React.FC<IMetaNavigation> = ({\n  chatId,\n  open,\n  onClose,\n}) => {\n  const [previousDirection, setPreviousDirection] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [previousRoom, setPreviuosRoom] = useState<IApiMetaRoom | undefined>();\n  const [currentMetaRoom, setCurrentMetaRoom] =\n    useState<IApiMetaRoom>(emptyMetaRoom);\n  const user = useStoreState((state) => state.user);\n\n  const theme = useTheme();\n\n  const getCurrentRoom = async () => {\n    setLoading(true);\n    try {\n      const res = await httpWithAuth().get(roomRoute + \"/getRoom/\" + chatId);\n      setCurrentMetaRoom(res.data.result);\n    } catch (error) {\n      setCurrentMetaRoom(emptyMetaRoom);\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!chatId) {\n      setCurrentMetaRoom(emptyMetaRoom);\n    }\n    if (chatId) {\n      getCurrentRoom();\n    }\n  }, [chatId]);\n  const checkEmptyDirections = () => {\n    return (\n      !currentMetaRoom?.ownerNavLinks?.south &&\n      !currentMetaRoom?.ownerNavLinks?.east &&\n      !currentMetaRoom?.ownerNavLinks?.west &&\n      !currentMetaRoom?.ownerNavLinks?.north &&\n      !currentMetaRoom?.userNavLinks?.south &&\n      !currentMetaRoom?.userNavLinks?.east &&\n      !currentMetaRoom?.userNavLinks?.west &&\n      !currentMetaRoom?.userNavLinks?.north\n    );\n  };\n\n  const sendMessage = (chatName: string, jid: string, isPrevious: boolean) => {\n    const manipulatedWalletAddress = walletToUsername(user.walletAddress);\n    const textEnter =\n      user.firstName + \" \" + user.lastName + \" \" + \"has joined\" + \" \" + \"<-\";\n    const textLeave =\n      user.firstName + \" \" + user.lastName + \" \" + \"has left\" + \" \" + \"->\";\n    const data = {\n      senderFirstName: user.firstName,\n      senderLastName: user.lastName,\n      senderWalletAddress: user.walletAddress,\n      isSystemMessage: true,\n      tokenAmount: 0,\n      receiverMessageId: \"\",\n      mucname: chatName,\n      photoURL: user.profileImage,\n      roomJid: jid,\n      isReply: false,\n      mainMessageText: \"\",\n      mainMessageId: \"\",\n      mainMessageUserName: \"\",\n    };\n    xmpp.sendMessageStanza(\n      jid,\n      isPrevious ? textLeave : textEnter,\n      data\n    );\n  };\n  const sendRoomJoin = async () => {\n    try {\n      const res = await httpWithAuth().post(roomRoute + \"/join/\" + chatId, {});\n      console.log(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    if (previousRoom?.name) {\n      sendMessage(\n        previousRoom.name,\n        previousRoom.roomJid + CONFERENCEDOMAIN,\n        true\n      );\n    }\n  }, [previousRoom]);\n  useEffect(() => {\n    if (currentMetaRoom.name) {\n      sendMessage(\n        currentMetaRoom.name,\n        currentMetaRoom.roomJid + CONFERENCEDOMAIN,\n        false\n      );\n      sendRoomJoin();\n    }\n  }, [currentMetaRoom]);\n\n  if (!currentMetaRoom.roomJid && !previousDirection) {\n    return null;\n  }\n\n  const renderDirections = (direction: string) => {\n    const oppositePreviousDirection = getOpositeDirection(previousDirection);\n    if (checkEmptyDirections() && direction === oppositePreviousDirection) {\n      return (\n        <CompassItem\n          name={oppositePreviousDirection + \":\" + previousRoom?.name}\n          chatId={chatId}\n          room={previousRoom}\n          setDirection={() => {\n            setPreviousDirection(oppositePreviousDirection);\n            setPreviuosRoom(previousRoom);\n          }}\n        />\n      );\n    }\n    return (\n      <CompassItem\n        name={\n          SHORT_DIRECTIONS[direction] +\n          \":\" +\n          (currentMetaRoom.ownerNavLinks[direction]?.name ||\n            currentMetaRoom.userNavLinks[direction]?.name)\n        }\n        chatId={chatId}\n        room={\n          currentMetaRoom?.ownerNavLinks?.[direction] ||\n          currentMetaRoom?.userNavLinks?.[direction]\n        }\n        setDirection={() => {\n          setPreviousDirection(direction);\n          setPreviuosRoom(currentMetaRoom);\n        }}\n      />\n    );\n  };\n  return (\n    <Modal open={open} onClose={onClose}>\n      <Box sx={style}>\n        {loading ? (\n          <CircularProgress size={50} />\n        ) : (\n          <Box>\n            <Box\n              sx={{ bgcolor: \"white\", mb: \"10px\", borderRadius: \"10px\", p: 2 }}\n            >\n              <MetaHeader\n                room={currentMetaRoom}\n                direction={previousDirection}\n                previousRoom={previousRoom}\n              />\n            </Box>\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                bgcolor: \"white\",\n                borderRadius: \"10px\",\n                p: 2,\n              }}\n            >\n              {renderDirections(DIRECTIONS.NORTH)}\n              <Box\n                sx={{\n                  display: \"grid\",\n                  gridTemplateColumns: \"repeat(3, 1fr)\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <Box sx={{ display: \"flex\" }}>\n                  {renderDirections(DIRECTIONS.WEST)}\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <IconButton sx={{ color: theme.palette.primary.main }}>\n                    <ExploreIcon fontSize=\"large\" />\n                  </IconButton>\n                </Box>\n                <Box sx={{ display: \"flex\" }}>\n                  {renderDirections(DIRECTIONS.EAST)}\n                </Box>\n              </Box>\n              {renderDirections(DIRECTIONS.SOUTH)}\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </Modal>\n  );\n};\n","import { MessageInput } from '@chatscope/chat-ui-kit-react';\nimport * as React from 'react';\n\n\ninterface CustomMessageInputProps {\n    onPaste:any;\n    placeholder:string;\n    onChange:(innerHtml: string, textContent: string, innerText: string, nodes: NodeList) => void;\n    onSend:(innerHtml: string, textContent: string, innerText: string, nodes: NodeList) => void;\n    sendFile:(file: File, isReply: boolean) => void\n}\n\nconst CustomMessageInput = (props: CustomMessageInputProps) => {\n\n    const {\n        onPaste,\n        placeholder,\n        onChange,\n        onSend,\n        sendFile\n    } = props;\n\n    const fileRef = React.useRef(null);\n\n    return (\n        <div>\n            <MessageInput\n            onPaste={onPaste}\n            placeholder={placeholder}\n            onChange={onChange}\n            onSend={onSend}\n            onAttachClick={() => fileRef.current.click()}\n            />\n            <input\n            type=\"file\"\n            name=\"file\"\n            id=\"file\"\n            onChange={(event) => sendFile(event.target.files[0], true)}\n            ref={fileRef}\n            style={{ display: \"none\" }}\n            />\n        </div>\n    );\n};\n\nexport default CustomMessageInput;\n\n","import React, { useState } from \"react\";\nimport {\n  ChatContainer,\n  ConversationHeader,\n  MessageInput,\n  MessageList,\n  TypingIndicator,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Box, Checkbox, Divider, IconButton, Typography } from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Message } from \"../Messages/Message\";\nimport { TMessageHistory, TUserChatRooms, useStoreState } from \"../../../store\";\nimport xmpp from \"../../../xmpp\";\nimport * as DOMPurify from \"dompurify\";\nimport { SystemMessage } from \"../Messages/SystemMessage\";\nimport CustomMessageInput from \"./CustomMessageInput\";\nimport { TProfile } from \"../../../pages/Profile/types\";\nimport { IMessagePosition } from \"../../../pages/ChatInRoom/Chat\";\nimport { getPosition, stripHtml } from \"../../../utils\";\nimport { useHistory, useParams } from \"react-router\";\n\ninterface ThreadContainerProps {\n  roomData: {\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  };\n  handleSetThreadView: (value: boolean) => void;\n  isThreadView: boolean;\n  chooseRoom: (jid: string) => void;\n  profile: TProfile;\n  currentPickedRoom: TUserChatRooms;\n  currentRoom: string;\n  onYReachStart: () => void;\n  sendFile: (file: File, isReply: boolean) => void;\n  showInChannel: boolean;\n  toggleMediaModal: (value: boolean, message?: TMessageHistory) => void;\n  handleShowInChannel: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  toggleTransferDialog: (value: boolean, message?: TMessageHistory) => void;\n}\n\nconst ThreadContainer: React.FC<ThreadContainerProps> = ({\n  roomData,\n  handleSetThreadView,\n  isThreadView,\n  profile,\n  currentPickedRoom,\n  currentRoom,\n  onYReachStart,\n  sendFile,\n  toggleMediaModal,\n  toggleTransferDialog,\n  handleShowInChannel,\n  showInChannel,\n}) => {\n  const currentThreadViewMessage = useStoreState(\n    (store) => store.currentThreadViewMessage\n  );\n  const [myThreadMessage, setMyThreadMessage] = useState(\"\");\n\n  const user = useStoreState((store) => store.user);\n  const userChatRooms = useStoreState((store) => store.userChatRooms);\n  const messages = useStoreState((state) => state.historyMessages);\n\n  const { roomJID } = useParams<{ roomJID: string }>();\n\n  const threadWindowMessages = messages.filter(\n    (item: TMessageHistory) =>\n      item.roomJID.includes(roomJID) &&\n      item.data.isReply &&\n      item.data.mainMessageId === currentThreadViewMessage.id\n  );\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const history = useHistory();\n  const setThreadMessage = (value) => {\n    setMyThreadMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n  const handleChatDetailClick = () => {\n    history.push(\"/chatDetails/\" + currentUntrackedChatRoom);\n  };\n\n  const handlePaste = (event: any) => {\n    let item = Array.from(event.clipboardData.items).find((x: any) =>\n      /^image\\//.test(x.type)\n    );\n    if (item) {\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob, false);\n    }\n  };\n  const sendThreadMessage = (button: any) => {\n    if (myThreadMessage.trim().length > 0) {\n      let userAvatar = \"\";\n      if (profile?.profileImage) {\n        userAvatar = profile?.profileImage;\n      }\n      const clearMessageFromHtml = DOMPurify.sanitize(myThreadMessage);\n      const finalMessageTxt = stripHtml(clearMessageFromHtml);\n\n      if (finalMessageTxt.trim().length > 0) {\n        const data = {\n          senderFirstName: user.firstName,\n          senderLastName: user.lastName,\n          senderWalletAddress: user.walletAddress,\n          isSystemMessage: false,\n          tokenAmount: 0,\n          receiverMessageId: currentThreadViewMessage.data.receiverMessageId,\n          mucname: roomData.name,\n          photoURL: user.profileImage,\n          roomJid: roomData.jid,\n          isReply: true,\n          mainMessageText: currentThreadViewMessage.body,\n          mainMessageId: currentThreadViewMessage.id,\n          mainMessageUserName:\n            currentThreadViewMessage.data.senderFirstName +\n            \" \" +\n            currentThreadViewMessage.data.senderLastName,\n          mainMessageCreatedAt: currentThreadViewMessage.date,\n          mainMessageFileName: currentThreadViewMessage.data.originalName,\n          mainMessageImageLocation: currentThreadViewMessage.data.location,\n          mainMessageImagePreview:\n            currentThreadViewMessage.data.locationPreview,\n          mainMessageMimeType: currentThreadViewMessage.data.mimetype,\n          mainMessageOriginalName: currentThreadViewMessage.data.originalName,\n          mainMessageSize: \"N/A\",\n          mainMessageDuration: \"N/A\",\n          mainMessageWaveForm: \"N/A\",\n          mainMessageAttachmentId: \"N/A\",\n          mainMessageWrappable: \"N/A\",\n          mainMessageNftId: \"N/A\",\n          mainMessageNftActionType: \"N/A\",\n          mainMessageContractAddress: \"N/A\",\n          mainMessageRoomJid: currentThreadViewMessage.data.roomJid,\n          showInChannel: showInChannel,\n          push: true,\n        };\n\n        xmpp.sendMessageStanza(currentRoom, finalMessageTxt, data);\n      }\n    }\n  };\n\n  return (\n    <ChatContainer\n      style={{\n        borderLeftWidth: \"2px\",\n      }}\n    >\n      {!!roomData && (\n        <div is=\"ConversationHeader\">\n          <ConversationHeader\n            style={{\n              height: \"70px\",\n            }}\n          >\n            <ConversationHeader.Content\n              datatype=\"dad\"\n              userName={\n                <div>\n                  <Typography fontWeight={\"bold\"}>Thread</Typography>\n                  <Typography>{roomData.name}</Typography>\n                </div>\n              }\n              onClick={handleChatDetailClick}\n            />\n            <ConversationHeader.Actions>\n              <IconButton\n                sx={{ color: \"black\" }}\n                onClick={() => handleSetThreadView(false)}\n              >\n                <CloseIcon />\n              </IconButton>\n            </ConversationHeader.Actions>\n          </ConversationHeader>\n          {/* Main Message Preview */}\n          <Box width={\"100%\"} padding={2}>\n            <span>\n              <div>\n                <Message\n                  onMediaMessageClick={toggleMediaModal}\n                  toggleTransferDialog={toggleTransferDialog}\n                  isThread={isThreadView}\n                  key={currentThreadViewMessage.id}\n                  is={\"Message\"}\n                  position={{ position: \"single\", type: \"single\" }}\n                  message={currentThreadViewMessage}\n                  onMessageButtonClick={sendThreadMessage}\n                />\n              </div>\n            </span>\n          </Box>\n          <Divider>{currentThreadViewMessage.numberOfReplies}</Divider>\n        </div>\n      )}\n\n      <MessageList\n        style={{\n          backgroundImage: currentPickedRoom?.room_background\n            ? `url(${currentPickedRoom.room_background})`\n            : \"white\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"100% 100%\",\n        }}\n        disableOnYReachWhenNoScroll={true}\n        typingIndicator={\n          !!userChatRooms.filter((e) => e.jid === currentRoom)[0]\n            ?.composing && (\n            <TypingIndicator\n              style={{ opacity: \".6\" }}\n              content={\n                userChatRooms.filter((e) => e.jid === currentRoom)[0]?.composing\n              }\n            />\n          )\n        }\n      >\n        {threadWindowMessages.map((message, index, arr) =>\n          message.data.isSystemMessage === \"false\" ? (\n            <Message\n              onMediaMessageClick={toggleMediaModal}\n              toggleTransferDialog={toggleTransferDialog}\n              isThread={true}\n              key={message.id}\n              is={\"Message\"}\n              position={getPosition(arr, message, index)}\n              message={message}\n              onMessageButtonClick={sendThreadMessage}\n            />\n          ) : (\n            <SystemMessage\n              key={message.id}\n              is={\"Message\"}\n              message={message}\n              userJid={xmpp.client?.jid?.toString()}\n            />\n          )\n        )}\n        {threadWindowMessages.length <= 0 ||\n          (!currentRoom && (\n            <MessageList.Content\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                height: \"100%\",\n                textAlign: \"center\",\n                fontSize: \"1.2em\",\n              }}\n            >\n              {!loaderArchive ? (\n                <span>\n                  {!currentRoom && \"To get started, please select a chat room.\"}\n                </span>\n              ) : (\n                \"Loading...\"\n              )}\n            </MessageList.Content>\n          ))}\n        {!loaderArchive && currentRoom && threadWindowMessages.length <= 0 && (\n          <MessageList.Content\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              height: \"100%\",\n              textAlign: \"center\",\n              fontSize: \"1.2em\",\n            }}\n          >\n            Message list is empty\n          </MessageList.Content>\n        )}\n      </MessageList>\n\n      {!!roomData?.name && (\n        <div is={\"MessageInput\"}>\n          <Divider />\n          <Box\n            borderColor={\"#D3D3D3\"}\n            height=\"30px\"\n            alignItems={\"center\"}\n            flexDirection={\"row\"}\n            display=\"flex\"\n            width={\"100%\"}\n          >\n            <Checkbox\n              checked={showInChannel}\n              onChange={handleShowInChannel}\n              inputProps={{ \"aria-label\": \"controlled\" }}\n            />\n            <Typography>Also send to room</Typography>\n          </Box>\n\n          <CustomMessageInput\n            onChange={setThreadMessage}\n            onPaste={handlePaste}\n            onSend={sendThreadMessage}\n            placeholder=\"Type message here\"\n            sendFile={sendFile}\n          />\n        </div>\n      )}\n    </ChatContainer>\n  );\n};\n\nexport default ThreadContainer;\n","import React, { useEffect, useMemo, useState } from \"react\";\n\nimport {\n  Dialog,\n  DialogContent,\n  Divider,\n  Button,\n  Typography,\n  TextField,\n} from \"@mui/material\";\nimport { transferCoin } from \"../../http\";\n\nimport coin from \"../../assets/images/coin.png\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport BlockIcon from \"@mui/icons-material/Block\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport { coinReplacedName, coinsMainName } from \"../../config/config\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\nimport { createPrivateChat } from \"../../helpers/chat/createPrivateChat\";\nimport { useSnackbar } from \"../../context/SnackbarContext\";\nimport ReplyIcon from '@mui/icons-material/Reply';\nimport EditIcon from '@mui/icons-material/Edit';\n\nconst dialogItems = [1, 3, 5, \"x\"];\ninterface IProps {\n  open: boolean;\n  onClose: () => void;\n  loading?: boolean;\n  message: TMessageHistory | null;\n  onPrivateRoomClick: (jid: string) => void;\n  onThreadClick:() => void;\n  onEditClick:(value:boolean, message:TMessageHistory) => void;\n}\ntype IDialog = \"dialog\" | \"error\" | \"clarification\" | \"transfer\";\n\nconst dialogTypes: Record<IDialog, IDialog> = {\n  dialog: \"dialog\",\n  error: \"error\",\n  clarification: \"clarification\",\n  transfer: \"transfer\",\n};\n\nexport function ChatTransferDialog({\n  open,\n  onClose,\n  loading,\n  message,\n  onPrivateRoomClick,\n  onThreadClick,\n  onEditClick\n}: IProps) {\n  const user = useStoreState((state) => state.user);\n\n  const [coinAmount, setCoinAmount] = useState(1);\n  const [dialogType, setDialogType] = useState<IDialog>(dialogTypes.dialog);\n\n  const balance = useStoreState((store) => store.balance);\n  const setNewUserChatRoom = useStoreState((store) => store.setNewUserChatRoom);\n  const { showSnackbar } = useSnackbar();\n\n  const messageJid = message?.data?.senderJID.split('/')[0];\n  const userJid = useMemo(() => xmpp.client?.jid?.toString().split('/')[0], []);\n  const isSameUser = userJid === messageJid;\n\n  const coinData = balance.filter(\n    (el) => !el.tokenType && el.contractAddress.length > 10\n  );\n\n  const openThreadView = () => {\n    onThreadClick()\n    onClose()\n  }\n  \n  const openEditView = () => {\n    onEditClick(true, message);\n    onClose()\n  }\n\n  const userToBlackList = (step: \"clarify\" | \"block\") => {\n    if (step === \"clarify\") {\n      setDialogType(dialogTypes.clarification);\n      return;\n    }\n\n    if (step === \"block\") {\n      xmpp.blacklistUser(message.data.senderJID);\n      xmpp.getBlackList();\n      useStoreState\n        .getState()\n        .removeAllInMessageHistory(message.data.senderJID);\n    }\n    onClose();\n  };\n\n  const sendCoins = async (amount?: number) => {\n    const currentCoinAmount = amount ? Number(amount) : Number(coinAmount);\n    try {\n      const res = await transferCoin(\n        \"DPT\",\n        coinData[0].tokenName,\n        currentCoinAmount,\n        message.data.senderWalletAddress\n      );\n      const coinName =\n        coinData[0].tokenName === coinsMainName\n          ? coinReplacedName\n          : coinData[0].tokenName;\n      const sender = user.firstName + \" \" + user.lastName;\n      const receiver =\n        message.data.senderFirstName + \" \" + message.data.senderLastName;\n      const textMessage = `${sender} -> ${coinAmount} ${coinName} -> ${receiver}`;\n      const transactionId = res.data.transaction._id;\n      xmpp.sendSystemMessage(\n        message.roomJID,\n        user.firstName,\n        user.lastName,\n        user.walletAddress,\n        textMessage,\n        currentCoinAmount,\n        message.id,\n        transactionId\n      );\n\n      onClose();\n    } catch (error) {\n      console.log(error);\n      showSnackbar(\"error\", \"An error occurred during the coin transfer.\");\n      onClose();\n    }\n  };\n\n  const openPrivateRoom = () => {\n    createPrivateChat(\n      user.walletAddress,\n      message.data.senderWalletAddress,\n      user.firstName,\n      message.data.senderFirstName,\n      message.data.senderJID\n    )\n      .then((result) => {\n        if (result.isNewRoom) {\n          const temporaryRoomData = {\n            jid: result.roomJid,\n            name: result.roomName,\n            room_background: \"none\",\n            room_thumbnail: \"none\",\n            users_cnt: \"2\",\n            unreadMessages: 0,\n            composing: \"\",\n            toUpdate: true,\n            description: \"\",\n          };\n          setNewUserChatRoom(temporaryRoomData);\n          onPrivateRoomClick(result.roomJid);\n        } else {\n          onPrivateRoomClick(result.roomJid);\n        }\n      })\n      .catch((error) => {\n        console.log(\"openPrivateRoom Error: \", error);\n      });\n    onClose();\n  };\n\n  const renderDialogContent = () => {\n    if (!message) return null;\n    switch (dialogType) {\n      case dialogTypes.clarification:\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            {\"Are you sure you want to block the user?\"}\n            <Button\n              onClick={() => userToBlackList(\"block\")}\n              variant=\"outlined\"\n              size=\"small\"\n            >\n              To block list\n            </Button>\n          </div>\n        );\n      case dialogTypes.dialog:\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            {!isSameUser&&<div>\n              Reward{\" \"}\n              <strong>\n                {message.data.senderFirstName +\n                  \" \" +\n                  message.data.senderLastName}\n              </strong>{\" \"}\n              with coins\n            </div>}\n\n            {!isSameUser&&<div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                margin: \"10px 0px 10px 0px\",\n              }}\n            >\n              {dialogItems.map((item) => (\n                <div\n                  key={item}\n                  style={{\n                    textAlign: \"center\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => {\n                    typeof item === \"number\"\n                      ? sendCoins(item)\n                      : setDialogType(dialogTypes.transfer);\n                  }}\n                >\n                  <img\n                    src={coin}\n                    style={{\n                      width: 25,\n                      height: 25,\n                    }}\n                    alt={\"coin\"}\n                  />\n                  <Typography\n                    sx={{\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    {item}\n                  </Typography>\n                </div>\n              ))}\n            </div>}\n            {!isSameUser&&<Divider\n              style={{\n                margin: \"10px\",\n              }}\n            />}\n            {!isSameUser&&<Button\n              onClick={openPrivateRoom}\n              variant=\"outlined\"\n              startIcon={<SendIcon />}\n            >\n              Direct message\n            </Button>}\n            <Button\n              style={{\n                margin: \"10px 0px 0px 0px\",\n              }}\n              onClick={openThreadView}\n              variant=\"outlined\"\n              startIcon={<ReplyIcon />}\n            >\n              Reply\n            </Button>\n\n            {isSameUser&&\n              <Button\n                style={{\n                  margin: \"10px 0px 0px 0px\",\n                }}\n                onClick={openEditView}\n                variant=\"outlined\"\n                startIcon={<EditIcon />}\n              >\n                Edit\n              </Button>\n            }\n              \n              {!isSameUser&&<Divider\n              style={{\n                margin: \"10px\",\n              }}\n            />}\n            {!isSameUser&&<div\n            style={{\n              display:'flex',\n              alignItems:\"center\",\n              flexDirection:\"column\"\n            }}\n            >\n              <Button\n                onClick={() => userToBlackList(\"clarify\")}\n                variant=\"contained\"\n                startIcon={<BlockIcon />}\n              >\n                Block this user\n              </Button>\n              <Typography\n                style={{\n                  textAlign: \"center\",\n                }}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Stop seeing this user.\n              </Typography>\n            </div>}\n          </div>\n        );\n      case dialogTypes.transfer:\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <TextField\n              id=\"standard-basic\"\n              type={\"number\"}\n              label=\"Enter transfer amount\"\n              variant=\"standard\"\n              onChange={(event) => setCoinAmount(Number(event.target.value))}\n            />\n            <Button\n              style={{\n                marginTop: 10,\n              }}\n              onClick={() => sendCoins()}\n              variant=\"outlined\"\n              size=\"small\"\n            >\n              Send coins\n            </Button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth={\"xl\"}>\n      <DialogContent>{renderDialogContent()}</DialogContent>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\n\nimport Modal from \"@mui/material/Modal\";\nimport { TCombinedMimeType } from \"../../constants\";\nimport { IconButton } from \"@mui/material\";\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst style = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  bgcolor: \"background.paper\",\n  boxShadow: 24,\n  p: 4,\n  borderRadius: '10px'\n};\n\ninterface IChatMediaModal {\n  open: boolean;\n  onClose: () => void;\n  mimetype: TCombinedMimeType;\n  url: string;\n}\n\nexport const ChatMediaModal: React.FC<IChatMediaModal> = ({\n  open,\n  onClose,\n  mimetype,\n  url,\n}) => {\n  const renderMediaContent = () => {\n    switch (mimetype) {\n      case \"image/jpeg\":\n      case \"image/png\":\n      case \"image/jpg\":\n        return <img src={url} alt={\"image1\"} style={{ maxWidth: \"100%\", maxHeight: '90vh' }} />;\n\n      default:\n        return null;\n    }\n  };\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={style}>\n        <IconButton onClick={onClose} sx={{position: 'absolute', top: 0, right: 0, color: 'black'}}>\n          <CloseIcon />\n        </IconButton>\n        {renderMediaContent()}\n      </Box>\n    </Modal>\n  );\n};\n","import React, { useCallback, useState } from \"react\";\nimport xmpp from \"../../xmpp\";\nimport { AudioRecorder, useAudioRecorder } from \"react-audio-voice-recorder\";\nimport { uploadFile } from \"../../http\";\nimport { TProfile } from \"../../pages/Profile/types\";\nimport { useStoreState } from \"../../store\";\nimport { Box, CircularProgress } from \"@mui/material\";\nimport { useSnackbar } from \"../../context/SnackbarContext\";\n\ninterface IProps {\n  profile: TProfile;\n  currentRoom: string;\n  roomData: any;\n}\n\nexport function ChatAudioMessageDialog({\n  profile,\n  currentRoom,\n  roomData,\n}: IProps) {\n  const user = useStoreState((store) => store.user);\n  const [loading, setLoading] = useState(false);\n  const recorderControls = useAudioRecorder();\n  const { showSnackbar } = useSnackbar();\n  const addAudioElement = (blob: Blob) => {\n    setLoading(true);\n    let formData = new FormData();\n    formData.append(\"files\", blob);\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          const data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        showSnackbar(\"error\", \"An error occurred while loading your audio.\");\n      });\n    setLoading(false);\n\n  };\n\n  return (\n    <Box>\n      <Box style={{ display: loading ? \"none\" : \"block\" }}>\n        <AudioRecorder\n          recorderControls={recorderControls}\n          onRecordingComplete={addAudioElement}\n        />\n      </Box>\n      {loading && <CircularProgress color={\"secondary\"} size={\"20px\"} />}\n    </Box>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport xmpp from \"../../xmpp\";\nimport {\n  TActiveRoomFilter,\n  TMessageHistory,\n  TUserChatRooms,\n  useStoreState,\n} from \"../../store\";\nimport { getPublicProfile, uploadFile } from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport { format, formatDistance, subDays } from \"date-fns\";\nimport * as DOMPurify from \"dompurify\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Message } from \"../../components/Chat/Messages/Message\";\nimport { SystemMessage } from \"../../components/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  useMediaQuery,\n  useTheme,\n  Box,\n  Slide,\n  Stack,\n  Typography,\n  Divider,\n} from \"@mui/material\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useDropzone } from \"react-dropzone\";\nimport { MetaNavigation } from \"../../components/MetaNavigation/MetaNavigation\";\nimport QrCodeIcon from \"@mui/icons-material/QrCode\";\nimport { QrModal } from \"../Profile/QrModal\";\nimport { CONFERENCEDOMAIN } from \"../../constants\";\nimport { ROOMS_FILTERS } from \"../../config/config\";\nimport ThreadContainer from \"../../components/Chat/Threads/ThreadContainer\";\nimport { ChatTransferDialog } from \"../../components/Chat/ChatTransferDialog\";\nimport { ChatMediaModal } from \"../../components/Chat/ChatMediaModal\";\nimport { ChatAudioMessageDialog } from \"../../components/Chat/ChatAudioRecorder\";\nimport { generateChatLink, getPosition, stripHtml } from \"../../utils\";\nimport CloseIcon from '@mui/icons-material/Close';\nimport EditIcon from '@mui/icons-material/Edit';\n\nexport type IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string;\n}\n\nconst NO_ROOM_PICKED = \"none\" + CONFERENCEDOMAIN;\nconst filterChatRooms = (\n  rooms: TUserChatRooms[],\n  filter: TActiveRoomFilter\n) => {\n  if (filter === ROOMS_FILTERS.official || filter === ROOMS_FILTERS.favourite) {\n    return rooms.filter(\n      (item) =>\n        item.group === ROOMS_FILTERS.official ||\n        item.group === ROOMS_FILTERS.favourite\n    );\n  }\n\n  return rooms.filter(\n    (item) =>\n      item.group !== ROOMS_FILTERS.official &&\n      item.group !== ROOMS_FILTERS.favourite\n  );\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const userChatRooms = useStoreState((store) => store.userChatRooms);\n  const currentThreadViewMessage = useStoreState(\n    (store) => store.currentThreadViewMessage\n  );\n  const setCurrentThreadViewMessage = useStoreState(\n    (store) => store.setCurrentThreadViewMessage\n  );\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState(\n    (store) => store.currentUntrackedChatRoom\n  );\n  const { roomJID } = useParams<{ roomJID: string }>();\n\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n\n  const [showMetaNavigation, setShowMetaNavigation] = useState(true);\n  const [isThreadView, setThreadView] = useState(false);\n  const [showInChannel, setShowInChannel] = React.useState(false);\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [currentEditMessage, setCurrentEditMessage] = React.useState<TMessageHistory>();\n\n  const handleSetThreadView = (value: boolean) => setThreadView(value);\n  const handleSetCurrentThreadViewMessage = (threadMessage: TMessageHistory) =>\n    setCurrentThreadViewMessage(threadMessage);\n  const handleShowInChannel = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setShowInChannel(event.target.checked);\n\n  const handleCurrentEditMessage = (message:TMessageHistory) => setCurrentEditMessage(message);\n\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const currentPickedRoom = useMemo(() => {\n    return userChatRooms.find((item) => item.jid === currentRoom);\n  }, [userChatRooms, currentRoom]);\n\n  const mainWindowMessages = messages.filter((item: TMessageHistory) => {\n    if (item.roomJID === currentRoom) {\n      if (item.data.isReply) {\n        if (item.data.showInChannel) {\n          return item;\n        } else {\n          return false;\n        }\n      } else {\n        return item;\n      }\n    }\n  });\n\n  const [showAudioMsgDialog, setShowAudioMsgDialog] = useState(false);\n\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n\n  const [transferDialogData, setTransferDialogData] = useState<{\n    open: boolean;\n    message: TMessageHistory | null;\n  }>({ open: false, message: null });\n\n  const [mediaDialogData, setMediaDialogData] = useState<{\n    open: boolean;\n    message: TMessageHistory | null;\n  }>({ open: false, message: null });\n\n  const [isQrModalVisible, setQrModalVisible] = useState(false);\n\n  const [uploadFileDialogData, setUploadFileDialogData] = useState<{\n    open: boolean;\n    headline: string;\n    description: string;\n  }>({ headline: \"\", description: \"\", open: false });\n\n  const [firstLoadMessages, setFirstLoadMessages] = useState(true);\n  const activeRoomFilter = useStoreState((state) => state.activeRoomFilter);\n  const setActiveRoomFilter = useStoreState(\n    (state) => state.setActiveRoomFilter\n  );\n  const openLastMetaRoom = activeRoomFilter === ROOMS_FILTERS.meta;\n  const closeQrModal = () => {\n    setQrModalVisible(false);\n  };\n  const history = useHistory();\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      sendFile(acceptedFiles[0], false);\n    },\n    [roomData]\n  );\n  const { getRootProps } = useDropzone({\n    onDrop,\n    noClick: true,\n    maxFiles: 1,\n  });\n  const onYReachStart = () => {\n    const filteredMessages = messages.filter(\n      (item: TMessageHistory) => item.roomJID === currentRoom\n    );\n\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    if (roomJID) {\n      loadMessages(roomJID);\n      setShowMetaNavigation(true);\n    }\n  }, [roomJID]);\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const toggleTransferDialog = (\n    value: boolean,\n    message: TMessageHistory = null\n  ) => {\n    setTransferDialogData({ open: value, message });\n  };\n  const toggleMediaModal = (\n    value: boolean,\n    message: TMessageHistory = null\n  ) => {\n    setMediaDialogData({ open: value, message });\n  };\n\n  const chooseRoom = (jid: string) => {\n    history.push(\"/chat/\" + jid.split(\"@\")[0]);\n    loadMessages(jid);\n  };\n  const loadMessages = (jid: string) => {\n    setCurrentRoom(jid);\n    const currentRoomData = userChatRooms.filter((e) => e.jid === jid)[0];\n    setRoomData(currentRoomData);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: TMessageHistory) => item.roomJID === jid\n    );\n    setFirstLoadMessages(true);\n\n    if (\n      !loaderArchive &&\n      filteredMessages.length <= 10 &&\n      filteredMessages.length > 0\n    ) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 50);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: TMessageHistory) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: TMessageHistory) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    return format(new Date(messagesInRoom[0].date), \"H:mm\");\n  };\n\n  const sendMessage = (button: any) => {\n    if (myMessage.trim().length > 0) {\n      let userAvatar = \"\";\n      if (profile?.profileImage) {\n        userAvatar = profile?.profileImage;\n      }\n      const clearMessageFromHtml = DOMPurify.sanitize(myMessage);\n      const finalMessageTxt = stripHtml(clearMessageFromHtml);\n\n      if (finalMessageTxt.trim().length > 0) {\n        if(isEditing){\n          const data = {\n            senderFirstName: user.firstName,\n            senderLastName: user.lastName,\n            senderWalletAddress: user.walletAddress,\n            isSystemMessage: false,\n            tokenAmount: 0,\n            receiverMessageId: currentEditMessage.data.receiverMessageId,\n            mucname: roomData.name,\n            photoURL: userAvatar,\n            roomJid: roomJID,\n            isReply: false,\n            mainMessageText: '',\n            mainMessageId: '',\n            mainMessageUserName: '',\n            push: true,\n          };\n          console.log(data)\n          xmpp.sendReplaceMessageStanza(\n            currentUntrackedChatRoom,\n            finalMessageTxt,\n            currentEditMessage.id.toString(),\n            data\n          )\n          setIsEditing(false)\n        }else{\n          xmpp.sendMessage(\n            currentRoom,\n            user.firstName,\n            user.lastName,\n            userAvatar,\n            user.walletAddress,\n            typeof button === \"object\" ? button.value : finalMessageTxt,\n            typeof button === \"object\" ? button.notDisplayedValue : null\n          );\n        }\n      }\n    }\n  };\n\n  const sendFile = (file: File, isReply: boolean) => {\n    setUploadFileDialogData({\n      headline: \"File is loading, please wait...\",\n      description: \"\",\n      open: true,\n    });\n\n    const formData = new FormData();\n    formData.append(\"files\", file);\n\n    uploadFile(formData)\n      .then((result) => {\n        let userAvatar = \"\";\n        if (profile?.profileImage) {\n          userAvatar = profile?.profileImage;\n        }\n\n        result.data.results.map(async (item: any) => {\n          let data = {\n            firstName: user.firstName,\n            lastName: user.lastName,\n            walletAddress: user.walletAddress,\n            chatName: roomData.name,\n            userAvatar: userAvatar,\n            createdAt: item.createdAt,\n            expiresAt: item.expiresAt,\n            fileName: item.filename,\n            isVisible: item.isVisible,\n            location: item.location,\n            locationPreview: item.locationPreview,\n            mimetype: item.mimetype,\n            originalName: item.originalname,\n            ownerKey: item.ownerKey,\n            size: item.size,\n            duration: item?.duration,\n            updatedAt: item.updatedAt,\n            userId: item.userId,\n            waveForm: \"\",\n            attachmentId: item._id,\n            wrappable: true,\n          };\n\n          const additionalDataForThread = {\n            isReply: isReply,\n            mainMessageText: currentThreadViewMessage.body,\n            mainMessageId: currentThreadViewMessage.id,\n            mainMessageUserName:\n              currentThreadViewMessage.data.senderFirstName +\n              \" \" +\n              currentThreadViewMessage.data.senderLastName,\n            mainMessageCreatedAt: currentThreadViewMessage.date,\n            mainMessageFileName: currentThreadViewMessage.data.originalName,\n            mainMessageImageLocation: currentThreadViewMessage.data.location,\n            mainMessageImagePreview:\n              currentThreadViewMessage.data.locationPreview,\n            mainMessageMimeType: currentThreadViewMessage.data.mimetype,\n            mainMessageOriginalName: currentThreadViewMessage.data.originalName,\n            mainMessageSize: \"N/A\",\n            mainMessageDuration: \"NA\",\n            mainMessageWaveForm: \"N/A\",\n            mainMessageAttachmentId: \"N/A\",\n            mainMessageWrappable: \"N/A\",\n            mainMessageNftId: \"N/A\",\n            mainMessageNftActionType: \"N/A\",\n            mainMessageContractAddress: \"N/A\",\n            mainMessageRoomJid: currentThreadViewMessage.roomJID,\n            showInChannel: showInChannel,\n          };\n\n          data = { ...data, ...additionalDataForThread };\n          xmpp.sendMediaMessageStanza(currentRoom, data);\n          setUploadFileDialogData({\n            open: false,\n            description: \"\",\n            headline: \"\",\n          });\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        setUploadFileDialogData({\n          headline: \"Error\",\n          description: \"An error occurred while uploading the file\",\n          open: true,\n        });\n      });\n    if (fileRef.current) {\n      fileRef.current.value = \"\";\n    }\n  };\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(\n      user.walletAddress,\n      roomData.jid,\n      user.firstName + \" \" + user.lastName\n    );\n  };\n\n  const handlePaste = (event: any) => {\n    let item = Array.from(event.clipboardData.items).find((x: any) =>\n      /^image\\//.test(x.type)\n    );\n    if (item) {\n      // @ts-ignore\n      let blob = item.getAsFile();\n      sendFile(blob, false);\n    }\n  };\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid);\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    const filteredMessages = messages.filter(\n      (item: TMessageHistory) => item.roomJID === currentRoom\n    );\n    if (currentUntrackedChatRoom) {\n      if (\n        !roomJID ||\n        roomJID === \"none\" ||\n        roomJID === \"\" ||\n        currentUntrackedChatRoom.split(\"@\")[0] === roomJID\n      ) {\n        if (currentUntrackedChatRoom.split(\"@\")[1]) {\n          chooseRoom(currentUntrackedChatRoom);\n        } else {\n          chooseRoom(currentUntrackedChatRoom + CONFERENCEDOMAIN);\n        }\n      }\n    }\n\n    if (\n      currentUntrackedChatRoom.split(\"@\")[0] !== roomJID &&\n      roomJID !== \"none\" &&\n      roomJID !== \"\"\n    ) {\n      useStoreState.getState().setCurrentUntrackedChatRoom(roomJID);\n      chooseRoom(roomJID);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    };\n\n    window.onfocus = () => {\n      if (currentRoom) {\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    };\n    if(filteredMessages.length<=0 && firstLoadMessages){\n\n      xmpp.getRoomArchiveStanza(\n        currentRoom,\n        50\n      )\n    }\n  }, [currentRoom]);\n\n  useEffect(() => {\n    const filteredMessages = messages.filter(\n      (item: TMessageHistory) => item.roomJID === currentRoom\n    );\n    if (\n      !loaderArchive &&\n      filteredMessages.length > 0 &&\n      filteredMessages.length <= 51 &&\n      currentRoom &&\n      firstLoadMessages\n    ) {\n      const lastUpFilteredMessage = filteredMessages[0];\n\n      if (\n        filteredMessages.length >= 10 &&\n        filteredMessages.length < 15 &&\n        lastUpFilteredMessage.data.isSystemMessage\n      ) {\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(\n          currentRoom,\n          String(lastUpFilteredMessage.id),\n          5\n        );\n      } else if (filteredMessages.length === 1) {\n        setFirstLoadMessages(false);\n        xmpp.getPaginatedArchive(\n          currentRoom,\n          String(lastUpFilteredMessage.id),\n          50\n        );\n      }\n    }\n  }, [messages]);\n\n  const handleChatDetailClick = () => {\n    history.push(\"/chatDetails/\" + currentUntrackedChatRoom);\n  };\n\n  const onMenuThreadClick = () => {\n    setThreadView(true);\n    handleSetCurrentThreadViewMessage(transferDialogData.message);\n  };\n\n  const onMenuEditClick = (value:boolean, message:TMessageHistory) => {\n    setIsEditing(value)\n    handleCurrentEditMessage(message)\n  };\n\n  const onMessageThreadClick = (message: TMessageHistory) => {\n    setThreadView(true);\n    handleSetCurrentThreadViewMessage(message);\n  };\n\n\n\n  return (\n    <Box style={{ paddingBlock: \"20px\", height: \"100%\" }}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {filterChatRooms(userChatRooms, activeRoomFilter).map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => {\n                  chooseRoom(room.jid);\n                  setThreadView(false);\n                }}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_thumbnail !== \"none\"\n                      ? room.room_thumbnail\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <div\n          {...getRootProps()}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            flexDirection: \"row\",\n            display: \"flex\",\n          }}\n        >\n          <ChatContainer>\n            {!!roomData && (\n              <ConversationHeader\n                style={{\n                  height: \"70px\",\n                }}\n              >\n                <ConversationHeader.Back />\n                {mainWindowMessages.length > 0 && (\n                  <ConversationHeader.Content\n                    userName={roomData.name}\n                    onClick={handleChatDetailClick}\n                    info={\n                      messages.filter(\n                        (item: TMessageHistory) => item.roomJID === currentRoom\n                      ).length > 0 &&\n                      \"Active \" +\n                        formatDistance(\n                          subDays(\n                            new Date(mainWindowMessages.slice(-1)[0].date),\n                            0\n                          ),\n                          new Date(),\n                          { addSuffix: true }\n                        )\n                    }\n                  />\n                )}\n                <ConversationHeader.Actions>\n                  <ChatAudioMessageDialog\n                    profile={profile}\n                    currentRoom={currentRoom}\n                    roomData={roomData}\n                  />\n                  <IconButton\n                    sx={{ color: \"black\" }}\n                    onClick={() => setQrModalVisible(true)}\n                  >\n                    <QrCodeIcon />\n                  </IconButton>\n                </ConversationHeader.Actions>\n              </ConversationHeader>\n            )}\n            <MessageList\n              style={{\n                backgroundImage: currentPickedRoom?.room_background\n                  ? `url(${currentPickedRoom.room_background})`\n                  : \"white\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundSize: \"100% 100%\",\n              }}\n              loadingMore={loaderArchive}\n              onYReachStart={onYReachStart}\n              disableOnYReachWhenNoScroll={true}\n              typingIndicator={\n                !!userChatRooms.filter((e) => e.jid === currentRoom)[0]\n                  ?.composing && (\n                  <TypingIndicator\n                    style={{ opacity: \".6\" }}\n                    content={\n                      userChatRooms.filter((e) => e.jid === currentRoom)[0]\n                        ?.composing\n                    }\n                  />\n                )\n              }\n            >\n              {mainWindowMessages.map((message, index, arr) => {\n                const position = getPosition(arr, message, index);\n                return message.data.isSystemMessage === \"false\" ? (\n                  <Message\n                    onThreadClick={() => onMessageThreadClick(message)}\n                    key={message.id}\n                    is={\"Message\"}\n                    position={position}\n                    message={message}\n                    onMessageButtonClick={sendMessage}\n                    toggleTransferDialog={toggleTransferDialog}\n                    onMediaMessageClick={toggleMediaModal}\n                  />\n                ) : (\n                  <SystemMessage\n                    key={message.id}\n                    is={\"Message\"}\n                    message={message}\n                    userJid={xmpp.client?.jid?.toString()}\n                  />\n                );\n              })}\n              {mainWindowMessages.length <= 0 ||\n                !currentRoom ||\n                (currentRoom === NO_ROOM_PICKED && (\n                  <MessageList.Content\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      height: \"100%\",\n                      textAlign: \"center\",\n                      fontSize: \"1.2em\",\n                    }}\n                  >\n                    {!loaderArchive ? (\n                      <span>\n                        {!currentRoom || currentRoom === NO_ROOM_PICKED\n                          ? \"Choose a chat room or create one to start a conversation.\"\n                          : null}\n                      </span>\n                    ) : (\n                      \"Loading...\"\n                    )}\n                  </MessageList.Content>\n                ))}\n              {!loaderArchive &&\n                currentRoom &&\n                currentRoom !== NO_ROOM_PICKED &&\n                mainWindowMessages.length <= 0 && (\n                  <MessageList.Content\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      height: \"100%\",\n                      textAlign: \"center\",\n                      fontSize: \"1.2em\",\n                    }}\n                  >\n                    Message list is empty\n                  </MessageList.Content>\n                )}\n            </MessageList>\n            {!!roomData?.name && (\n              <div is={\"MessageInput\"}>\n                {/* Edit message component */}\n                {isEditing&&<Divider/>}\n                <Slide\n                direction=\"up\"\n                in={isEditing}\n                mountOnEnter\n                unmountOnExit\n                >\n                  <Stack display={\"flex\"} height={\"50px\"} width={\"100%\"} direction={\"row\"}>\n                    <div style={{\n                      display:\"flex\",\n                      flex:\"0.05\",\n                      justifyContent:\"center\",\n                      alignItems:\"center\",\n                    }}>\n                      <EditIcon color=\"info\"/>\n                    </div>\n                    <div style={{\n                      display:\"flex\",\n                      flex:\"0.90\",\n                      flexDirection:\"column\"\n                    }}>\n                    <Typography\n                    color={\"#1976d2\"}\n                    fontWeight={\"bold\"}\n                    >\n                      Edit Message\n                    </Typography>\n                    <Typography>\n                      {currentEditMessage?.body}\n                    </Typography>\n                    </div>\n                    <div style={{\n                      display:\"flex\",\n                      flex:\"0.05\",\n                      justifyContent:\"center\",\n                      alignItems:\"center\"\n                    }}>\n                      <IconButton\n                      onClick={()=>onMenuEditClick(false,undefined)}\n                      aria-label=\"close\">\n                        <CloseIcon />\n                      </IconButton>\n                    </div>\n                  </Stack>\n                </Slide>\n\n                <MessageInput\n                  onPaste={handlePaste}\n                  placeholder=\"Type message here\"\n                  onChange={setMessage}\n                  onSend={sendMessage}\n                  onAttachClick={() => fileRef.current.click()}\n                />\n                <input\n                  type=\"file\"\n                  name=\"file\"\n                  id=\"file\"\n                  onChange={(event) => sendFile(event.target.files[0], false)}\n                  ref={fileRef}\n                  style={{ display: \"none\" }}\n                />\n              </div>\n            )}\n          </ChatContainer>\n          {isThreadView && (\n            <ThreadContainer\n              chooseRoom={chooseRoom}\n              currentPickedRoom={currentPickedRoom}\n              currentRoom={currentRoom}\n              handleSetThreadView={handleSetThreadView}\n              handleShowInChannel={handleShowInChannel}\n              isThreadView={isThreadView}\n              onYReachStart={onYReachStart}\n              profile={profile}\n              roomData={roomData}\n              sendFile={sendFile}\n              showInChannel={showInChannel}\n              toggleMediaModal={toggleMediaModal}\n              toggleTransferDialog={toggleTransferDialog}\n            />\n          )}\n        </div>\n      </MainContainer>\n\n      <ChatTransferDialog\n        open={transferDialogData.open}\n        onClose={() => toggleTransferDialog(false)}\n        loading={false}\n        onPrivateRoomClick={chooseRoom}\n        message={transferDialogData.message}\n        onThreadClick={onMenuThreadClick}\n        onEditClick={onMenuEditClick}\n      />\n      <ChatMediaModal\n        open={mediaDialogData.open}\n        onClose={() => toggleMediaModal(false)}\n        mimetype={mediaDialogData.message?.data?.mimetype}\n        url={mediaDialogData.message?.data?.location}\n      />\n\n      <Dialog\n        fullScreen={fullScreen}\n        open={uploadFileDialogData.open}\n        onClose={() =>\n          setUploadFileDialogData({\n            open: false,\n            description: \"\",\n            headline: \"\",\n          })\n        }\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {uploadFileDialogData.headline}\n        </DialogTitle>\n        <DialogContent>\n          {!!uploadFileDialogData.description ? (\n            <DialogContentText>\n              {uploadFileDialogData.description}\n            </DialogContentText>\n          ) : (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <CircularProgress />\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() =>\n              setUploadFileDialogData({\n                open: false,\n                description: \"\",\n                headline: \"\",\n              })\n            }\n            autoFocus\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <QrModal\n        open={isQrModalVisible}\n        link={generateChatLink({ roomAddress: currentPickedRoom?.jid })}\n        onClose={closeQrModal}\n        title={\"Share Chatroom\"}\n      />\n      <MetaNavigation\n        open={showMetaNavigation || openLastMetaRoom}\n        chatId={currentRoom.split(\"@\")[0]}\n        onClose={() => {\n          setShowMetaNavigation(false);\n\n          openLastMetaRoom && setActiveRoomFilter(\"\");\n        }}\n      />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n  return (\n    <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n      <ChatInRoom />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Button, Dialog, DialogTitle, IconButton } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport QRCode from \"react-qr-code\";\nimport { truncateString } from \"../../utils\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nexport interface IQrModal {\n  open: boolean;\n  link: string;\n  onClose: () => void;\n  title?: string;\n}\n\nexport const QrModal: React.FC<IQrModal> = ({ title, open, link, onClose }) => {\n  return (\n    <Dialog maxWidth={false} open={open} onClose={onClose}>\n      {!!title && (\n        <DialogTitle sx={{ padding: \"0 24px\", paddingTop: \"20px\" }}>\n          {title}\n        </DialogTitle>\n      )}\n      <Box sx={{ padding: \"20px\" }}>\n        <QRCode\n          size={256}\n          style={{ height: \"50vh\", maxWidth: \"100%\", width: \"100%\" }}\n          value={link}\n          viewBox={`0 0 256 256`}\n        />\n        <Box\n          sx={{\n            boxShadow: \"0px 0px 10px -5px rgba(0,0,0,0.75)\",\n            borderRadius: \"10px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            pl: \"10px\",\n            my: \"10px\",\n          }}\n        >\n          <span>{truncateString(link, 50)}</span>\n          <Button\n            variant=\"contained\"\n            sx={{ borderRadius: \"10px\", marginLeft: '5px' }}\n            onClick={() => navigator.clipboard.writeText(link)}\n          >\n            Copy\n          </Button>\n        </Box>\n        <IconButton\n          onClick={onClose}\n          sx={{\n            color: \"black\",\n            position: \"absolute\",\n            top: 10,\n            right: 10,\n            fontSize: \"30px\",\n          }}\n        >\n          <CloseIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Box>\n    </Dialog>\n  );\n};\n"],"names":["underscoreManipulation","str","replace","toLowerCase","createPrivateChat","myWalletAddress","otherUserWalletAddress","myFirstName","otherFirstName","userJID","combinedWalletAddress","sort","join","roomJid","CONFERENCEDOMAIN","combinedUsersName","currentChatRooms","useStoreState","userChatRooms","isNewRoom","filter","el","jid","length","xmpp","roomName","setTimeout","Message","message","position","onMessageButtonClick","toggleTransferDialog","onMediaMessageClick","onThreadClick","isThread","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","split","isSameUser","useMemo","toString","history","useHistory","useState","buttons","setButtons","React","anchorEl","setAnchorEl","openMenu","Boolean","messageDirection","setMessageDirection","openDialogMenu","fullViewImage","ReplyComponent","Button","variant","style","flexDirection","display","textTransform","textAlign","Divider","borderWidth","borderRadius","marginRight","orientation","flexItem","cursor","mainMessageUserName","mainMessageImageLocation","mainMessageMimeType","Card","sx","maxWidth","CardActionArea","onClick","CardMedia","height","objectFit","objectPosition","component","image","alt","mainMessageOriginalName","target","href","location","src","width","controls","type","title","dangerouslySetInnerHTML","__html","mainMessageText","useEffect","quickReplies","JSON","parse","is","separator","onContextMenu","isReply","event","preventDefault","marginBottom","model","sender","direction","avatarPosition","avatarSpacer","boxSizing","push","senderWalletAddress","photoURL","onError","currentTarget","onerror","justifyContent","alignItems","IconButton","id","undefined","MoreVert","isMediafile","imageMimetypes","mimetype","originalName","videoMimetypes","audioMimetypes","body","marginTop","minWidth","color","fontSize","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","coinsInMessage","coin","isEdited","marginLeft","Typography","numberOfReplies","Box","m","map","button","index","size","name","SystemMessage","userJid","fontFamily","key","CHAT","CompassItem","room","chatId","setDirection","padding","disabled","MetaHeader","previousRoom","fontWeight","description","metaDirection","metaRoom","DIRECTIONS","SHORT_DIRECTIONS","north","west","south","east","OPOSITE_DIRECTIONS","emptyMetaRoom","ownerNavLinks","ownerId","contractAddress","createdAt","_id","updatedAt","userNavLinks","top","left","transform","p","outline","MetaNavigation","open","onClose","previousDirection","setPreviousDirection","loading","setLoading","setPreviuosRoom","currentMetaRoom","setCurrentMetaRoom","user","state","theme","useTheme","getCurrentRoom","httpWithAuth","get","roomRoute","res","result","console","log","sendMessage","chatName","isPrevious","walletToUsername","walletAddress","textEnter","textLeave","isSystemMessage","tokenAmount","receiverMessageId","mucname","profileImage","mainMessageId","sendRoomJoin","post","renderDirections","oppositePreviousDirection","getOpositeDirection","checkEmptyDirections","Modal","CircularProgress","bgcolor","mb","gridTemplateColumns","palette","primary","main","Explore","props","onPaste","placeholder","onChange","onSend","sendFile","fileRef","onAttachClick","current","click","files","ref","roomData","handleSetThreadView","isThreadView","profile","currentPickedRoom","currentRoom","onYReachStart","toggleMediaModal","handleShowInChannel","showInChannel","currentThreadViewMessage","store","myThreadMessage","setMyThreadMessage","messages","historyMessages","roomJID","useParams","threadWindowMessages","item","includes","currentUntrackedChatRoom","loaderArchive","sendThreadMessage","trim","clearMessageFromHtml","DOMPurify","finalMessageTxt","stripHtml","mainMessageCreatedAt","mainMessageFileName","mainMessageImagePreview","locationPreview","mainMessageSize","mainMessageDuration","mainMessageWaveForm","mainMessageAttachmentId","mainMessageWrappable","mainMessageNftId","mainMessageNftActionType","mainMessageContractAddress","mainMessageRoomJid","borderLeftWidth","datatype","userName","Close","backgroundImage","room_background","backgroundRepeat","backgroundSize","disableOnYReachWhenNoScroll","typingIndicator","e","composing","opacity","content","arr","getPosition","borderColor","Checkbox","checked","inputProps","value","Array","from","clipboardData","items","find","x","test","blob","getAsFile","dialogItems","dialogTypes","ChatTransferDialog","onPrivateRoomClick","onEditClick","coinAmount","setCoinAmount","dialogType","setDialogType","balance","setNewUserChatRoom","showSnackbar","useSnackbar","coinData","tokenType","openThreadView","openEditView","userToBlackList","step","removeAllInMessageHistory","sendCoins","amount","currentCoinAmount","Number","transferCoin","tokenName","coinName","coinsMainName","coinReplacedName","receiver","textMessage","transactionId","transaction","openPrivateRoom","then","temporaryRoomData","room_thumbnail","users_cnt","unreadMessages","toUpdate","catch","error","Dialog","DialogContent","margin","startIcon","Send","Reply","Edit","Block","gutterBottom","TextField","label","renderDialogContent","boxShadow","ChatMediaModal","url","right","maxHeight","renderMediaContent","ChatAudioMessageDialog","recorderControls","useAudioRecorder","onRecordingComplete","formData","FormData","append","uploadFile","userAvatar","results","expiresAt","fileName","filename","isVisible","originalname","ownerKey","duration","userId","waveForm","attachmentId","wrappable","NO_ROOM_PICKED","ChatInRoom","setCurrentThreadViewMessage","setProfile","myMessage","setMyMessage","showMetaNavigation","setShowMetaNavigation","setThreadView","setShowInChannel","isEditing","setIsEditing","currentEditMessage","setCurrentEditMessage","handleSetCurrentThreadViewMessage","threadMessage","setCurrentRoom","mainWindowMessages","setRoomData","transferDialogData","setTransferDialogData","mediaDialogData","setMediaDialogData","isQrModalVisible","setQrModalVisible","headline","uploadFileDialogData","setUploadFileDialogData","firstLoadMessages","setFirstLoadMessages","activeRoomFilter","setActiveRoomFilter","openLastMetaRoom","ROOMS_FILTERS","useRef","fullScreen","useMediaQuery","breakpoints","down","onDrop","useCallback","acceptedFiles","getRootProps","useDropzone","noClick","maxFiles","filteredMessages","lastMessageID","String","loadMessages","getPublicProfile","chooseRoom","currentRoomData","clearCounterChatRoom","setCurrentUntrackedChatRoom","getConversationInfo","messagesInRoom","slice","getLastActiveTime","notDisplayedValue","file","additionalDataForThread","timeoutId","clearTimeout","window","onblur","onfocus","lastUpFilteredMessage","rooms","onMenuEditClick","handleCurrentEditMessage","paddingBlock","responsive","scrollable","group","active","unreadCnt","info","lastActivityTime","QrCode","loadingMore","onMessageThreadClick","Slide","in","mountOnEnter","unmountOnExit","Stack","flex","DialogTitle","DialogContentText","DialogActions","autoFocus","QrModal","link","generateChatLink","roomAddress","Chat","Container","paddingTop","viewBox","pl","my","truncateString","navigator","clipboard","writeText"],"sourceRoot":""}