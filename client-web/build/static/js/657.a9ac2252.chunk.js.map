{"version":3,"file":"static/js/657.a9ac2252.chunk.js","mappings":"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","sources":["componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Message as KitMessage, MessageModel, Button, MessageSeparator } from \"@chatscope/chat-ui-kit-react\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\nimport { TMessageHistory } from \"../../../store\";\nimport {useHistory} from \"react-router\";\n\nexport interface IMessage {\n  message: TMessageHistory;\n  userJid: string;\n  position: {\n    type: string;\n    position: MessageModel['position'];\n    separator?: string;\n  };\n  is?: string;\n  buttonSender: any\n}\n\nexport interface IButtons {\n  name: string;\n  notDisplayedValue: string;\n  value: string\n}\n\nexport const Message: React.FC<IMessage> = ({\n  message,\n  userJid,\n  position,\n  buttonSender\n}) => {\n  const firstName = message.data.senderFirstName;\n  const lastName = message.data.senderLastName;\n  const messageJid = message.data.senderJID;\n  const history = useHistory();\n  const [buttons, setButtons] = useState<IButtons[]>();\n\n  useEffect(() => {\n    if(message.data.quickReplies){\n      setButtons(JSON.parse(message.data.quickReplies));\n    }\n  }, [])\n\n  return (\n  <div is={\"Message\"}>\n    {position.separator ?\n      <MessageSeparator>\n        {position.separator}\n      </MessageSeparator> : null\n    }\n    <KitMessage\n      key={message.key}\n      model={{\n        sender: firstName + \" \" + lastName,\n        direction: String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"outgoing\" : \"incoming\",\n        position: position.position,\n      }}\n      avatarPosition={String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"tr\" : \"tl\"}\n      avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\n    >\n      {(position.type === \"first\" || position.type === \"single\") && (\n        <img\n          style={{\n            borderRadius: \"50%\",\n            boxSizing: \"border-box\",\n            width: \"42px\",\n            height: \"42px\",\n            cursor: \"pointer\"\n          }}\n          onClick={() => history.push(\"/profile/\"+message.data.senderWalletAddress)}\n          is={\"Avatar\"}\n          src={message.data.photoURL}\n          onError={({ currentTarget }) => {\n            currentTarget.onerror = null;\n            currentTarget.src =\n              \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\n          }}\n          alt={firstName}\n        />\n      )}\n\n      <KitMessage.CustomContent>\n        {(position.type === \"first\" || position.type === \"single\") && (\n          <strong style={{cursor: \"pointer\"}} onClick={() => history.push(\"/profile/\" + message.data.senderWalletAddress)}>\n            {firstName} {lastName}\n            <br />\n          </strong>\n        )}\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"image\"?\n           <KitMessage.ImageContent src={message.data.location} alt={message.data.originalName} width={200} />\n            :null\n        }\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"application\"?\n            <a target=\"_blank\" href={message.data.location}>\n              <KitMessage.ImageContent src={message.data.locationPreview} alt={message.data.originalName} width={150} />\n              {message.data.mimetype.split(\"/\")[1]}\n            </a>\n            :null\n        }\n\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"video\" ?\n            <video controls width=\"200px\">\n              <source src={message.data.location} type={message.data.mimetype} title={message.data.originalName}/>\n              Sorry, your browser doesn't support videos.\n            </video>\n            : null\n        }\n\n        {!message.data.isMediafile ?\n            message.body\n            : null\n        }\n      </KitMessage.CustomContent>\n\n      {(position.type === \"last\" || position.type === \"single\") && (\n        <KitMessage.Footer\n          sentTime={\n            differenceInHours(new Date(), new Date(message.date)) > 5\n              ? format(new Date(message.date), \"h:mm:ss a\")\n              : formatDistance(subDays(new Date(message.date), 0), new Date(), {\n                  addSuffix: true,\n                })\n          }\n        />\n      )}\n    </KitMessage>\n        {buttons ?\n            <div style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"max-content\",\n              marginLeft: \"45px\"\n            }}>\n              {buttons.map((button, index) => {\n                return (\n                  <Button onClick={() => buttonSender(button)} key={index} border>{button.name}</Button>\n                );\n             })}\n            </div>\n          : null}\n  </div>\n  );\n};\n","import {TMessageHistory} from \"../../../store\";\nimport React from \"react\";\n\nexport interface IMessage {\n    message: TMessageHistory;\n    userJid: string;\n    is?: string;\n}\n\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\n    return (\n        <div style={{\n            textAlign: \"center\",\n            color: \"#6ea9d7\",\n            fontSize: \".8em\",\n            boxSizing: \"border-box\",\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\n        }} key={message.key}>\n            {message.body}\n        </div>\n    );\n}","import React, {useEffect, useRef, useState} from \"react\";\nimport Box from \"@mui/material/Box\";\nimport xmpp from \"../../xmpp\";\nimport { TMessageHistory, useStoreState } from \"../../store\";\nimport {getPublicProfile, uploadFile} from \"../../http\";\nimport { TProfile } from \"../Profile/types\";\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\n\nimport {\n  MainContainer,\n  Avatar,\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  Conversation,\n  ConversationList,\n  Sidebar,\n  Search,\n  ConversationHeader,\n  TypingIndicator,\n  MessageModel,\n} from \"@chatscope/chat-ui-kit-react\";\nimport {Message} from \"../../componets/Chat/Messages/Message\";\nimport {SystemMessage} from \"../../componets/Chat/Messages/SystemMessage\";\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  useMediaQuery,\n  useTheme\n} from \"@mui/material\";\n\ntype IMessagePosition = {\n  position: MessageModel[\"position\"];\n  type: string;\n  separator?: string;\n};\n\nconst getPosition = (\n  arr: TMessageHistory[],\n  message: TMessageHistory,\n  index: number\n) => {\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\n\n  let result: IMessagePosition = {\n    position: \"single\",\n    type: \"single\",\n  };\n\n  if(arr[index - 1] && message){\n    if(format(new Date(arr[index - 1]?.date), \"dd\") !== format(new Date(message.date), \"dd\")){\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\n    }\n  }\n\n  if (previousJID !== currentJID && nextJID !== currentJID) {\n    return result;\n  }\n\n  if (previousJID !== currentJID && nextJID === currentJID) {\n    result.position = \"first\";\n    result.type = \"first\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID === currentJID) {\n    result.position = \"normal\";\n    result.type = \"normal\";\n    return result;\n  }\n\n  if (previousJID === currentJID && nextJID !== currentJID) {\n    result.position = \"single\";\n    result.type = \"last\";\n    return result;\n  }\n\n  return result;\n};\n\nexport function ChatInRoom() {\n  const messages = useStoreState((state) => state.historyMessages);\n  const user = useStoreState((store) => store.user);\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\n  const currentUntrackedChatRoom = useStoreState((store) => store.currentUntrackedChatRoom);\n  const [profile, setProfile] = useState<TProfile>();\n  const [myMessage, setMyMessage] = useState(\"\");\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n  const [roomData, setRoomData] = useState<{\n    jid: string;\n    name: string;\n    room_background: string;\n    room_thumbnail: string;\n    users_cnt: string;\n  }>({\n    jid: \"\",\n    name: \"\",\n    room_background: \"\",\n    room_thumbnail: \"\",\n    users_cnt: \"\",\n  });\n  const fileRef = useRef(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showDialogTxt, setShowDialogTxt] = useState(false);\n  const [dialogTxt, setDialogTxt] = useState<{headline: string, description: string}>({headline: \"\", description: \"\"});\n\n  const onYReachStart = () => {\n    if (loaderArchive) {\n      return;\n    } else {\n      const lastMessageID = messages.filter(\n        (item: any) => item.roomJID === currentRoom\n      )[0].id;\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\n    }\n  };\n\n  useEffect(() => {\n    getPublicProfile(user.walletAddress).then((result) => {\n      setProfile(result.data.result);\n    });\n  }, []);\n\n  const chooseRoom = (jid: string) => {\n    setCurrentRoom(jid);\n    setRoomData(useChatRooms.filter((e) => e.jid === jid)[0]);\n    useStoreState.getState().clearCounterChatRoom(jid);\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\n\n    const filteredMessages = messages.filter(\n      (item: any) => item.roomJID === jid\n    );\n\n    if (!loaderArchive && filteredMessages.length <= 10 && filteredMessages.length > 0) {\n      const lastMessageID = filteredMessages[0].id;\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 10);\n    }\n  };\n\n  const getConversationInfo = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (loaderArchive && messagesInRoom.length <= 0) {\n      return \"Loading...\";\n    }\n\n    if (messagesInRoom.length > 0) {\n      return messagesInRoom[0].body;\n    }\n    return \"No messages yet\";\n  };\n\n  const getLastActiveTime = (roomJID: string) => {\n    const messagesInRoom = messages\n      .filter((item: any) => item.roomJID === roomJID)\n      .slice(-1);\n    if (messagesInRoom.length <= 0) {\n      return \"\";\n    }\n\n    if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\n      return format(new Date(messagesInRoom[0].date), \"hh:mm\");\n    } else {\n      return formatDistance(\n        subDays(new Date(messagesInRoom[0].date), 0),\n        new Date(),\n        { addSuffix: true }\n      );\n    }\n  };\n\n  const sendMessage = (button: any) => {\n    let userAvatar = \"\";\n    if (profile?.profileImage) {\n      userAvatar = profile?.profileImage;\n    }\n\n    xmpp.sendMessage(\n      currentRoom,\n      user.firstName,\n      user.lastName,\n      userAvatar,\n      user.walletAddress,\n      typeof button === 'object' ? button.value : myMessage,\n        typeof button === 'object' ? button.notDisplayedValue : null\n    );\n  };\n\n  const sendFile = (file: File) => {\n    setDialogTxt({headline: \"File is loading, please wait...\", description: \"\"})\n    setOpenDialog(true);\n\n    const formData = new FormData();\n    formData.append('files', file);\n\n    uploadFile(formData).then(result => {\n      let userAvatar = \"\";\n      if (profile?.profileImage) {\n        userAvatar = profile?.profileImage;\n      }\n\n      result.data.results.map(async (item: any) => {\n        const data = {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          walletAddress: user.walletAddress,\n          chatName: roomData.name,\n          userAvatar: userAvatar,\n          createdAt: item.createdAt,\n          expiresAt: item.expiresAt,\n          fileName: item.filename,\n          isVisible: item.isVisible,\n          location: item.location,\n          locationPreview: item.locationPreview,\n          mimetype: item.mimetype,\n          originalName: item.originalname,\n          ownerKey: item.ownerKey,\n          size: item.size,\n          duration: item?.duration,\n          updatedAt: item.updatedAt,\n          userId: item.userId,\n          waveForm: \"\",\n          attachmentId: item._id,\n          wrappable: true,\n        };\n        xmpp.sendMediaMessageStanza(currentRoom, data);\n        setOpenDialog(false);\n      });\n    }).catch(error => {\n      console.log(error);\n      setDialogTxt({headline: \"Error\", description: \"An error occurred while uploading the file\"})\n      setShowDialogTxt(true);\n    })\n    fileRef.current.value = \"\";\n  }\n\n  const setMessage = (value) => {\n    setMyMessage(value);\n    xmpp.isComposing(user.walletAddress, roomData.jid, user.firstName+\" \"+user.lastName);\n  }\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      xmpp.pausedComposing(user.walletAddress, roomData.jid)\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [myMessage]);\n\n  useEffect(() => {\n    if(currentUntrackedChatRoom){\n      chooseRoom(currentUntrackedChatRoom);\n    }\n\n    window.onblur = () => {\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\n    }\n\n    window.onfocus = () => {\n      if(currentRoom){\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\n      }\n    }\n  }, [currentRoom])\n\n  return (\n    <Box style={{ height: \"500px\" }}>\n      <MainContainer responsive>\n        <Sidebar position=\"left\" scrollable={false}>\n          <Search placeholder=\"Search...\" />\n          <ConversationList loading={loaderArchive}>\n            {useChatRooms.map((room) => (\n              <Conversation\n                active={room.jid === currentRoom}\n                key={room.jid}\n                unreadCnt={room.unreadMessages}\n                onClick={() => chooseRoom(room.jid)}\n                name={room.name}\n                info={getConversationInfo(room.jid)}\n                lastActivityTime={getLastActiveTime(room.jid)}\n              >\n                <Avatar\n                  src={\n                    room.room_background !== \"none\"\n                      ? room.room_background\n                      : \"https://icotar.com/initials/\" + room.name\n                  }\n                />\n              </Conversation>\n            ))}\n          </ConversationList>\n        </Sidebar>\n\n        <ChatContainer>\n          {!!roomData.name && (\n            <ConversationHeader>\n              <ConversationHeader.Back />\n              {messages.filter((item: any) => item.roomJID === currentRoom)\n                .length > 0 && (\n                <ConversationHeader.Content\n                  userName={roomData.name}\n                  info={\n                    \"Active \" +\n                    formatDistance(\n                      subDays(\n                        new Date(\n                          messages\n                            .filter((item: any) => item.roomJID === currentRoom)\n                            .slice(-1)[0].date\n                        ),\n                        0\n                      ),\n                      new Date(),\n                      { addSuffix: true }\n                    )\n                  }\n                />\n              )}\n              <ConversationHeader.Actions>\n                <BookmarkRemoveIcon />\n              </ConversationHeader.Actions>\n            </ConversationHeader>\n          )}\n          <MessageList\n            loadingMore={loaderArchive}\n            onYReachStart={onYReachStart}\n            typingIndicator={\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                ?.composing && (\n                <TypingIndicator\n                  content={\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\n                      ?.composing\n                  }\n                />\n              )\n            }\n          >\n            {messages\n              .filter((item: any) => item.roomJID === currentRoom)\n              .map((message, index, arr) => {\n                const position = getPosition(arr, message, index);\n                if(message.data.isSystemMessage === \"false\") {\n                  return (\n                      <Message\n                          key={message.id}\n                          is={\"Message\"}\n                          position={position}\n                          message={message}\n                          userJid={xmpp.client?.jid?.toString()}\n                          buttonSender={sendMessage}\n                      />\n                  );\n                }else{\n                  return (\n                      <SystemMessage\n                          is={\"Message\"}\n                          message={message}\n                          userJid={xmpp.client?.jid?.toString()}\n                      />\n                  );\n                }\n              })}\n            {messages.length <= 0 ||\n              (!currentRoom && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  {!loaderArchive ? (\n                    <span>\n                      {!currentRoom &&\n                        \"To get started, please select a chat room.\"}\n                    </span>\n                  ) : (\n                    \"Loading...\"\n                  )}\n                </MessageList.Content>\n              ))}\n            {!loaderArchive &&\n              currentRoom &&\n              messages.filter((item: any) => item.roomJID === currentRoom)\n                .length <= 0 && (\n                <MessageList.Content\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    fontSize: \"1.2em\",\n                  }}\n                >\n                  Message list is empty\n                </MessageList.Content>\n              )}\n          </MessageList>\n          {!!roomData.name && (\n              <div is={\"MessageInput\"}>\n                <MessageInput\n                    placeholder=\"Type message here\"\n                    onChange={setMessage}\n                    onSend={sendMessage}\n                    onAttachClick={() => fileRef.current.click()}\n                />\n                <input type='file' name=\"file\" id='file' onChange={event => sendFile(event.target.files[0])} ref={fileRef} style={{display: 'none'}}/>\n              </div>\n          )}\n        </ChatContainer>\n      </MainContainer>\n\n      <Dialog\n          fullScreen={fullScreen}\n          open={openDialog}\n          onClose={() => setOpenDialog(true)}\n          aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {dialogTxt.headline}\n        </DialogTitle>\n        <DialogContent>\n          {showDialogTxt && dialogTxt.description.length > 0 ?\n              <DialogContentText>\n                {dialogTxt.description}\n              </DialogContentText>\n          :\n              <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n                <CircularProgress />\n              </Box>\n          }\n        </DialogContent>\n        {showDialogTxt ?\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)} autoFocus>\n              Close\n          </Button>\n        </DialogActions>\n        :null\n        }\n      </Dialog>\n    </Box>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport { useStoreState } from \"../../store\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatInRoom } from \"./Chat\";\n\nexport default function Chat() {\n    const user = useStoreState((state) => state.user);\n    const messages = useStoreState((state) => state.messages);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!user.firstName) {\n            history.push(\"/\");\n        }\n    }, [user.firstName, history]);\n    return (\n        <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\n            <Box>Chat</Box>\n            <Box>{messages.length}</Box>\n            <ChatInRoom />\n        </Container>\n    );\n}\n"],"names":["Message","message","userJid","position","buttonSender","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","isMediafile","mimetype","location","originalName","target","href","locationPreview","controls","title","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","key","display","flexDirection","marginLeft","map","button","index","border","name","SystemMessage","textAlign","color","fontSize","fontFamily","ChatInRoom","messages","useStoreState","state","historyMessages","user","store","useChatRooms","userChatRooms","loaderArchive","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","jid","room_background","room_thumbnail","users_cnt","roomData","setRoomData","fileRef","useRef","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","openDialog","setOpenDialog","showDialogTxt","setShowDialogTxt","headline","description","dialogTxt","setDialogTxt","getPublicProfile","walletAddress","then","result","chooseRoom","filter","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","roomJID","length","lastMessageID","id","xmpp","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","userAvatar","profileImage","value","notDisplayedValue","timeoutId","setTimeout","clearTimeout","window","onblur","onfocus","Box","responsive","scrollable","placeholder","loading","room","active","unreadCnt","unreadMessages","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","typingIndicator","composing","content","arr","previousJID","nextJID","currentJID","getPosition","isSystemMessage","toString","justifyContent","onChange","onSend","onAttachClick","current","click","event","file","formData","FormData","append","uploadFile","results","chatName","createdAt","expiresAt","fileName","filename","isVisible","originalname","ownerKey","size","duration","updatedAt","userId","waveForm","attachmentId","_id","wrappable","catch","error","console","log","sendFile","files","ref","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","sx","CircularProgress","DialogActions","Button","autoFocus","Chat","Container","maxWidth"],"sourceRoot":""}