{"version":3,"file":"static/js/657.a9ac2252.chunk.js","mappings":"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","sources":["componets/Chat/Messages/Message.tsx","componets/Chat/Messages/SystemMessage.tsx","pages/ChatInRoom/Chat.tsx","pages/ChatInRoom/index.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport { Message as KitMessage, MessageModel, Button, MessageSeparator } from \"@chatscope/chat-ui-kit-react\";\r\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\r\nimport { TMessageHistory } from \"../../../store\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nexport interface IMessage {\r\n  message: TMessageHistory;\r\n  userJid: string;\r\n  position: {\r\n    type: string;\r\n    position: MessageModel['position'];\r\n    separator?: string;\r\n  };\r\n  is?: string;\r\n  buttonSender: any\r\n}\r\n\r\nexport interface IButtons {\r\n  name: string;\r\n  notDisplayedValue: string;\r\n  value: string\r\n}\r\n\r\nexport const Message: React.FC<IMessage> = ({\r\n  message,\r\n  userJid,\r\n  position,\r\n  buttonSender\r\n}) => {\r\n  const firstName = message.data.senderFirstName;\r\n  const lastName = message.data.senderLastName;\r\n  const messageJid = message.data.senderJID;\r\n  const history = useHistory();\r\n  const [buttons, setButtons] = useState<IButtons[]>();\r\n\r\n  useEffect(() => {\r\n    if(message.data.quickReplies){\r\n      setButtons(JSON.parse(message.data.quickReplies));\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n  <div is={\"Message\"}>\r\n    {position.separator ?\r\n      <MessageSeparator>\r\n        {position.separator}\r\n      </MessageSeparator> : null\r\n    }\r\n    <KitMessage\r\n      key={message.key}\r\n      model={{\r\n        sender: firstName + \" \" + lastName,\r\n        direction: String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"outgoing\" : \"incoming\",\r\n        position: position.position,\r\n      }}\r\n      avatarPosition={String(userJid).split(\"/\")[0] === String(messageJid).split(\"/\")[0] ? \"tr\" : \"tl\"}\r\n      avatarSpacer={position.type !== \"first\" && position.type !== \"single\"}\r\n    >\r\n      {(position.type === \"first\" || position.type === \"single\") && (\r\n        <img\r\n          style={{\r\n            borderRadius: \"50%\",\r\n            boxSizing: \"border-box\",\r\n            width: \"42px\",\r\n            height: \"42px\",\r\n            cursor: \"pointer\"\r\n          }}\r\n          onClick={() => history.push(\"/profile/\"+message.data.senderWalletAddress)}\r\n          is={\"Avatar\"}\r\n          src={message.data.photoURL}\r\n          onError={({ currentTarget }) => {\r\n            currentTarget.onerror = null;\r\n            currentTarget.src =\r\n              \"https://icotar.com/initials/\" + firstName + \" \" + lastName;\r\n          }}\r\n          alt={firstName}\r\n        />\r\n      )}\r\n\r\n      <KitMessage.CustomContent>\r\n        {(position.type === \"first\" || position.type === \"single\") && (\r\n          <strong style={{cursor: \"pointer\"}} onClick={() => history.push(\"/profile/\" + message.data.senderWalletAddress)}>\r\n            {firstName} {lastName}\r\n            <br />\r\n          </strong>\r\n        )}\r\n\r\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"image\"?\r\n           <KitMessage.ImageContent src={message.data.location} alt={message.data.originalName} width={200} />\r\n            :null\r\n        }\r\n\r\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"application\"?\r\n            <a target=\"_blank\" href={message.data.location}>\r\n              <KitMessage.ImageContent src={message.data.locationPreview} alt={message.data.originalName} width={150} />\r\n              {message.data.mimetype.split(\"/\")[1]}\r\n            </a>\r\n            :null\r\n        }\r\n\r\n        {message.data.isMediafile && message.data.mimetype.split(\"/\")[0] === \"video\" ?\r\n            <video controls width=\"200px\">\r\n              <source src={message.data.location} type={message.data.mimetype} title={message.data.originalName}/>\r\n              Sorry, your browser doesn't support videos.\r\n            </video>\r\n            : null\r\n        }\r\n\r\n        {!message.data.isMediafile ?\r\n            message.body\r\n            : null\r\n        }\r\n      </KitMessage.CustomContent>\r\n\r\n      {(position.type === \"last\" || position.type === \"single\") && (\r\n        <KitMessage.Footer\r\n          sentTime={\r\n            differenceInHours(new Date(), new Date(message.date)) > 5\r\n              ? format(new Date(message.date), \"h:mm:ss a\")\r\n              : formatDistance(subDays(new Date(message.date), 0), new Date(), {\r\n                  addSuffix: true,\r\n                })\r\n          }\r\n        />\r\n      )}\r\n    </KitMessage>\r\n        {buttons ?\r\n            <div style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              width: \"max-content\",\r\n              marginLeft: \"45px\"\r\n            }}>\r\n              {buttons.map((button, index) => {\r\n                return (\r\n                  <Button onClick={() => buttonSender(button)} key={index} border>{button.name}</Button>\r\n                );\r\n             })}\r\n            </div>\r\n          : null}\r\n  </div>\r\n  );\r\n};\r\n","import {TMessageHistory} from \"../../../store\";\r\nimport React from \"react\";\r\n\r\nexport interface IMessage {\r\n    message: TMessageHistory;\r\n    userJid: string;\r\n    is?: string;\r\n}\r\n\r\nexport const SystemMessage: React.FC<IMessage> = ({message, userJid}) => {\r\n    return (\r\n        <div style={{\r\n            textAlign: \"center\",\r\n            color: \"#6ea9d7\",\r\n            fontSize: \".8em\",\r\n            boxSizing: \"border-box\",\r\n            fontFamily: \"Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif\"\r\n        }} key={message.key}>\r\n            {message.body}\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useRef, useState} from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport xmpp from \"../../xmpp\";\r\nimport { TMessageHistory, useStoreState } from \"../../store\";\r\nimport {getPublicProfile, uploadFile} from \"../../http\";\r\nimport { TProfile } from \"../Profile/types\";\r\nimport BookmarkRemoveIcon from \"@mui/icons-material/BookmarkRemove\";\r\nimport { differenceInHours, format, formatDistance, subDays } from \"date-fns\";\r\n\r\nimport {\r\n  MainContainer,\r\n  Avatar,\r\n  ChatContainer,\r\n  MessageList,\r\n  MessageInput,\r\n  Conversation,\r\n  ConversationList,\r\n  Sidebar,\r\n  Search,\r\n  ConversationHeader,\r\n  TypingIndicator,\r\n  MessageModel,\r\n} from \"@chatscope/chat-ui-kit-react\";\r\nimport {Message} from \"../../componets/Chat/Messages/Message\";\r\nimport {SystemMessage} from \"../../componets/Chat/Messages/SystemMessage\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  useMediaQuery,\r\n  useTheme\r\n} from \"@mui/material\";\r\n\r\ntype IMessagePosition = {\r\n  position: MessageModel[\"position\"];\r\n  type: string;\r\n  separator?: string;\r\n};\r\n\r\nconst getPosition = (\r\n  arr: TMessageHistory[],\r\n  message: TMessageHistory,\r\n  index: number\r\n) => {\r\n  const previousJID = arr[index - 1]?.data.senderJID?.split(\"/\")[0];\r\n  const nextJID = arr[index + 1]?.data.senderJID?.split(\"/\")[0];\r\n  const currentJID = message.data.senderJID?.split(\"/\")[0];\r\n\r\n  let result: IMessagePosition = {\r\n    position: \"single\",\r\n    type: \"single\",\r\n  };\r\n\r\n  if(arr[index - 1] && message){\r\n    if(format(new Date(arr[index - 1]?.date), \"dd\") !== format(new Date(message.date), \"dd\")){\r\n      result.separator = format(new Date(message.date), \"EEEE, dd LLLL yyyy\");\r\n    }\r\n  }\r\n\r\n  if (previousJID !== currentJID && nextJID !== currentJID) {\r\n    return result;\r\n  }\r\n\r\n  if (previousJID !== currentJID && nextJID === currentJID) {\r\n    result.position = \"first\";\r\n    result.type = \"first\";\r\n    return result;\r\n  }\r\n\r\n  if (previousJID === currentJID && nextJID === currentJID) {\r\n    result.position = \"normal\";\r\n    result.type = \"normal\";\r\n    return result;\r\n  }\r\n\r\n  if (previousJID === currentJID && nextJID !== currentJID) {\r\n    result.position = \"single\";\r\n    result.type = \"last\";\r\n    return result;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport function ChatInRoom() {\r\n  const messages = useStoreState((state) => state.historyMessages);\r\n  const user = useStoreState((store) => store.user);\r\n  const useChatRooms = useStoreState((store) => store.userChatRooms);\r\n  const loaderArchive = useStoreState((store) => store.loaderArchive);\r\n  const currentUntrackedChatRoom = useStoreState((store) => store.currentUntrackedChatRoom);\r\n  const [profile, setProfile] = useState<TProfile>();\r\n  const [myMessage, setMyMessage] = useState(\"\");\r\n  const [currentRoom, setCurrentRoom] = useState(\"\");\r\n  const [roomData, setRoomData] = useState<{\r\n    jid: string;\r\n    name: string;\r\n    room_background: string;\r\n    room_thumbnail: string;\r\n    users_cnt: string;\r\n  }>({\r\n    jid: \"\",\r\n    name: \"\",\r\n    room_background: \"\",\r\n    room_thumbnail: \"\",\r\n    users_cnt: \"\",\r\n  });\r\n  const fileRef = useRef(null);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [showDialogTxt, setShowDialogTxt] = useState(false);\r\n  const [dialogTxt, setDialogTxt] = useState<{headline: string, description: string}>({headline: \"\", description: \"\"});\r\n\r\n  const onYReachStart = () => {\r\n    if (loaderArchive) {\r\n      return;\r\n    } else {\r\n      const lastMessageID = messages.filter(\r\n        (item: any) => item.roomJID === currentRoom\r\n      )[0].id;\r\n      xmpp.getPaginatedArchive(currentRoom, String(lastMessageID), 10);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPublicProfile(user.walletAddress).then((result) => {\r\n      setProfile(result.data.result);\r\n    });\r\n  }, []);\r\n\r\n  const chooseRoom = (jid: string) => {\r\n    setCurrentRoom(jid);\r\n    setRoomData(useChatRooms.filter((e) => e.jid === jid)[0]);\r\n    useStoreState.getState().clearCounterChatRoom(jid);\r\n    useStoreState.getState().setCurrentUntrackedChatRoom(jid);\r\n\r\n    const filteredMessages = messages.filter(\r\n      (item: any) => item.roomJID === jid\r\n    );\r\n\r\n    if (!loaderArchive && filteredMessages.length <= 10 && filteredMessages.length > 0) {\r\n      const lastMessageID = filteredMessages[0].id;\r\n      xmpp.getPaginatedArchive(jid, String(lastMessageID), 10);\r\n    }\r\n  };\r\n\r\n  const getConversationInfo = (roomJID: string) => {\r\n    const messagesInRoom = messages\r\n      .filter((item: any) => item.roomJID === roomJID)\r\n      .slice(-1);\r\n    if (loaderArchive && messagesInRoom.length <= 0) {\r\n      return \"Loading...\";\r\n    }\r\n\r\n    if (messagesInRoom.length > 0) {\r\n      return messagesInRoom[0].body;\r\n    }\r\n    return \"No messages yet\";\r\n  };\r\n\r\n  const getLastActiveTime = (roomJID: string) => {\r\n    const messagesInRoom = messages\r\n      .filter((item: any) => item.roomJID === roomJID)\r\n      .slice(-1);\r\n    if (messagesInRoom.length <= 0) {\r\n      return \"\";\r\n    }\r\n\r\n    if (differenceInHours(new Date(), new Date(messagesInRoom[0].date)) > 1) {\r\n      return format(new Date(messagesInRoom[0].date), \"hh:mm\");\r\n    } else {\r\n      return formatDistance(\r\n        subDays(new Date(messagesInRoom[0].date), 0),\r\n        new Date(),\r\n        { addSuffix: true }\r\n      );\r\n    }\r\n  };\r\n\r\n  const sendMessage = (button: any) => {\r\n    let userAvatar = \"\";\r\n    if (profile?.profileImage) {\r\n      userAvatar = profile?.profileImage;\r\n    }\r\n\r\n    xmpp.sendMessage(\r\n      currentRoom,\r\n      user.firstName,\r\n      user.lastName,\r\n      userAvatar,\r\n      user.walletAddress,\r\n      typeof button === 'object' ? button.value : myMessage,\r\n        typeof button === 'object' ? button.notDisplayedValue : null\r\n    );\r\n  };\r\n\r\n  const sendFile = (file: File) => {\r\n    setDialogTxt({headline: \"File is loading, please wait...\", description: \"\"})\r\n    setOpenDialog(true);\r\n\r\n    const formData = new FormData();\r\n    formData.append('files', file);\r\n\r\n    uploadFile(formData).then(result => {\r\n      let userAvatar = \"\";\r\n      if (profile?.profileImage) {\r\n        userAvatar = profile?.profileImage;\r\n      }\r\n\r\n      result.data.results.map(async (item: any) => {\r\n        const data = {\r\n          firstName: user.firstName,\r\n          lastName: user.lastName,\r\n          walletAddress: user.walletAddress,\r\n          chatName: roomData.name,\r\n          userAvatar: userAvatar,\r\n          createdAt: item.createdAt,\r\n          expiresAt: item.expiresAt,\r\n          fileName: item.filename,\r\n          isVisible: item.isVisible,\r\n          location: item.location,\r\n          locationPreview: item.locationPreview,\r\n          mimetype: item.mimetype,\r\n          originalName: item.originalname,\r\n          ownerKey: item.ownerKey,\r\n          size: item.size,\r\n          duration: item?.duration,\r\n          updatedAt: item.updatedAt,\r\n          userId: item.userId,\r\n          waveForm: \"\",\r\n          attachmentId: item._id,\r\n          wrappable: true,\r\n        };\r\n        xmpp.sendMediaMessageStanza(currentRoom, data);\r\n        setOpenDialog(false);\r\n      });\r\n    }).catch(error => {\r\n      console.log(error);\r\n      setDialogTxt({headline: \"Error\", description: \"An error occurred while uploading the file\"})\r\n      setShowDialogTxt(true);\r\n    })\r\n    fileRef.current.value = \"\";\r\n  }\r\n\r\n  const setMessage = (value) => {\r\n    setMyMessage(value);\r\n    xmpp.isComposing(user.walletAddress, roomData.jid, user.firstName+\" \"+user.lastName);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      xmpp.pausedComposing(user.walletAddress, roomData.jid)\r\n    }, 1000);\r\n    return () => clearTimeout(timeoutId);\r\n  }, [myMessage]);\r\n\r\n  useEffect(() => {\r\n    if(currentUntrackedChatRoom){\r\n      chooseRoom(currentUntrackedChatRoom);\r\n    }\r\n\r\n    window.onblur = () => {\r\n      useStoreState.getState().setCurrentUntrackedChatRoom(\"\");\r\n    }\r\n\r\n    window.onfocus = () => {\r\n      if(currentRoom){\r\n        useStoreState.getState().setCurrentUntrackedChatRoom(currentRoom);\r\n        useStoreState.getState().clearCounterChatRoom(currentRoom);\r\n      }\r\n    }\r\n  }, [currentRoom])\r\n\r\n  return (\r\n    <Box style={{ height: \"500px\" }}>\r\n      <MainContainer responsive>\r\n        <Sidebar position=\"left\" scrollable={false}>\r\n          <Search placeholder=\"Search...\" />\r\n          <ConversationList loading={loaderArchive}>\r\n            {useChatRooms.map((room) => (\r\n              <Conversation\r\n                active={room.jid === currentRoom}\r\n                key={room.jid}\r\n                unreadCnt={room.unreadMessages}\r\n                onClick={() => chooseRoom(room.jid)}\r\n                name={room.name}\r\n                info={getConversationInfo(room.jid)}\r\n                lastActivityTime={getLastActiveTime(room.jid)}\r\n              >\r\n                <Avatar\r\n                  src={\r\n                    room.room_background !== \"none\"\r\n                      ? room.room_background\r\n                      : \"https://icotar.com/initials/\" + room.name\r\n                  }\r\n                />\r\n              </Conversation>\r\n            ))}\r\n          </ConversationList>\r\n        </Sidebar>\r\n\r\n        <ChatContainer>\r\n          {!!roomData.name && (\r\n            <ConversationHeader>\r\n              <ConversationHeader.Back />\r\n              {messages.filter((item: any) => item.roomJID === currentRoom)\r\n                .length > 0 && (\r\n                <ConversationHeader.Content\r\n                  userName={roomData.name}\r\n                  info={\r\n                    \"Active \" +\r\n                    formatDistance(\r\n                      subDays(\r\n                        new Date(\r\n                          messages\r\n                            .filter((item: any) => item.roomJID === currentRoom)\r\n                            .slice(-1)[0].date\r\n                        ),\r\n                        0\r\n                      ),\r\n                      new Date(),\r\n                      { addSuffix: true }\r\n                    )\r\n                  }\r\n                />\r\n              )}\r\n              <ConversationHeader.Actions>\r\n                <BookmarkRemoveIcon />\r\n              </ConversationHeader.Actions>\r\n            </ConversationHeader>\r\n          )}\r\n          <MessageList\r\n            loadingMore={loaderArchive}\r\n            onYReachStart={onYReachStart}\r\n            typingIndicator={\r\n              !!useChatRooms.filter((e) => e.jid === currentRoom)[0]\r\n                ?.composing && (\r\n                <TypingIndicator\r\n                  content={\r\n                    useChatRooms.filter((e) => e.jid === currentRoom)[0]\r\n                      ?.composing\r\n                  }\r\n                />\r\n              )\r\n            }\r\n          >\r\n            {messages\r\n              .filter((item: any) => item.roomJID === currentRoom)\r\n              .map((message, index, arr) => {\r\n                const position = getPosition(arr, message, index);\r\n                if(message.data.isSystemMessage === \"false\") {\r\n                  return (\r\n                      <Message\r\n                          key={message.id}\r\n                          is={\"Message\"}\r\n                          position={position}\r\n                          message={message}\r\n                          userJid={xmpp.client?.jid?.toString()}\r\n                          buttonSender={sendMessage}\r\n                      />\r\n                  );\r\n                }else{\r\n                  return (\r\n                      <SystemMessage\r\n                          is={\"Message\"}\r\n                          message={message}\r\n                          userJid={xmpp.client?.jid?.toString()}\r\n                      />\r\n                  );\r\n                }\r\n              })}\r\n            {messages.length <= 0 ||\r\n              (!currentRoom && (\r\n                <MessageList.Content\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"center\",\r\n                    height: \"100%\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"1.2em\",\r\n                  }}\r\n                >\r\n                  {!loaderArchive ? (\r\n                    <span>\r\n                      {!currentRoom &&\r\n                        \"To get started, please select a chat room.\"}\r\n                    </span>\r\n                  ) : (\r\n                    \"Loading...\"\r\n                  )}\r\n                </MessageList.Content>\r\n              ))}\r\n            {!loaderArchive &&\r\n              currentRoom &&\r\n              messages.filter((item: any) => item.roomJID === currentRoom)\r\n                .length <= 0 && (\r\n                <MessageList.Content\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"center\",\r\n                    height: \"100%\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"1.2em\",\r\n                  }}\r\n                >\r\n                  Message list is empty\r\n                </MessageList.Content>\r\n              )}\r\n          </MessageList>\r\n          {!!roomData.name && (\r\n              <div is={\"MessageInput\"}>\r\n                <MessageInput\r\n                    placeholder=\"Type message here\"\r\n                    onChange={setMessage}\r\n                    onSend={sendMessage}\r\n                    onAttachClick={() => fileRef.current.click()}\r\n                />\r\n                <input type='file' name=\"file\" id='file' onChange={event => sendFile(event.target.files[0])} ref={fileRef} style={{display: 'none'}}/>\r\n              </div>\r\n          )}\r\n        </ChatContainer>\r\n      </MainContainer>\r\n\r\n      <Dialog\r\n          fullScreen={fullScreen}\r\n          open={openDialog}\r\n          onClose={() => setOpenDialog(true)}\r\n          aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\">\r\n          {dialogTxt.headline}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {showDialogTxt && dialogTxt.description.length > 0 ?\r\n              <DialogContentText>\r\n                {dialogTxt.description}\r\n              </DialogContentText>\r\n          :\r\n              <Box sx={{ display: 'flex', justifyContent: 'center' }}>\r\n                <CircularProgress />\r\n              </Box>\r\n          }\r\n        </DialogContent>\r\n        {showDialogTxt ?\r\n          <DialogActions>\r\n            <Button onClick={() => setOpenDialog(false)} autoFocus>\r\n              Close\r\n          </Button>\r\n        </DialogActions>\r\n        :null\r\n        }\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useStoreState } from \"../../store\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatInRoom } from \"./Chat\";\r\n\r\nexport default function Chat() {\r\n    const user = useStoreState((state) => state.user);\r\n    const messages = useStoreState((state) => state.messages);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!user.firstName) {\r\n            history.push(\"/\");\r\n        }\r\n    }, [user.firstName, history]);\r\n    return (\r\n        <Container maxWidth=\"xl\" style={{ height: \"calc(100vh - 68px)\" }}>\r\n            <Box>Chat</Box>\r\n            <Box>{messages.length}</Box>\r\n            <ChatInRoom />\r\n        </Container>\r\n    );\r\n}\r\n"],"names":["Message","message","userJid","position","buttonSender","firstName","data","senderFirstName","lastName","senderLastName","messageJid","senderJID","history","useHistory","useState","buttons","setButtons","useEffect","quickReplies","JSON","parse","is","separator","model","sender","direction","String","split","avatarPosition","avatarSpacer","type","style","borderRadius","boxSizing","width","height","cursor","onClick","push","senderWalletAddress","src","photoURL","onError","currentTarget","onerror","alt","isMediafile","mimetype","location","originalName","target","href","locationPreview","controls","title","body","sentTime","differenceInHours","Date","date","format","formatDistance","subDays","addSuffix","key","display","flexDirection","marginLeft","map","button","index","border","name","SystemMessage","textAlign","color","fontSize","fontFamily","ChatInRoom","messages","useStoreState","state","historyMessages","user","store","useChatRooms","userChatRooms","loaderArchive","currentUntrackedChatRoom","profile","setProfile","myMessage","setMyMessage","currentRoom","setCurrentRoom","jid","room_background","room_thumbnail","users_cnt","roomData","setRoomData","fileRef","useRef","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","openDialog","setOpenDialog","showDialogTxt","setShowDialogTxt","headline","description","dialogTxt","setDialogTxt","getPublicProfile","walletAddress","then","result","chooseRoom","filter","e","clearCounterChatRoom","setCurrentUntrackedChatRoom","filteredMessages","item","roomJID","length","lastMessageID","id","xmpp","getConversationInfo","messagesInRoom","slice","getLastActiveTime","sendMessage","userAvatar","profileImage","value","notDisplayedValue","timeoutId","setTimeout","clearTimeout","window","onblur","onfocus","Box","responsive","scrollable","placeholder","loading","room","active","unreadCnt","unreadMessages","info","lastActivityTime","userName","BookmarkRemove","loadingMore","onYReachStart","typingIndicator","composing","content","arr","previousJID","nextJID","currentJID","getPosition","isSystemMessage","toString","justifyContent","onChange","onSend","onAttachClick","current","click","event","file","formData","FormData","append","uploadFile","results","chatName","createdAt","expiresAt","fileName","filename","isVisible","originalname","ownerKey","size","duration","updatedAt","userId","waveForm","attachmentId","_id","wrappable","catch","error","console","log","sendFile","files","ref","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","sx","CircularProgress","DialogActions","Button","autoFocus","Chat","Container","maxWidth"],"sourceRoot":""}